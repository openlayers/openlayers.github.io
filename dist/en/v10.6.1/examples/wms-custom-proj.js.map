{"version":3,"file":"wms-custom-proj.js","mappings":"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","sources":["webpack:///./wms-custom-proj.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ScaleLine from '../src/ol/control/ScaleLine.js';\nimport {defaults as defaultControls} from '../src/ol/control/defaults.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport Projection from '../src/ol/proj/Projection.js';\nimport {\n  addCoordinateTransforms,\n  addProjection,\n  transform,\n} from '../src/ol/proj.js';\nimport TileWMS from '../src/ol/source/TileWMS.js';\n\n// By default OpenLayers does not know about the EPSG:21781 (Swiss) projection.\n// So we create a projection instance for EPSG:21781 and pass it to\n// ol/proj~addProjection to make it available to the library for lookup by its\n// code.\n\nconst projection = new Projection({\n  code: 'EPSG:21781',\n  // The extent is used to determine zoom level 0. Recommended values for a\n  // projection's validity extent can be found at https://epsg.io/.\n  extent: [485869.5728, 76443.1884, 837076.5648, 299941.7864],\n  units: 'm',\n});\naddProjection(projection);\n\n// We also declare EPSG:21781/EPSG:4326 transform functions. These functions\n// are necessary for the ScaleLine control and when calling ol/proj~transform\n// for setting the view's initial center (see below).\n\naddCoordinateTransforms(\n  'EPSG:4326',\n  projection,\n  function (coordinate) {\n    return [\n      WGStoCHy(coordinate[1], coordinate[0]),\n      WGStoCHx(coordinate[1], coordinate[0]),\n    ];\n  },\n  function (coordinate) {\n    return [\n      CHtoWGSlng(coordinate[0], coordinate[1]),\n      CHtoWGSlat(coordinate[0], coordinate[1]),\n    ];\n  },\n);\n\nconst extent = [420000, 30000, 900000, 350000];\nconst layers = [\n  new TileLayer({\n    extent: extent,\n    source: new TileWMS({\n      url: 'https://wms.geo.admin.ch/',\n      crossOrigin: 'anonymous',\n      attributions:\n        '© <a href=\"https://shop.swisstopo.admin.ch/en/products/maps/national/lk1000\"' +\n        'target=\"_blank\">Pixelmap 1:1000000 / geo.admin.ch</a>',\n      params: {\n        'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\n        'FORMAT': 'image/jpeg',\n      },\n      serverType: 'mapserver',\n    }),\n  }),\n  new TileLayer({\n    extent: extent,\n    source: new TileWMS({\n      url: 'https://wms.geo.admin.ch/',\n      crossOrigin: 'anonymous',\n      attributions:\n        '© <a href=\"https://www.hydrodaten.admin.ch/en/notes-on-the-flood-alert-maps.html\"' +\n        'target=\"_blank\">Flood Alert / geo.admin.ch</a>',\n      params: {'LAYERS': 'ch.bafu.hydroweb-warnkarte_national'},\n      serverType: 'mapserver',\n    }),\n  }),\n];\n\nconst map = new Map({\n  controls: defaultControls().extend([\n    new ScaleLine({\n      units: 'metric',\n    }),\n  ]),\n  layers: layers,\n  target: 'map',\n  view: new View({\n    projection: projection,\n    center: transform([8.23, 46.86], 'EPSG:4326', 'EPSG:21781'),\n    extent: extent,\n    zoom: 2,\n  }),\n});\n\n/*\n * Swiss projection transform functions downloaded from\n * https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/reference-systems/map-projections.html\n */\n\n// Convert WGS lat/long (° dec) to CH y\nfunction WGStoCHy(lat, lng) {\n  // Converts degrees dec to sex\n  lat = DECtoSEX(lat);\n  lng = DECtoSEX(lng);\n\n  // Converts degrees to seconds (sex)\n  lat = DEGtoSEC(lat);\n  lng = DEGtoSEC(lng);\n\n  // Axillary values (% Bern)\n  const lat_aux = (lat - 169028.66) / 10000;\n  const lng_aux = (lng - 26782.5) / 10000;\n\n  // Process Y\n  const y =\n    600072.37 +\n    211455.93 * lng_aux -\n    10938.51 * lng_aux * lat_aux -\n    0.36 * lng_aux * Math.pow(lat_aux, 2) -\n    44.54 * Math.pow(lng_aux, 3);\n\n  return y;\n}\n\n// Convert WGS lat/long (° dec) to CH x\nfunction WGStoCHx(lat, lng) {\n  // Converts degrees dec to sex\n  lat = DECtoSEX(lat);\n  lng = DECtoSEX(lng);\n\n  // Converts degrees to seconds (sex)\n  lat = DEGtoSEC(lat);\n  lng = DEGtoSEC(lng);\n\n  // Axillary values (% Bern)\n  const lat_aux = (lat - 169028.66) / 10000;\n  const lng_aux = (lng - 26782.5) / 10000;\n\n  // Process X\n  const x =\n    200147.07 +\n    308807.95 * lat_aux +\n    3745.25 * Math.pow(lng_aux, 2) +\n    76.63 * Math.pow(lat_aux, 2) -\n    194.56 * Math.pow(lng_aux, 2) * lat_aux +\n    119.79 * Math.pow(lat_aux, 3);\n\n  return x;\n}\n\n// Convert CH y/x to WGS lat\nfunction CHtoWGSlat(y, x) {\n  // Converts military to civil and to unit = 1000km\n  // Axillary values (% Bern)\n  const y_aux = (y - 600000) / 1000000;\n  const x_aux = (x - 200000) / 1000000;\n\n  // Process lat\n  let lat =\n    16.9023892 +\n    3.238272 * x_aux -\n    0.270978 * Math.pow(y_aux, 2) -\n    0.002528 * Math.pow(x_aux, 2) -\n    0.0447 * Math.pow(y_aux, 2) * x_aux -\n    0.014 * Math.pow(x_aux, 3);\n\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\n  lat = (lat * 100) / 36;\n\n  return lat;\n}\n\n// Convert CH y/x to WGS long\nfunction CHtoWGSlng(y, x) {\n  // Converts military to civil and to unit = 1000km\n  // Axillary values (% Bern)\n  const y_aux = (y - 600000) / 1000000;\n  const x_aux = (x - 200000) / 1000000;\n\n  // Process long\n  let lng =\n    2.6779094 +\n    4.728982 * y_aux +\n    0.791484 * y_aux * x_aux +\n    0.1306 * y_aux * Math.pow(x_aux, 2) -\n    0.0436 * Math.pow(y_aux, 3);\n\n  // Unit 10000\" to 1 \" and converts seconds to degrees (dec)\n  lng = (lng * 100) / 36;\n\n  return lng;\n}\n\n// Convert DEC angle to SEX DMS\nfunction DECtoSEX(angle) {\n  // Extract DMS\n  const deg = parseInt(angle, 10);\n  const min = parseInt((angle - deg) * 60, 10);\n  const sec = ((angle - deg) * 60 - min) * 60;\n\n  // Result in degrees sex (dd.mmss)\n  return deg + min / 100 + sec / 10000;\n}\n\n// Convert Degrees angle to seconds\nfunction DEGtoSEC(angle) {\n  // Extract DMS\n  const deg = parseInt(angle, 10);\n  let min = parseInt((angle - deg) * 100, 10);\n  let sec = ((angle - deg) * 100 - min) * 100;\n\n  // Avoid rounding problems with seconds=0\n  const parts = String(angle).split('.');\n  if (parts.length == 2 && parts[1].length == 2) {\n    min = Number(parts[1]);\n    sec = 0;\n  }\n\n  // Result in degrees sex (dd.mmss)\n  return sec + min * 60 + deg * 3600;\n}\n"],"names":["projection","code","extent","units","coordinate","WGStoCHy","WGStoCHx","CHtoWGSlng","CHtoWGSlat","layers","source","url","crossOrigin","attributions","params","serverType","controls","extend","target","view","center","zoom","lat","lng","DECtoSEX","lat_aux","DEGtoSEC","lng_aux","Math","pow","y","x","y_aux","x_aux","angle","deg","parseInt","min","sec","parts","String","split","length","Number"],"sourceRoot":""}