{"version":3,"file":"cog-projection.js","mappings":"iKAYA,MAAMA,EAAM,qCAKZ,QAAS,MACT,SAAc,QAAmBA,IAEjC,MAAMC,EAAY,IAAI,IAAQ,CAC5BC,QAAS,CACP,CACEC,IAAK,8DACLC,OAAQ,MAKdH,EAAUI,gBACR,0DACE,IAAIC,MAAOC,eAGH,IAAI,IAAI,CAClBC,OAAQ,MACRC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,IAAI,CACdC,aAzBN,4LA0BMR,IACE,+DAAiEH,EACnEY,SAAU,IACVC,QAAS,GACTC,YAAa,KAEfC,MAAO,CAACC,SAAU,MAEpB,IAAI,IAAU,CACZN,OAAQT,EACRgB,QAAS,GACTF,MAAO,CAACG,MAAO,OAGnBC,KAAMlB,EACHmB,UACAC,MAAMC,IACL,QAAaA,EAAWC,WAAWC,WAAWH,MAAK,IAAMC,O","sources":["webpack:///./cog-projection.js"],"sourcesContent":["import proj4 from 'proj4';\nimport Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport {\n  epsgLookupMapTiler,\n  fromEPSGCode,\n  register,\n  setEPSGLookup,\n} from '../src/ol/proj/proj4.js';\nimport GeoTIFF from '../src/ol/source/GeoTIFF.js';\nimport XYZ from '../src/ol/source/XYZ.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nregister(proj4);\nsetEPSGLookup(epsgLookupMapTiler(key));\n\nconst cogSource = new GeoTIFF({\n  sources: [\n    {\n      url: 'https://mikenunn.net/data/MiniScale_(std_with_grid)_R23.tif',\n      nodata: 0,\n    },\n  ],\n});\n\ncogSource.setAttributions(\n  'Contains OS data Â© Crown Copyright and database right ' +\n    new Date().getFullYear(),\n);\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new XYZ({\n        attributions: attributions,\n        url:\n          'https://api.maptiler.com/maps/satellite/{z}/{x}/{y}.jpg?key=' + key,\n        tileSize: 512,\n        maxZoom: 20,\n        crossOrigin: '',\n      }),\n      style: {exposure: 0.2},\n    }),\n    new TileLayer({\n      source: cogSource,\n      opacity: 0.7,\n      style: {gamma: 0.7},\n    }),\n  ],\n  view: cogSource\n    .getView()\n    .then((viewConfig) =>\n      fromEPSGCode(viewConfig.projection.getCode()).then(() => viewConfig),\n    ),\n});\n"],"names":["key","cogSource","sources","url","nodata","setAttributions","Date","getFullYear","target","layers","source","attributions","tileSize","maxZoom","crossOrigin","style","exposure","opacity","gamma","view","getView","then","viewConfig","projection","getCode"],"sourceRoot":""}