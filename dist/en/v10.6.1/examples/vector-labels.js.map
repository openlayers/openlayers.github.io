{"version":3,"file":"vector-labels.js","mappings":"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","sources":["webpack:///./vector-labels.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\nimport Text from '../src/ol/style/Text.js';\n\nlet openSansAdded = false;\n\nconst myDom = {\n  points: {\n    text: document.getElementById('points-text'),\n    align: document.getElementById('points-align'),\n    baseline: document.getElementById('points-baseline'),\n    rotation: document.getElementById('points-rotation'),\n    font: document.getElementById('points-font'),\n    weight: document.getElementById('points-weight'),\n    size: document.getElementById('points-size'),\n    height: document.getElementById('points-height'),\n    offsetX: document.getElementById('points-offset-x'),\n    offsetY: document.getElementById('points-offset-y'),\n    color: document.getElementById('points-color'),\n    outline: document.getElementById('points-outline'),\n    outlineWidth: document.getElementById('points-outline-width'),\n    maxreso: document.getElementById('points-maxreso'),\n  },\n  lines: {\n    text: document.getElementById('lines-text'),\n    align: document.getElementById('lines-align'),\n    baseline: document.getElementById('lines-baseline'),\n    rotation: document.getElementById('lines-rotation'),\n    font: document.getElementById('lines-font'),\n    weight: document.getElementById('lines-weight'),\n    placement: document.getElementById('lines-placement'),\n    maxangle: document.getElementById('lines-maxangle'),\n    overflow: document.getElementById('lines-overflow'),\n    size: document.getElementById('lines-size'),\n    height: document.getElementById('lines-height'),\n    offsetX: document.getElementById('lines-offset-x'),\n    offsetY: document.getElementById('lines-offset-y'),\n    color: document.getElementById('lines-color'),\n    outline: document.getElementById('lines-outline'),\n    outlineWidth: document.getElementById('lines-outline-width'),\n    maxreso: document.getElementById('lines-maxreso'),\n  },\n  polygons: {\n    text: document.getElementById('polygons-text'),\n    align: document.getElementById('polygons-align'),\n    baseline: document.getElementById('polygons-baseline'),\n    rotation: document.getElementById('polygons-rotation'),\n    font: document.getElementById('polygons-font'),\n    weight: document.getElementById('polygons-weight'),\n    placement: document.getElementById('polygons-placement'),\n    maxangle: document.getElementById('polygons-maxangle'),\n    overflow: document.getElementById('polygons-overflow'),\n    size: document.getElementById('polygons-size'),\n    height: document.getElementById('polygons-height'),\n    offsetX: document.getElementById('polygons-offset-x'),\n    offsetY: document.getElementById('polygons-offset-y'),\n    color: document.getElementById('polygons-color'),\n    outline: document.getElementById('polygons-outline'),\n    outlineWidth: document.getElementById('polygons-outline-width'),\n    maxreso: document.getElementById('polygons-maxreso'),\n  },\n};\n\nconst getText = function (feature, resolution, dom) {\n  const type = dom.text.value;\n  const maxResolution = dom.maxreso.value;\n  let text = feature.get('name');\n\n  if (resolution > maxResolution) {\n    text = '';\n  } else if (type == 'hide') {\n    text = '';\n  } else if (type == 'shorten') {\n    text = truncate(text, 12);\n  } else if (\n    type == 'wrap' &&\n    (!dom.placement || dom.placement.value != 'line')\n  ) {\n    text = stringDivider(text, 16, '\\n');\n  }\n\n  return text;\n};\n\nconst createTextStyle = function (feature, resolution, dom) {\n  const align = dom.align.value;\n  const baseline = dom.baseline.value;\n  const size = dom.size.value;\n  const height = dom.height.value;\n  const offsetX = parseInt(dom.offsetX.value, 10);\n  const offsetY = parseInt(dom.offsetY.value, 10);\n  const weight = dom.weight.value;\n  const placement = dom.placement ? dom.placement.value : undefined;\n  const maxAngle = dom.maxangle ? parseFloat(dom.maxangle.value) : undefined;\n  const overflow = dom.overflow ? dom.overflow.value == 'true' : undefined;\n  const rotation = parseFloat(dom.rotation.value);\n  if (dom.font.value == \"'Open Sans'\" && !openSansAdded) {\n    const openSans = document.createElement('link');\n    openSans.href = 'https://fonts.googleapis.com/css?family=Open+Sans';\n    openSans.rel = 'stylesheet';\n    document.head.appendChild(openSans);\n    openSansAdded = true;\n  }\n  const font = weight + ' ' + size + '/' + height + ' ' + dom.font.value;\n  const fillColor = dom.color.value;\n  const outlineColor = dom.outline.value;\n  const outlineWidth = parseInt(dom.outlineWidth.value, 10);\n\n  return new Text({\n    textAlign: align == '' ? undefined : align,\n    textBaseline: baseline,\n    font: font,\n    text: getText(feature, resolution, dom),\n    fill: new Fill({color: fillColor}),\n    stroke: new Stroke({color: outlineColor, width: outlineWidth}),\n    offsetX: offsetX,\n    offsetY: offsetY,\n    placement: placement,\n    maxAngle: maxAngle,\n    overflow: overflow,\n    rotation: rotation,\n  });\n};\n\n// Polygons\nfunction polygonStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 1,\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 255, 0.1)',\n    }),\n    text: createTextStyle(feature, resolution, myDom.polygons),\n  });\n}\n\nconst vectorPolygons = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/polygon-samples.geojson',\n    format: new GeoJSON(),\n  }),\n  style: polygonStyleFunction,\n});\n\n// Lines\nfunction lineStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'green',\n      width: 2,\n    }),\n    text: createTextStyle(feature, resolution, myDom.lines),\n  });\n}\n\nconst vectorLines = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/line-samples.geojson',\n    format: new GeoJSON(),\n  }),\n  style: lineStyleFunction,\n});\n\n// Points\nfunction pointStyleFunction(feature, resolution) {\n  return new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: 'rgba(255, 0, 0, 0.1)'}),\n      stroke: new Stroke({color: 'red', width: 1}),\n    }),\n    text: createTextStyle(feature, resolution, myDom.points),\n  });\n}\n\nconst vectorPoints = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/point-samples.geojson',\n    format: new GeoJSON(),\n  }),\n  style: pointStyleFunction,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    vectorPolygons,\n    vectorLines,\n    vectorPoints,\n  ],\n  target: 'map',\n  view: new View({\n    center: [-8161939, 6095025],\n    zoom: 8,\n  }),\n});\n\ndocument\n  .getElementById('refresh-points')\n  .addEventListener('click', function () {\n    vectorPoints.setStyle(pointStyleFunction);\n  });\n\ndocument.getElementById('refresh-lines').addEventListener('click', function () {\n  vectorLines.setStyle(lineStyleFunction);\n});\n\ndocument\n  .getElementById('refresh-polygons')\n  .addEventListener('click', function () {\n    vectorPolygons.setStyle(polygonStyleFunction);\n  });\n\n/**\n * @param {string} string String\n * @param {number} n The max number of characters to keep.\n * @return {string} Truncated string.\n */\nfunction truncate(string, n) {\n  return string.length > n ? string.slice(0, n - 1) + '…' : string.slice();\n}\n\n// https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\nfunction stringDivider(str, width, spaceReplacer) {\n  if (str.length > width) {\n    let p = width;\n    while (p > 0 && str[p] != ' ' && str[p] != '-') {\n      p--;\n    }\n    if (p > 0) {\n      let left;\n      if (str.substring(p, p + 1) == '-') {\n        left = str.substring(0, p + 1);\n      } else {\n        left = str.substring(0, p);\n      }\n      const right = str.substring(p + 1);\n      return left + spaceReplacer + stringDivider(right, width, spaceReplacer);\n    }\n  }\n  return str;\n}\n"],"names":["openSansAdded","myDom","points","text","document","getElementById","align","baseline","rotation","font","weight","size","height","offsetX","offsetY","color","outline","outlineWidth","maxreso","lines","placement","maxangle","overflow","polygons","getText","feature","resolution","dom","type","value","maxResolution","get","string","n","length","slice","stringDivider","createTextStyle","parseInt","undefined","maxAngle","parseFloat","openSans","createElement","href","rel","head","appendChild","fillColor","outlineColor","textAlign","textBaseline","fill","stroke","width","polygonStyleFunction","vectorPolygons","source","url","format","style","lineStyleFunction","vectorLines","pointStyleFunction","image","radius","vectorPoints","layers","target","view","center","zoom","str","spaceReplacer","p","left","substring","addEventListener","setStyle"],"sourceRoot":""}