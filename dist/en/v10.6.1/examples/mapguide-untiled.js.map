{"version":3,"file":"mapguide-untiled.js","mappings":"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","sources":["webpack:///../src/ol/source/mapguide.js","webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"sourcesContent":["/**\n * @module ol/source/mapguide\n */\n\nimport {decode} from '../Image.js';\nimport {getCenter, getHeight, getWidth} from '../extent.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  }\n  return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n}\n\n/**\n * @param {string} baseUrl The mapagent url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {boolean} useOverlay If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} displayDpi The display resolution.\n * @return {string} The mapagent map image request URL.\n */\nfunction getUrl(\n  baseUrl,\n  params,\n  extent,\n  size,\n  useOverlay,\n  metersPerUnit,\n  displayDpi,\n) {\n  const scale = getScale(extent, size, metersPerUnit, displayDpi);\n  const center = getCenter(extent);\n  const baseParams = {\n    'OPERATION': useOverlay ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n    'VERSION': '2.0.0',\n    'LOCALE': 'en',\n    'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n    'CLIP': '1',\n    'SETDISPLAYDPI': displayDpi,\n    'SETDISPLAYWIDTH': Math.round(size[0]),\n    'SETDISPLAYHEIGHT': Math.round(size[1]),\n    'SETVIEWSCALE': scale,\n    'SETVIEWCENTERX': center[0],\n    'SETVIEWCENTERY': center[1],\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapGuide images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const useOverlay = options.useOverlay ?? false;\n  const metersPerUnit = options.metersPerUnit || 1;\n  const displayDpi = options.displayDpi || 96;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(\n      options.url,\n      options.params,\n      extent,\n      size,\n      useOverlay,\n      metersPerUnit,\n      displayDpi,\n    );\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n","/**\n * @module ol/source/ImageMapGuide\n */\n\nimport {decode} from '../Image.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './mapguide.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        hidpi: this.hidpi_,\n        metersPerUnit: this.metersPerUnit_,\n        url: this.url_,\n        useOverlay: this.useOverlay_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Set the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  setParams(params) {\n    this.params_ = Object.assign({}, params);\n    this.changed();\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageMapGuide;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\n\nconst mdf = 'Library://Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl = 'https://mikenunn.net/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922, 43.665065564837931, -87.595394059497067,\n  43.823852564430069,\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          VERSION: '3.0.0',\n          USERNAME: 'OLGuest',\n          PASSWORD: 'olguest',\n        },\n        ratio: 2,\n      }),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12,\n  }),\n});\n"],"names":["getUrl","baseUrl","params","extent","size","useOverlay","metersPerUnit","displayDpi","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","baseParams","Math","round","Object","assign","ImageMapGuide","constructor","options","super","interpolate","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","displayDpi_","params_","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","ratio_","ratio","useOverlay_","renderedRevision_","loaderProjection_","getParams","getImageInternal","resolution","pixelRatio","loader","load","image","Image","width","height","src","then","createLoader","setImage","getImageLoadFunction","setParams","changed","updateParams","setImageLoadFunction","Map","layers","source","MAPDEFINITION","FORMAT","VERSION","USERNAME","PASSWORD","target","view","View","zoom"],"sourceRoot":""}