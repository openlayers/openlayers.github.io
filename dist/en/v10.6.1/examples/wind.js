(self.webpackChunk=self.webpackChunk||[]).push([[3829],{44276:function(e){e.exports=function(e,r,n){return e*(1-n)+r*n}},96317:function(e,r,n){"use strict";var i=n(97958),t=n(41564),o=n(87240),a=n(49208),d=n(95907),g=n(48729),s=n(91108),x=n(77691),l=n(77163),b=n(77801),c=n(4666),h=n(29079);const u={TEXTURE:"u_texture",VELOCITY_TEXTURE:"u_velocityTexture",POSITION_TEXTURE:"u_positionTexture",PARTICLE_COUNT_SQRT:"u_particleCountSqrt",MAX_SPEED:"u_maxSpeed",GAIN:"u_gain",OFFSET:"u_offset",IS_FLOAT:"u_isFloat",RANDOM_SEED:"u_randomSeed",SPEED_FACTOR:"u_speedFactor",DROP_RATE:"u_dropRate",DROP_RATE_BUMP:"u_dropRateBump",OPACITY:"u_opacity",ROTATION:b.M8.ROTATION,VIEWPORT_SIZE_PX:b.M8.VIEWPORT_SIZE_PX},_="a_position",p="a_index",T="v_position";class f extends h.Ay{constructor(e,r){super(e,{vertexShader:r.tileVertexShader,fragmentShader:r.tileFragmentShader,cacheSize:r.cacheSize,postProcesses:[{}],uniforms:{[u.MAX_SPEED]:r.maxSpeed}}),this.particleColorFragmentShader_=r.particleColorFragmentShader,this.velocityTexture_=null,this.particleCountSqrt_=r.particles?Math.ceil(Math.sqrt(r.particles)):256,this.particleIndexBuffer_,this.quadBuffer_,this.particlePositionProgram_,this.particlePositionVertexShader_=r.particlePositionVertexShader,this.particlePositionFragmentShader_=r.particlePositionFragmentShader,this.previousPositionTexture_,this.nextPositionTexture_,this.particleColorProgram_,this.particleColorVertexShader_=r.particleColorVertexShader,this.particleColorFragmentShader_=r.particleColorFragmentShader,this.textureProgram_,this.textureVertexShader_=r.textureVertexShader,this.textureFragmentShader_=r.textureFragmentShader,this.previousTrailsTexture_,this.nextTrailsTexture_,this.fadeOpacity_=.996,this.maxSpeed_=r.maxSpeed,this.speedFactor_=r.speedFactor||.001,this.dropRate_=.003,this.dropRateBump_=.01,this.tempVec2_=[0,0],this.renderedWidth_=0,this.renderedHeight_=0}afterHelperCreated(){super.afterHelperCreated();const e=this.helper,r=e.getGL();this.framebuffer_=r.createFramebuffer();const n=this.particleCountSqrt_*this.particleCountSqrt_,i=new Float32Array(n);for(let e=0;e<n;++e)i[e]=e;const t=new l.Ay(c.H7,c.Ek);t.setArray(i),e.flushBufferData(t),this.particleIndexBuffer_=t;const o=new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),a=new l.Ay(c.H7,c.Ek);a.setArray(o),e.flushBufferData(a),this.quadBuffer_=a;const d=new Uint8Array(4*n);for(let e=0;e<d.length;++e)d[e]=Math.floor(256*Math.random());this.previousPositionTexture_=e.createTexture([this.particleCountSqrt_,this.particleCountSqrt_],d,null,!0),this.nextPositionTexture_=e.createTexture([this.particleCountSqrt_,this.particleCountSqrt_],d,null,!0),this.particlePositionProgram_=e.getProgram(this.particlePositionFragmentShader_,this.particlePositionVertexShader_),this.particleColorProgram_=e.getProgram(this.particleColorFragmentShader_,this.particleColorVertexShader_),this.textureProgram_=e.getProgram(this.textureFragmentShader_,this.textureVertexShader_)}createSizeDependentTextures_(){const e=this.helper,r=e.getGL(),n=e.getCanvas(),i=n.width,t=n.height,o=new Uint8Array(i*t*4);this.nextTrailsTexture_&&r.deleteTexture(this.nextTrailsTexture_),this.nextTrailsTexture_=e.createTexture([i,t],o,null,!0),this.previousTrailsTexture_&&r.deleteTexture(this.previousTrailsTexture_),this.previousTrailsTexture_=e.createTexture([i,t],o,null,!0)}beforeFinalize(e){const r=this.helper,n=r.getGL(),i=r.getCanvas(),t=i.width,o=i.height;this.renderedWidth_==t&&this.renderedHeight_==o||this.createSizeDependentTextures_();const a=[t,o];this.velocityTexture_=r.createTexture(a,null,this.velocityTexture_),n.copyTexImage2D(n.TEXTURE_2D,0,n.RGBA,0,0,t,o,0),this.drawParticleTrails_(e),this.updateParticlePositions_(e),e.animate=!0,this.renderedWidth_=t,this.renderedHeight_=o}drawParticleTrails_(e){const r=this.helper,n=r.getGL();r.bindFrameBuffer(this.framebuffer_,this.nextTrailsTexture_),this.drawTexture_(this.previousTrailsTexture_,this.fadeOpacity_),this.drawParticleColor_(e),r.bindInitialFrameBuffer(),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),this.drawTexture_(this.nextTrailsTexture_,1),n.disable(n.BLEND);const i=this.nextTrailsTexture_;this.nextTrailsTexture_=this.previousTrailsTexture_,this.previousTrailsTexture_=i}drawTexture_(e,r){const n=this.helper,i=n.getGL();n.useProgram(this.textureProgram_),n.bindTexture(e,0,u.TEXTURE),n.bindAttribute(this.quadBuffer_,_,2),this.helper.setUniformFloatValue(u.OPACITY,r),i.drawArrays(i.TRIANGLES,0,6)}drawParticleColor_(e){const r=this.helper,n=r.getGL();r.useProgram(this.particleColorProgram_);const i=this.particleCountSqrt_*this.particleCountSqrt_;r.bindAttribute(this.particleIndexBuffer_,p,1),r.bindTexture(this.previousPositionTexture_,0,u.POSITION_TEXTURE),r.bindTexture(this.velocityTexture_,1,u.VELOCITY_TEXTURE),this.helper.setUniformFloatValue(u.PARTICLE_COUNT_SQRT,this.particleCountSqrt_);const t=this.tempVec2_;t[0]=Math.cos(-e.viewState.rotation),t[1]=Math.sin(-e.viewState.rotation),this.helper.setUniformFloatVec2(u.ROTATION,t),this.helper.setUniformFloatValue(u.MAX_SPEED,this.maxSpeed_),n.drawArrays(n.POINTS,0,i)}updateParticlePositions_(e){const r=this.helper,n=r.getGL();r.useProgram(this.particlePositionProgram_),n.viewport(0,0,this.particleCountSqrt_,this.particleCountSqrt_),r.bindFrameBuffer(this.framebuffer_,this.nextPositionTexture_),r.bindTexture(this.previousPositionTexture_,0,u.POSITION_TEXTURE),r.bindTexture(this.velocityTexture_,1,u.VELOCITY_TEXTURE),r.bindAttribute(this.quadBuffer_,_,2),r.setUniformFloatValue(u.RANDOM_SEED,Math.random()),r.setUniformFloatValue(u.SPEED_FACTOR,this.speedFactor_),r.setUniformFloatValue(u.DROP_RATE,this.dropRate_),r.setUniformFloatValue(u.DROP_RATE_BUMP,this.dropRateBump_);const i=this.tempVec2_;i[0]=Math.cos(-e.viewState.rotation),i[1]=Math.sin(-e.viewState.rotation),this.helper.setUniformFloatVec2(u.ROTATION,i);const t=e.size;this.helper.setUniformFloatVec2(u.VIEWPORT_SIZE_PX,[t[0],t[1]]),n.drawArrays(n.TRIANGLES,0,6);const o=this.nextPositionTexture_;this.nextPositionTexture_=this.previousPositionTexture_,this.previousPositionTexture_=o}}var E=f,m=n(880),v=n(99516);const R=`\n  attribute vec2 ${h.eS.TEXTURE_COORD};\n  uniform mat4 ${h.gF.TILE_TRANSFORM};\n  uniform float ${h.gF.TEXTURE_PIXEL_WIDTH};\n  uniform float ${h.gF.TEXTURE_PIXEL_HEIGHT};\n  uniform float ${h.gF.TEXTURE_RESOLUTION};\n  uniform float ${h.gF.TEXTURE_ORIGIN_X};\n  uniform float ${h.gF.TEXTURE_ORIGIN_Y};\n  uniform float ${h.gF.DEPTH};\n\n  varying vec2 v_textureCoord;\n  varying vec2 v_mapCoord;\n\n  void main() {\n    v_textureCoord = ${h.eS.TEXTURE_COORD};\n    v_mapCoord = vec2(\n      ${h.gF.TEXTURE_ORIGIN_X} + ${h.gF.TEXTURE_RESOLUTION} * ${h.gF.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n      ${h.gF.TEXTURE_ORIGIN_Y} - ${h.gF.TEXTURE_RESOLUTION} * ${h.gF.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n    );\n    gl_Position = ${h.gF.TILE_TRANSFORM} * vec4(${h.eS.TEXTURE_COORD}, ${h.gF.DEPTH}, 1.0);\n  }\n`,S=`\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n\n  uniform vec4 ${h.gF.RENDER_EXTENT};\n  uniform float ${u.MAX_SPEED};\n  uniform sampler2D ${h.gF.TILE_TEXTURE_ARRAY}[1];\n\n  varying vec2 v_textureCoord;\n  varying vec2 v_mapCoord;\n\n  void main() {\n    if (\n      v_mapCoord[0] < ${h.gF.RENDER_EXTENT}[0] ||\n      v_mapCoord[1] < ${h.gF.RENDER_EXTENT}[1] ||\n      v_mapCoord[0] > ${h.gF.RENDER_EXTENT}[2] ||\n      v_mapCoord[1] > ${h.gF.RENDER_EXTENT}[3]\n    ) {\n      discard;\n    }\n\n    vec4 velocity = texture2D(${h.gF.TILE_TEXTURE_ARRAY}[0],  v_textureCoord);\n    gl_FragColor = vec4((velocity.xy + ${u.MAX_SPEED}) / (2.0 * ${u.MAX_SPEED}), 0, 1);\n  }\n`,P=`\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n\n  attribute vec2 ${_};\n\n  varying vec2 ${T};\n\n  void main() {\n    ${T} = ${_};\n    gl_Position = vec4(1.0 - 2.0 * ${_}, 0, 1);\n  }\n`,O=`\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n\n  uniform sampler2D ${u.TEXTURE};\n  uniform float ${u.OPACITY};\n\n  varying vec2 ${T};\n\n  void main() {\n    vec4 color = texture2D(${u.TEXTURE}, 1.0 - ${T});\n    gl_FragColor = vec4(floor(255.0 * color * ${u.OPACITY}) / 255.0);\n  }\n`,C=`\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n\n  uniform sampler2D ${u.POSITION_TEXTURE};\n  uniform sampler2D ${u.VELOCITY_TEXTURE};\n  uniform float ${u.RANDOM_SEED};\n  uniform float ${u.SPEED_FACTOR};\n  uniform float ${u.DROP_RATE};\n  uniform float ${u.DROP_RATE_BUMP};\n  uniform vec2 ${u.ROTATION};\n  uniform vec2 ${u.VIEWPORT_SIZE_PX};\n\n  varying vec2 ${T};\n\n  // pseudo-random generator\n  const vec3 randConstants = vec3(12.9898, 78.233, 4375.85453);\n\n  float rand(const vec2 co) {\n    float t = dot(randConstants.xy, co);\n    return fract(sin(t) * (randConstants.z + t));\n  }\n\n  void main() {\n    vec4 positionColor = texture2D(${u.POSITION_TEXTURE}, ${T});\n\n    // decode particle position from pixel RGBA\n    vec2 particlePosition = vec2(\n      positionColor.r / 255.0 + positionColor.b,\n      positionColor.g / 255.0 + positionColor.a\n    );\n\n    vec4 velocityColor = texture2D(${u.VELOCITY_TEXTURE}, particlePosition);\n    if (velocityColor.a == 0.0) {\n      discard;\n    }\n\n    float vx = 2.0 * velocityColor.r - 1.0;\n    float vy = 2.0 * velocityColor.g - 1.0;\n\n    // normalized veloicty (magnitude 0 - 1)\n    vec2 velocity = vec2(\n      vx * ${u.ROTATION}.x - vy * ${u.ROTATION}.y,\n      vx * ${u.ROTATION}.y + vy * ${u.ROTATION}.x\n    );\n\n    // account for aspect ratio (square particle position texture, non-square map)\n    float aspectRatio = ${u.VIEWPORT_SIZE_PX}.x / ${u.VIEWPORT_SIZE_PX}.y;\n    vec2 offset = vec2(velocity.x / aspectRatio, velocity.y) * ${u.SPEED_FACTOR};\n\n    // update particle position, wrapping around the edge\n    particlePosition = fract(1.0 + particlePosition + offset);\n\n    // a random seed to use for the particle drop\n    vec2 seed = (particlePosition + ${T}) * ${u.RANDOM_SEED};\n\n    // drop rate is a chance a particle will restart at random position, to avoid degeneration\n    float dropRate = ${u.DROP_RATE} + length(velocity) * ${u.DROP_RATE_BUMP};\n    float drop = step(1.0 - dropRate, rand(seed));\n\n    vec2 randomPosition = vec2(rand(seed + 1.3), rand(seed + 2.1));\n    particlePosition = mix(particlePosition, randomPosition, drop);\n\n    // encode the new particle position back into RGBA\n    gl_FragColor = vec4(\n      fract(particlePosition * 255.0),\n      floor(particlePosition * 255.0) / 255.0\n    );\n  }\n`,I=`\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n\n  attribute float ${p};\n\n  uniform sampler2D ${u.POSITION_TEXTURE};\n  uniform float ${u.PARTICLE_COUNT_SQRT};\n\n  varying vec2 ${T};\n\n  void main() {\n    vec4 color = texture2D(\n      ${u.POSITION_TEXTURE},\n      vec2(\n        fract(${p} / ${u.PARTICLE_COUNT_SQRT}),\n        floor(${p} / ${u.PARTICLE_COUNT_SQRT}) / ${u.PARTICLE_COUNT_SQRT}\n      )\n    );\n\n    ${T} = vec2(\n      color.r / 255.0 + color.b,\n      color.g / 255.0 + color.a\n    );\n\n    gl_PointSize = 1.0;\n    gl_Position = vec4(\n      2.0 * ${T}.x - 1.0,\n      2.0 * ${T}.y - 1.0,\n      0,\n      1\n    );\n  }\n`;const y=[];class A extends m.A{constructor(e){const r=Object.assign({},e);if(delete r.maxSpeed,delete r.speedFactor,delete r.particles,super(r),this.style_=e.style||{},!(e.maxSpeed>0))throw new Error("maxSpeed is required");this.maxSpeed_=e.maxSpeed,this.speedFactor_=e.speedFactor,this.particles_=e.particles,this.styleVariables_=this.style_.variables||{},this.addChangeListener(v.A.SOURCE,this.handleSourceUpdate_)}handleSourceUpdate_(){this.hasRenderer()&&this.getRenderer().clearCache()}updateStyleVariables(e){Object.assign(this.styleVariables_,e),this.changed()}getSources(e,r){const n=this.getSource();return y[0]=n,y}createRenderer(){const e=function(e){const r=(0,s.z0)(),n=[];if(void 0!==e.color){const i=(0,x.s2)(r,e.color,g.mE);n.push(`color = ${i};`)}const i=Object.keys(r.variables);if(i.length>1&&!e.variables)throw new Error(`Missing variables in style (expected ${r.variables})`);const t={};for(const r of i){if(!(r in e.variables))throw new Error(`Missing '${r}' in style variables`);t[(0,s.Sl)(r)]=function(){let n=e.variables[r];return"string"==typeof n&&(n=(0,s.Lm)(n)),void 0!==n?n:-9999999}}const o=Object.keys(t).map((function(e){return`uniform float ${e};`})),a=Object.keys(r.functions).map((function(e){return r.functions[e]})),d=`\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    uniform sampler2D ${u.VELOCITY_TEXTURE};\n    uniform float ${u.MAX_SPEED};\n    uniform vec2 ${u.ROTATION};\n\n    ${o.join("\n")}\n\n    varying vec2 ${T};\n    \n    ${a.join("\n")}\n\n    void main() {\n      vec4 velocityColor = texture2D(${u.VELOCITY_TEXTURE}, ${T});\n\n      float vx = mix(-${u.MAX_SPEED}, ${u.MAX_SPEED}, velocityColor.r);\n      float vy = mix(-${u.MAX_SPEED}, ${u.MAX_SPEED}, velocityColor.g);\n\n      vec2 velocity = vec2(\n        vx * ${u.ROTATION}.x - vy * ${u.ROTATION}.y,\n        vx * ${u.ROTATION}.y + vy * ${u.ROTATION}.x\n      );\n\n      float a_prop_speed = length(velocity);\n\n      vec4 color;\n\n      ${n.join("\n")}\n\n      if (color.a == 0.0) {\n        discard;\n      }\n\n      gl_FragColor = color;\n    }\n  `;return{tileVertexShader:R,tileFragmentShader:S,particleColorVertexShader:I,particleColorFragmentShader:d,particlePositionVertexShader:P,particlePositionFragmentShader:C,textureVertexShader:P,textureFragmentShader:O}}(this.style_);return new E(this,{...e,cacheSize:this.getCacheSize(),maxSpeed:this.maxSpeed_,speedFactor:this.speedFactor_,particles:this.particles_})}}A.prototype.dispose;var $=A,F=n(43003),N=n(25231),U=n(77779),w=n(29810),D=n(10135);const X=new Promise(((e,r)=>{const n=new Image;n.onload=()=>{const r=document.createElement("canvas"),i=n.width,t=n.height;r.width=i,r.height=t;const o=r.getContext("2d");o.drawImage(n,0,0);const a=o.getImageData(0,0,i,t).data;e({data:a,width:i,height:t})},n.onerror=()=>{r(new Error("failed to load"))},n.src="./data/wind.png"}));function M(e,r,n,i,t,o){return n.map(((a,d)=>function(e,r,n,i,t,o){return(1-e)*(1-r)*n+e*(1-r)*i+(1-e)*r*t+e*r*o}(e,r,n[d],i[d],t[d],o[d])))}const L=(0,D.EN)(),V=256,G=(0,N.Jt)("EPSG:4326"),H=(0,N.Jt)("EPSG:3857"),B=-21.32,q=26.8-B,Y=-21.57,z=new U.A({transition:0,wrapX:!0,async loader(e,r,n){const{data:i,width:t,height:o}=await X,a=(0,D.Li)(L,[e,r,n],H),d=L.getTileCoordExtent(a),g=L.getResolution(e),s=new Float32Array(196608);for(let e=0;e<V;++e){let r=e*V*3;const n=d[3]-e*g;for(let e=0;e<V;++e){const a=d[0]+e*g,[x,l]=(0,N.pd)([a,n],H,G),b=t*(x+180)/360;let c=Math.floor(b),h=Math.ceil(b);const u=b-c;c<0&&(c+=t),h>=t&&(h-=t);const _=o*(90-l)/180;let p=Math.floor(_),T=Math.ceil(_);const f=_-p;p<0&&(p=0),T>=o&&(T=o-1);const E=M(u,f,...[[c,p],[h,p],[c,T],[h,T]].map((([e,r])=>{const n=4*(360*r+e);return[i[n],i[n+1]]}))),m=B+q*E[0]/255,v=Y+42.99*E[1]/255;s[r]=m,s[r+1]=v,r+=3}}return s}}),j=i({colormap:"viridis",nshades:10,alpha:.75,format:"rgba"}),k=[];for(let e=0;e<j.length;++e)k.push(20*e/(j.length-1)),k.push(j[e]);new t.A({target:"map",pixelRatio:Math.min(d.cr,2),layers:[new F.A({source:new w.A({url:"https://openlayers.org/data/vector/ocean.json",format:new a.A}),style:{"fill-color":"#555555"}}),new $({source:z,maxSpeed:20,style:{color:["interpolate",["linear"],["get","speed"],...k]}})],view:new o.Ay({center:[0,0],zoom:0})})},97371:function(e){e.exports={jet:[{index:0,rgb:[0,0,131]},{index:.125,rgb:[0,60,170]},{index:.375,rgb:[5,255,255]},{index:.625,rgb:[255,255,0]},{index:.875,rgb:[250,0,0]},{index:1,rgb:[128,0,0]}],hsv:[{index:0,rgb:[255,0,0]},{index:.169,rgb:[253,255,2]},{index:.173,rgb:[247,255,2]},{index:.337,rgb:[0,252,4]},{index:.341,rgb:[0,252,10]},{index:.506,rgb:[1,249,255]},{index:.671,rgb:[2,0,253]},{index:.675,rgb:[8,0,253]},{index:.839,rgb:[255,0,251]},{index:.843,rgb:[255,0,245]},{index:1,rgb:[255,0,6]}],hot:[{index:0,rgb:[0,0,0]},{index:.3,rgb:[230,0,0]},{index:.6,rgb:[255,210,0]},{index:1,rgb:[255,255,255]}],spring:[{index:0,rgb:[255,0,255]},{index:1,rgb:[255,255,0]}],summer:[{index:0,rgb:[0,128,102]},{index:1,rgb:[255,255,102]}],autumn:[{index:0,rgb:[255,0,0]},{index:1,rgb:[255,255,0]}],winter:[{index:0,rgb:[0,0,255]},{index:1,rgb:[0,255,128]}],bone:[{index:0,rgb:[0,0,0]},{index:.376,rgb:[84,84,116]},{index:.753,rgb:[169,200,200]},{index:1,rgb:[255,255,255]}],copper:[{index:0,rgb:[0,0,0]},{index:.804,rgb:[255,160,102]},{index:1,rgb:[255,199,127]}],greys:[{index:0,rgb:[0,0,0]},{index:1,rgb:[255,255,255]}],yignbu:[{index:0,rgb:[8,29,88]},{index:.125,rgb:[37,52,148]},{index:.25,rgb:[34,94,168]},{index:.375,rgb:[29,145,192]},{index:.5,rgb:[65,182,196]},{index:.625,rgb:[127,205,187]},{index:.75,rgb:[199,233,180]},{index:.875,rgb:[237,248,217]},{index:1,rgb:[255,255,217]}],greens:[{index:0,rgb:[0,68,27]},{index:.125,rgb:[0,109,44]},{index:.25,rgb:[35,139,69]},{index:.375,rgb:[65,171,93]},{index:.5,rgb:[116,196,118]},{index:.625,rgb:[161,217,155]},{index:.75,rgb:[199,233,192]},{index:.875,rgb:[229,245,224]},{index:1,rgb:[247,252,245]}],yiorrd:[{index:0,rgb:[128,0,38]},{index:.125,rgb:[189,0,38]},{index:.25,rgb:[227,26,28]},{index:.375,rgb:[252,78,42]},{index:.5,rgb:[253,141,60]},{index:.625,rgb:[254,178,76]},{index:.75,rgb:[254,217,118]},{index:.875,rgb:[255,237,160]},{index:1,rgb:[255,255,204]}],bluered:[{index:0,rgb:[0,0,255]},{index:1,rgb:[255,0,0]}],rdbu:[{index:0,rgb:[5,10,172]},{index:.35,rgb:[106,137,247]},{index:.5,rgb:[190,190,190]},{index:.6,rgb:[220,170,132]},{index:.7,rgb:[230,145,90]},{index:1,rgb:[178,10,28]}],picnic:[{index:0,rgb:[0,0,255]},{index:.1,rgb:[51,153,255]},{index:.2,rgb:[102,204,255]},{index:.3,rgb:[153,204,255]},{index:.4,rgb:[204,204,255]},{index:.5,rgb:[255,255,255]},{index:.6,rgb:[255,204,255]},{index:.7,rgb:[255,153,255]},{index:.8,rgb:[255,102,204]},{index:.9,rgb:[255,102,102]},{index:1,rgb:[255,0,0]}],rainbow:[{index:0,rgb:[150,0,90]},{index:.125,rgb:[0,0,200]},{index:.25,rgb:[0,25,255]},{index:.375,rgb:[0,152,255]},{index:.5,rgb:[44,255,150]},{index:.625,rgb:[151,255,0]},{index:.75,rgb:[255,234,0]},{index:.875,rgb:[255,111,0]},{index:1,rgb:[255,0,0]}],portland:[{index:0,rgb:[12,51,131]},{index:.25,rgb:[10,136,186]},{index:.5,rgb:[242,211,56]},{index:.75,rgb:[242,143,56]},{index:1,rgb:[217,30,30]}],blackbody:[{index:0,rgb:[0,0,0]},{index:.2,rgb:[230,0,0]},{index:.4,rgb:[230,210,0]},{index:.7,rgb:[255,255,255]},{index:1,rgb:[160,200,255]}],earth:[{index:0,rgb:[0,0,130]},{index:.1,rgb:[0,180,180]},{index:.2,rgb:[40,210,40]},{index:.4,rgb:[230,230,50]},{index:.6,rgb:[120,70,20]},{index:1,rgb:[255,255,255]}],electric:[{index:0,rgb:[0,0,0]},{index:.15,rgb:[30,0,100]},{index:.4,rgb:[120,0,100]},{index:.6,rgb:[160,90,0]},{index:.8,rgb:[230,200,0]},{index:1,rgb:[255,250,220]}],alpha:[{index:0,rgb:[255,255,255,0]},{index:1,rgb:[255,255,255,1]}],viridis:[{index:0,rgb:[68,1,84]},{index:.13,rgb:[71,44,122]},{index:.25,rgb:[59,81,139]},{index:.38,rgb:[44,113,142]},{index:.5,rgb:[33,144,141]},{index:.63,rgb:[39,173,129]},{index:.75,rgb:[92,200,99]},{index:.88,rgb:[170,220,50]},{index:1,rgb:[253,231,37]}],inferno:[{index:0,rgb:[0,0,4]},{index:.13,rgb:[31,12,72]},{index:.25,rgb:[85,15,109]},{index:.38,rgb:[136,34,106]},{index:.5,rgb:[186,54,85]},{index:.63,rgb:[227,89,51]},{index:.75,rgb:[249,140,10]},{index:.88,rgb:[249,201,50]},{index:1,rgb:[252,255,164]}],magma:[{index:0,rgb:[0,0,4]},{index:.13,rgb:[28,16,68]},{index:.25,rgb:[79,18,123]},{index:.38,rgb:[129,37,129]},{index:.5,rgb:[181,54,122]},{index:.63,rgb:[229,80,100]},{index:.75,rgb:[251,135,97]},{index:.88,rgb:[254,194,135]},{index:1,rgb:[252,253,191]}],plasma:[{index:0,rgb:[13,8,135]},{index:.13,rgb:[75,3,161]},{index:.25,rgb:[125,3,168]},{index:.38,rgb:[168,34,150]},{index:.5,rgb:[203,70,121]},{index:.63,rgb:[229,107,93]},{index:.75,rgb:[248,148,65]},{index:.88,rgb:[253,195,40]},{index:1,rgb:[240,249,33]}],warm:[{index:0,rgb:[125,0,179]},{index:.13,rgb:[172,0,187]},{index:.25,rgb:[219,0,170]},{index:.38,rgb:[255,0,130]},{index:.5,rgb:[255,63,74]},{index:.63,rgb:[255,123,0]},{index:.75,rgb:[234,176,0]},{index:.88,rgb:[190,228,0]},{index:1,rgb:[147,255,0]}],cool:[{index:0,rgb:[125,0,179]},{index:.13,rgb:[116,0,218]},{index:.25,rgb:[98,74,237]},{index:.38,rgb:[68,146,231]},{index:.5,rgb:[0,204,197]},{index:.63,rgb:[0,247,146]},{index:.75,rgb:[0,255,88]},{index:.88,rgb:[40,255,8]},{index:1,rgb:[147,255,0]}],"rainbow-soft":[{index:0,rgb:[125,0,179]},{index:.1,rgb:[199,0,180]},{index:.2,rgb:[255,0,121]},{index:.3,rgb:[255,108,0]},{index:.4,rgb:[222,194,0]},{index:.5,rgb:[150,255,0]},{index:.6,rgb:[0,255,55]},{index:.7,rgb:[0,246,150]},{index:.8,rgb:[50,167,222]},{index:.9,rgb:[103,51,235]},{index:1,rgb:[124,0,186]}],bathymetry:[{index:0,rgb:[40,26,44]},{index:.13,rgb:[59,49,90]},{index:.25,rgb:[64,76,139]},{index:.38,rgb:[63,110,151]},{index:.5,rgb:[72,142,158]},{index:.63,rgb:[85,174,163]},{index:.75,rgb:[120,206,163]},{index:.88,rgb:[187,230,172]},{index:1,rgb:[253,254,204]}],cdom:[{index:0,rgb:[47,15,62]},{index:.13,rgb:[87,23,86]},{index:.25,rgb:[130,28,99]},{index:.38,rgb:[171,41,96]},{index:.5,rgb:[206,67,86]},{index:.63,rgb:[230,106,84]},{index:.75,rgb:[242,149,103]},{index:.88,rgb:[249,193,135]},{index:1,rgb:[254,237,176]}],chlorophyll:[{index:0,rgb:[18,36,20]},{index:.13,rgb:[25,63,41]},{index:.25,rgb:[24,91,59]},{index:.38,rgb:[13,119,72]},{index:.5,rgb:[18,148,80]},{index:.63,rgb:[80,173,89]},{index:.75,rgb:[132,196,122]},{index:.88,rgb:[175,221,162]},{index:1,rgb:[215,249,208]}],density:[{index:0,rgb:[54,14,36]},{index:.13,rgb:[89,23,80]},{index:.25,rgb:[110,45,132]},{index:.38,rgb:[120,77,178]},{index:.5,rgb:[120,113,213]},{index:.63,rgb:[115,151,228]},{index:.75,rgb:[134,185,227]},{index:.88,rgb:[177,214,227]},{index:1,rgb:[230,241,241]}],"freesurface-blue":[{index:0,rgb:[30,4,110]},{index:.13,rgb:[47,14,176]},{index:.25,rgb:[41,45,236]},{index:.38,rgb:[25,99,212]},{index:.5,rgb:[68,131,200]},{index:.63,rgb:[114,156,197]},{index:.75,rgb:[157,181,203]},{index:.88,rgb:[200,208,216]},{index:1,rgb:[241,237,236]}],"freesurface-red":[{index:0,rgb:[60,9,18]},{index:.13,rgb:[100,17,27]},{index:.25,rgb:[142,20,29]},{index:.38,rgb:[177,43,27]},{index:.5,rgb:[192,87,63]},{index:.63,rgb:[205,125,105]},{index:.75,rgb:[216,162,148]},{index:.88,rgb:[227,199,193]},{index:1,rgb:[241,237,236]}],oxygen:[{index:0,rgb:[64,5,5]},{index:.13,rgb:[106,6,15]},{index:.25,rgb:[144,26,7]},{index:.38,rgb:[168,64,3]},{index:.5,rgb:[188,100,4]},{index:.63,rgb:[206,136,11]},{index:.75,rgb:[220,174,25]},{index:.88,rgb:[231,215,44]},{index:1,rgb:[248,254,105]}],par:[{index:0,rgb:[51,20,24]},{index:.13,rgb:[90,32,35]},{index:.25,rgb:[129,44,34]},{index:.38,rgb:[159,68,25]},{index:.5,rgb:[182,99,19]},{index:.63,rgb:[199,134,22]},{index:.75,rgb:[212,171,35]},{index:.88,rgb:[221,210,54]},{index:1,rgb:[225,253,75]}],phase:[{index:0,rgb:[145,105,18]},{index:.13,rgb:[184,71,38]},{index:.25,rgb:[186,58,115]},{index:.38,rgb:[160,71,185]},{index:.5,rgb:[110,97,218]},{index:.63,rgb:[50,123,164]},{index:.75,rgb:[31,131,110]},{index:.88,rgb:[77,129,34]},{index:1,rgb:[145,105,18]}],salinity:[{index:0,rgb:[42,24,108]},{index:.13,rgb:[33,50,162]},{index:.25,rgb:[15,90,145]},{index:.38,rgb:[40,118,137]},{index:.5,rgb:[59,146,135]},{index:.63,rgb:[79,175,126]},{index:.75,rgb:[120,203,104]},{index:.88,rgb:[193,221,100]},{index:1,rgb:[253,239,154]}],temperature:[{index:0,rgb:[4,35,51]},{index:.13,rgb:[23,51,122]},{index:.25,rgb:[85,59,157]},{index:.38,rgb:[129,79,143]},{index:.5,rgb:[175,95,130]},{index:.63,rgb:[222,112,101]},{index:.75,rgb:[249,146,66]},{index:.88,rgb:[249,196,65]},{index:1,rgb:[232,250,91]}],turbidity:[{index:0,rgb:[34,31,27]},{index:.13,rgb:[65,50,41]},{index:.25,rgb:[98,69,52]},{index:.38,rgb:[131,89,57]},{index:.5,rgb:[161,112,59]},{index:.63,rgb:[185,140,66]},{index:.75,rgb:[202,174,88]},{index:.88,rgb:[216,209,126]},{index:1,rgb:[233,246,171]}],"velocity-blue":[{index:0,rgb:[17,32,64]},{index:.13,rgb:[35,52,116]},{index:.25,rgb:[29,81,156]},{index:.38,rgb:[31,113,162]},{index:.5,rgb:[50,144,169]},{index:.63,rgb:[87,173,176]},{index:.75,rgb:[149,196,189]},{index:.88,rgb:[203,221,211]},{index:1,rgb:[254,251,230]}],"velocity-green":[{index:0,rgb:[23,35,19]},{index:.13,rgb:[24,64,38]},{index:.25,rgb:[11,95,45]},{index:.38,rgb:[39,123,35]},{index:.5,rgb:[95,146,12]},{index:.63,rgb:[152,165,18]},{index:.75,rgb:[201,186,69]},{index:.88,rgb:[233,216,137]},{index:1,rgb:[255,253,205]}],cubehelix:[{index:0,rgb:[0,0,0]},{index:.07,rgb:[22,5,59]},{index:.13,rgb:[60,4,105]},{index:.2,rgb:[109,1,135]},{index:.27,rgb:[161,0,147]},{index:.33,rgb:[210,2,142]},{index:.4,rgb:[251,11,123]},{index:.47,rgb:[255,29,97]},{index:.53,rgb:[255,54,69]},{index:.6,rgb:[255,85,46]},{index:.67,rgb:[255,120,34]},{index:.73,rgb:[255,157,37]},{index:.8,rgb:[241,191,57]},{index:.87,rgb:[224,220,93]},{index:.93,rgb:[218,241,142]},{index:1,rgb:[227,253,198]}]}},97958:function(e,r,n){"use strict";var i=n(97371),t=n(44276);function o(e){return[e[0]/255,e[1]/255,e[2]/255,e[3]]}function a(e){for(var r,n="#",i=0;i<3;++i)n+=("00"+(r=(r=e[i]).toString(16))).substr(r.length);return n}function d(e){return"rgba("+e.join(",")+")"}e.exports=function(e){var r,n,g,s,x,l,b,c,h,u;e||(e={});c=(e.nshades||72)-1,b=e.format||"hex",(l=e.colormap)||(l="jet");if("string"==typeof l){if(l=l.toLowerCase(),!i[l])throw Error(l+" not a supported colorscale");x=i[l]}else{if(!Array.isArray(l))throw Error("unsupported colormap option",l);x=l.slice()}if(x.length>c+1)throw new Error(l+" map requires nshades to be at least size "+x.length);h=Array.isArray(e.alpha)?2!==e.alpha.length?[1,1]:e.alpha.slice():"number"==typeof e.alpha?[e.alpha,e.alpha]:[1,1];r=x.map((function(e){return Math.round(e.index*c)})),h[0]=Math.min(Math.max(h[0],0),1),h[1]=Math.min(Math.max(h[1],0),1);var _=x.map((function(e,r){var n=x[r].index,i=x[r].rgb.slice();return 4===i.length&&i[3]>=0&&i[3]<=1||(i[3]=h[0]+(h[1]-h[0])*n),i})),p=[];for(u=0;u<r.length-1;++u){s=r[u+1]-r[u],n=_[u],g=_[u+1];for(var T=0;T<s;T++){var f=T/s;p.push([Math.round(t(n[0],g[0],f)),Math.round(t(n[1],g[1],f)),Math.round(t(n[2],g[2],f)),t(n[3],g[3],f)])}}p.push(x[x.length-1].rgb.concat(h[1])),"hex"===b?p=p.map(a):"rgbaString"===b?p=p.map(d):"float"===b&&(p=p.map(o));return p}}},function(e){var r;r=96317,e(e.s=r)}]);
//# sourceMappingURL=wind.js.map