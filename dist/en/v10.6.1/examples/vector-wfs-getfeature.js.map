{"version":3,"file":"vector-wfs-getfeature.js","mappings":"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","sources":["webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/GML32.js","webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this,\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1],\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const axisOrientation = containerSrs\n      ? getProjection(containerSrs).getAxisOrientation()\n      : 'enu';\n    if (axisOrientation === 'neu') {\n      for (let i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    const axisOrientation = containerSrs\n      ? getProjection(containerSrs).getAxisOrientation()\n      : 'enu';\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'),\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    const asXYZ = axisOrientation.startsWith('en');\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (asXYZ) {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    const axisOrientation = srsName\n      ? getProjection(srsName).getAxisOrientation()\n      : 'enu';\n    const point = value.getCoordinates();\n    // only 2d for simple features profile\n    let coords = axisOrientation.startsWith('en')\n      ? point[0] + ' ' + point[1]\n      : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    const axisOrientation = srsName\n      ? getProjection(srsName).getAxisOrientation()\n      : 'enu';\n    let coords = axisOrientation.startsWith('en')\n      ? point[0] + ' ' + point[1]\n      : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior',\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this,\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context,\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context,\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this,\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null && value !== undefined) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this,\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys,\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this,\n    );\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack,\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName],\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   * @override\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   * @override\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation,\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment,\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString,\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n","/**\n * @module ol/format/GML32\n */\nimport {writeStringTextNode} from '../format/xsd.js';\nimport {\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n} from '../xml.js';\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @override\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    objectStack[objectStack.length - 1] = Object.assign(\n      {multiCurve: true, multiSurface: true},\n      context,\n    );\n    super.writeGeometryElement(node, geometry, objectStack);\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment,\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser,\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser,\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember,\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString,\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon,\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {assert} from '../../asserts.js';\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 'At least 2 conditions are required');\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])',\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase,\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, srsName) {\n  return new Bbox(geometryName, extent, srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, srsName) {\n  return new Contains(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, srsName) {\n  return new Intersects(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, srsName) {\n  return new Disjoint(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, srsName) {\n  return new Within(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, matchCase) {\n  return new EqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, matchCase) {\n  return new NotEqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  wildCard,\n  singleChar,\n  escapeChar,\n  matchCase,\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase,\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/WFS\n */\nimport {assert} from '../asserts.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readExtentElement,\n      'bounds',\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary',\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary',\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * @typedef {Object} TransactionSummary\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {TransactionSummary} transactionSummary Transaction summary.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_,\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source),\n      );\n    }\n    return this.readTransactionResponseFromNode(\n      /** @type {Element} */ (source),\n    );\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source),\n      );\n    }\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Element} */ (source),\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n),\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures'),\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_,\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      [],\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_,\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(\n      Array.isArray(options.featureTypes),\n      '`options.featureTypes` must be an Array',\n    );\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(\n          options.geometryName,\n          '`options.geometryName` must also be provided when `options.bbox` is set',\n        );\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter,\n        );\n      }\n      Object.assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context],\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter,\n        );\n        Object.assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\n    if (filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version],\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request,\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @override\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = Object.assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj,\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.startsWith(prefix)) {\n    return featureType;\n  }\n  return prefix + featureType;\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 'Features must have an id set');\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 'Features must have an id set');\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack,\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const tagName = version === '2.0.0' ? 'ValueReference' : 'Name';\n  const name = createElementNS(ns, tagName);\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack,\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack,\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack,\n    );\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, version) {\n  version = version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  Object.assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack,\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport WFS from '../src/ol/format/WFS.js';\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n} from '../src/ol/format/filter.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport ImageTile from '../src/ol/source/ImageTile.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n  }),\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new ImageTile({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/maps/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    tileSize: 512,\n    maxZoom: 20,\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12,\n  }),\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank'),\n  ),\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest),\n})\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const features = new GeoJSON().readFeatures(json);\n    vectorSource.addFeatures(features);\n    map.getView().fit(vectorSource.getExtent());\n  });\n"],"names":["schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","GMLBase","constructor","options","super","this","surface_","undefined","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","MULTICURVE_PARSERS","MultiLineString","readFlatCurveRing","flatCoordinates","i","ii","length","getFlatCoordinates","readMultiSurface","polygons","MULTISURFACE_PARSERS","MultiPolygon","curveMemberParser","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","push","exteriorParser","readSurface","flatLinearRings","SURFACE_PARSERS","ends","Polygon","readCurve","CURVE_PARSERS","LineString","readEnvelope","ENVELOPE_PARSERS","readFlatPos","s","re","m","exec","parseFloat","substr","containerSrs","getAxisOrientation","y","x","len","readFlatPosList","replace","context","contextDimension","axisOrientation","coords","split","dim","getAttribute","asXYZ","startsWith","z","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","getCoords_","writePosList_","points","parts","Array","join","writePoint","geometry","pos","namespaceURI","appendChild","writeEnvelope","extent","values","ENVELOPE_SERIALIZERS","writeLinearRing","posList","RING_NODE_FACTORY_","nodeName","parentNode","exteriorWritten","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","Object","assign","isArray","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","keys","hasProperties","properties","getProperties","key","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","prototype","GML2","readFlatCoordinates","GEOMETRY_PARSERS","readPoint","readMultiPoint","readLineString","readMultiLineString","readLinearRing","readPolygon","readMultiPolygon","readFlatLinearRing","writeFeatures","GML32","MULTIPOINT_PARSERS","pointMemberParser","MULTILINESTRING_PARSERS","lineStringMemberParser","MULTIPOLYGON_PARSERS","polygonMemberParser","POINTMEMBER_PARSERS","readFlatCoordinatesFromNode","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","tagName","tagName_","getTagName","conditions","slice","call","arguments","Error","propertyName","expression","matchCase","pattern","wildCard","singleChar","escapeChar","and","params","concat","Function","bind","apply","FEATURE_COLLECTION_PARSERS","readExtentElement","readFeaturesInternal","TRANSACTION_SUMMARY_PARSERS","TRANSACTION_RESPONSE_PARSERS","readTransactionSummary","readInsertResults","QUERY_SERIALIZERS","TRANSACTION_SERIALIZERS","writeFeature","writeUpdate","writeDelete","writeProperty","writeNative","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","GML_FORMATS","WFS","XMLFeature","version_","version","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","featuresNS","readTransactionResponse","source","doc","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","handle","outputFormat","maxFeatures","String","resultType","startIndex","count","viewParams","featurePrefix","propertyNames","featureTypes","filter","bbox","combineBboxAndFilter","forEach","completeFilter","name","bboxFilter","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","request","gmlVersion","obj","createTransactionRequest","serializeTransactionRequest","nativeElements","readProjectionFromDocument","firstChild","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","readGeometryElement","pop","type","OGC_FID_PARSERS","fidParser","INSERT_RESULTS_PARSERS","writeOgcFidFilter","ns","getTypeName","prefix","typeName","getKeys","get","pair","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","writeQuery","writeDuringFilter","writeLogicalFilter","writeNotFilter","writeBboxFilter","writeSpatialFilter","writeDWithinFilter","writeComparisonFilter","writeIsNullFilter","writeIsBetweenFilter","writeIsLikeFilter","typeNameAttr","getFilterNS","writeFilterCondition","parent","format","writePropertyName","distance","toString","unit","writeExpression","timePeriod","begin","writeTimeInstant","end","condition","writeLiteral","lowerBoundary","upperBoundary","property","time","timeInstant","timePosition","vectorSource","vector","Vector","style","Style","stroke","Stroke","color","width","raster","Tile","ImageTile","attributions","url","tileSize","maxZoom","map","Map","layers","target","document","getElementById","view","View","center","zoom","featureRequest","equalTo","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"sourceRoot":""}