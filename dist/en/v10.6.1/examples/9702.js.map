{"version":3,"file":"9702.js","mappings":"sJAQe,MAAMA,UAAwB,IAC3C,WAAAC,GAEE,GADAC,QACiC,oBAAtBC,kBACT,MAAM,IAAIC,MAAM,kEACX,GAAwB,oBAAbC,UAAuD,oBAApBC,gBACnD,MAAM,IAAIF,MAAM,sFAEpB,CAEA,YAAMG,CAAOC,EAAeC,GAC1B,MAAMC,EAAO,IAAIC,KAAK,CAACF,IACjBG,QAAoBT,kBAAkBO,GAE5C,IAAIG,EACoB,oBAAbR,UACTQ,EAASR,SAASS,cAAc,UAChCD,EAAOE,MAAQH,EAAYG,MAC3BF,EAAOG,OAASJ,EAAYI,QAE5BH,EAAS,IAAIP,gBAAgBM,EAAYG,MAAOH,EAAYI,QAG9D,MAAMC,EAAMJ,EAAOK,WAAW,MAM9B,OALAD,EAAIE,UAAUP,EAAa,EAAG,GAKvBK,EAAIG,aAAa,EAAG,EAAGR,EAAYG,MAAOH,EAAYI,QAAQK,KAAKZ,MAC5E,E,wBCtCF,SAASa,EAAaC,EAAKC,GACzB,IAAIC,EAASF,EAAIE,OAASD,EACtBE,EAAS,EACb,EAAG,CACD,IAAK,IAAIC,EAAIH,EAAQG,EAAI,EAAGA,IAC1BJ,EAAIG,EAASF,IAAWD,EAAIG,GAC5BA,IAGFD,GAAUD,CACZ,OAASC,EAAS,EACpB,CAEA,SAASG,EAAuBL,EAAKC,EAAQK,GAC3C,IAAIC,EAAQ,EACRC,EAAQR,EAAIE,OAChB,MAAMO,EAAKD,EAAQF,EAEnB,KAAOE,EAAQP,GAAQ,CACrB,IAAK,IAAIG,EAAIH,EAAQG,EAAI,IAAKA,EAC5BJ,EAAIO,EAAQN,IAAWD,EAAIO,KACzBA,EAEJC,GAASP,CACX,CAEA,MAAMS,EAAOV,EAAIW,QACjB,IAAK,IAAIP,EAAI,EAAGA,EAAIK,IAAML,EACxB,IAAK,IAAIQ,EAAI,EAAGA,EAAIN,IAAkBM,EACpCZ,EAAKM,EAAiBF,EAAKQ,GAAKF,GAAOJ,EAAiBM,EAAI,GAAKH,EAAML,EAG7E,C,gCC9Be,MAAMS,EACnB,YAAM7B,CAAOC,EAAeC,GAC1B,MAAM4B,QAAgBC,KAAKC,YAAY9B,GACjC+B,EAAYhC,EAAciC,WAAa,EAC7C,GAAkB,IAAdD,EAAiB,CACnB,MAAME,GAAWlC,EAAcmC,aAK/B,ODsBC,SAAwBC,EAAOJ,EAAWzB,EAAOC,EAAQ6B,EAC9DC,GACA,IAAKN,GAA2B,IAAdA,EAChB,OAAOI,EAGT,IAAK,IAAIjB,EAAI,EAAGA,EAAIkB,EAAcpB,SAAUE,EAAG,CAC7C,GAAIkB,EAAclB,GAAK,GAAM,EAC3B,MAAM,IAAIvB,MAAM,wEAElB,GAAIyC,EAAclB,KAAOkB,EAAc,GACrC,MAAM,IAAIzC,MAAM,qEAEpB,CAEA,MAAMyB,EAAiBgB,EAAc,GAAK,EACpCrB,EAAiC,IAAxBsB,EAA4B,EAAID,EAAcpB,OAE7D,IAAK,IAAIE,EAAI,EAAGA,EAAIX,KAEdW,EAAIH,EAAST,EAAQc,GAAkBe,EAAMG,cAFrBpB,EAAG,CAK/B,IAAIJ,EACJ,GAAkB,IAAdiB,EAAiB,CACnB,OAAQK,EAAc,IACpB,KAAK,EACHtB,EAAM,IAAIyB,WACRJ,EAAOjB,EAAIH,EAAST,EAAQc,EAAgBL,EAAST,EAAQc,GAE/D,MACF,KAAK,GACHN,EAAM,IAAI0B,YACRL,EAAOjB,EAAIH,EAAST,EAAQc,EAAgBL,EAAST,EAAQc,EAAiB,GAEhF,MACF,KAAK,GACHN,EAAM,IAAI2B,YACRN,EAAOjB,EAAIH,EAAST,EAAQc,EAAgBL,EAAST,EAAQc,EAAiB,GAEhF,MACF,QACE,MAAM,IAAIzB,MAAM,gCAAgCyC,EAAc,uBAElEvB,EAAaC,EAAKC,EACpB,MAAyB,IAAdgB,IACTjB,EAAM,IAAIyB,WACRJ,EAAOjB,EAAIH,EAAST,EAAQc,EAAgBL,EAAST,EAAQc,GAE/DD,EAAuBL,EAAKC,EAAQK,GAExC,CACA,OAAOe,CACT,CC3EaO,CACLd,EAASG,EALOE,EAAUlC,EAAc4C,UAAY5C,EAAc6C,WACjDX,EAAUlC,EAAc8C,WACzC9C,EAAc+C,cAAgB/C,EAAcgD,YAGDhD,EAAciD,cACzDjD,EAAckD,oBAElB,CACA,OAAOrB,CACT,E","sources":["webpack:///../node_modules/geotiff/dist-module/compression/webimage.js","webpack:///../node_modules/geotiff/dist-module/predictor.js","webpack:///../node_modules/geotiff/dist-module/compression/basedecoder.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nexport default class WebImageDecoder extends BaseDecoder {\n  constructor() {\n    super();\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n  }\n\n  async decode(fileDirectory, buffer) {\n    const blob = new Blob([buffer]);\n    const imageBitmap = await createImageBitmap(blob);\n\n    let canvas;\n    if (typeof document !== 'undefined') {\n      canvas = document.createElement('canvas');\n      canvas.width = imageBitmap.width;\n      canvas.height = imageBitmap.height;\n    } else {\n      canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n    }\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageBitmap, 0, 0);\n\n    // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n    // it seems like GDAL always encodes via RGBA which does not require a translation\n\n    return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;\n  }\n}\n","function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n"],"names":["WebImageDecoder","constructor","super","createImageBitmap","Error","document","OffscreenCanvas","decode","fileDirectory","buffer","blob","Blob","imageBitmap","canvas","createElement","width","height","ctx","getContext","drawImage","getImageData","data","decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","BaseDecoder","decoded","this","decodeBlock","predictor","Predictor","isTiled","StripOffsets","block","bitsPerSample","planarConfiguration","byteLength","Uint8Array","Uint16Array","Uint32Array","applyPredictor","TileWidth","ImageWidth","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration"],"sourceRoot":""}