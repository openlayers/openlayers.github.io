{"version":3,"file":"getfeatureinfo-layers.js","mappings":"0IAgCA,MAAMA,UAA0BC,EAAA,EAI9B,WAAAC,CAAYC,GACVC,QAEAD,EAAUA,GAAoB,CAAC,EAM/BE,KAAKC,WAAa,yCAMlBD,KAAKE,WAAa,IAAIC,EAAA,EAMtBH,KAAKI,QAAUN,EAAQO,OAASP,EAAQO,OAAS,IACnD,CAKA,SAAAC,GACE,OAAON,KAAKI,OACd,CAKA,SAAAG,CAAUF,GACRL,KAAKI,QAAUC,CACjB,CAQA,aAAAG,CAAcC,EAAMC,GAClBD,EAAKE,aAAa,eAAgBX,KAAKC,YACvC,MAAMW,EAAYH,EAAKG,UAEvB,IAAIC,EAAW,GACf,GAA+B,IAA3BJ,EAAKK,WAAWC,OAClB,OAAOF,EAET,GAAiB,eAAbD,EACF,IAAK,IAAII,EAAI,EAAGC,EAAKR,EAAKK,WAAWC,OAAQC,EAAIC,EAAID,IAAK,CACxD,MAAME,EAAQT,EAAKK,WAAWE,GAC9B,GAAIE,EAAMC,WAAaC,KAAKC,aAC1B,SAGF,MAAMC,EAAsC,EACtCC,EAAUb,EAAY,GAEtBc,EA3EU,SA4EVC,EAAYH,EAAaV,UAAUc,QAAQF,EAAU,IAE3D,GAAIxB,KAAKI,UAAYJ,KAAKI,QAAQuB,SAASF,GACzC,SAGF,MAAMG,EAAcH,EAxFF,WA0FlBF,EAAqB,YAAIK,EACzBL,EAAmB,UAAIvB,KAAKC,WAG5B,MAAM4B,EAAU,CAAC,EACjBA,EAAQD,IAAe,QACrB5B,KAAKE,WAAW4B,mBAChB9B,KAAKE,YAEP,MAAM6B,GAAY,QAChB,CAACR,EAAmB,UAAG,MACvBM,GAEFP,EAAaX,aAAa,eAAgBX,KAAKC,YAC/C,MAAM+B,GAAgB,QACpB,GAEAD,EACAT,EACAZ,EACAV,KAAKE,YAEH8B,IACF,QAAOnB,EAAUmB,EAErB,CAEF,GAAiB,qBAAbpB,EAAkC,CACpC,MAAMqB,GAAc,QAClB,GACAjC,KAAKE,WAAWgC,2BAChBzB,EACA,CAAC,CAAC,GACFT,KAAKE,YAEH+B,IACFpB,EAAWoB,EAEf,CACA,OAAOpB,CACT,CASA,oBAAAsB,CAAqB1B,EAAMX,GACzB,MAAMsC,EAAkB,CAAC,EAIzB,OAHItC,GACFuC,OAAOC,OAAOF,EAAiBpC,KAAKuC,eAAe9B,EAAMX,IAEpDE,KAAKQ,cAAcC,EAAM,CAAC2B,GACnC,EAGF,QCnKAI,MAAM,mDACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,MAClB,IACCF,MAAK,SAAUC,GAEd,MAAME,GAAc,IAAI,GAAoBC,aAAaH,GACzDI,SAASC,eAAe,OAAOC,UAAYJ,EAAY7B,OAAOkC,WAI9D,MAAMC,EAAgB,IAAI,EAAkB,CAC1C7C,OAAQ,CAAC,WACRwC,aAAaH,GAChBI,SAASC,eAAe,SAASC,UAC/BE,EAAcnC,OAAOkC,WAEvB,MAAME,EAAqB,IAAI,EAAkB,CAC/C9C,OAAQ,CAAC,gBACRwC,aAAaH,GAChBI,SAASC,eAAe,cAAcC,UACpCG,EAAmBpC,OAAOkC,UAC9B,G","sources":["webpack:///../src/ol/format/WMSGetFeatureInfo.js","webpack:///./getfeatureinfo-layers.js"],"sourcesContent":["/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport {extend} from '../array.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\nclass WMSGetFeatureInfo extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n    /**\n     * @private\n     * @type {GML2}\n     */\n    this.gmlFormat_ = new GML2();\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n  }\n\n  /**\n   * @return {Array<string>|null} layers\n   */\n  getLayers() {\n    return this.layers_;\n  }\n\n  /**\n   * @param {Array<string>|null} layers Layers to parse.\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n  readFeatures_(node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    const localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = [];\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n    if (localName == 'msGMLOutput') {\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n        const layer = node.childNodes[i];\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        const layerElement = /** @type {Element} */ (layer);\n        const context = objectStack[0];\n\n        const toRemove = layerIdentifier;\n        const layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !this.layers_.includes(layerName)) {\n          continue;\n        }\n\n        const featureType = layerName + featureIdentifier;\n\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        parsers[featureType] = makeArrayPusher(\n          this.gmlFormat_.readFeatureElement,\n          this.gmlFormat_,\n        );\n        const parsersNS = makeStructureNS(\n          [context['featureNS'], null],\n          parsers,\n        );\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        const layerFeatures = pushParseAndPop(\n          [],\n          // @ts-ignore\n          parsersNS,\n          layerElement,\n          objectStack,\n          this.gmlFormat_,\n        );\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n    if (localName == 'FeatureCollection') {\n      const gmlFeatures = pushParseAndPop(\n        [],\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\n        node,\n        [{}],\n        this.gmlFormat_,\n      );\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    const internalOptions = {};\n    if (options) {\n      Object.assign(internalOptions, this.getReadOptions(node, options));\n    }\n    return this.readFeatures_(node, [internalOptions]);\n  }\n}\n\nexport default WMSGetFeatureInfo;\n","import WMSGetFeatureInfo from '../src/ol/format/WMSGetFeatureInfo.js';\n\nfetch('data/wmsgetfeatureinfo/osm-restaurant-hotel.xml')\n  .then(function (response) {\n    return response.text();\n  })\n  .then(function (response) {\n    // this is the standard way to read the features\n    const allFeatures = new WMSGetFeatureInfo().readFeatures(response);\n    document.getElementById('all').innerText = allFeatures.length.toString();\n\n    // when specifying the 'layers' options, only the features of those\n    // layers are returned by the format\n    const hotelFeatures = new WMSGetFeatureInfo({\n      layers: ['hotel'],\n    }).readFeatures(response);\n    document.getElementById('hotel').innerText =\n      hotelFeatures.length.toString();\n\n    const restaurantFeatures = new WMSGetFeatureInfo({\n      layers: ['restaurant'],\n    }).readFeatures(response);\n    document.getElementById('restaurant').innerText =\n      restaurantFeatures.length.toString();\n  });\n"],"names":["WMSGetFeatureInfo","XMLFeature","constructor","options","super","this","featureNS_","gmlFormat_","GML2","layers_","layers","getLayers","setLayers","readFeatures_","node","objectStack","setAttribute","localName","features","childNodes","length","i","ii","layer","nodeType","Node","ELEMENT_NODE","layerElement","context","toRemove","layerName","replace","includes","featureType","parsers","readFeatureElement","parsersNS","layerFeatures","gmlFeatures","FEATURE_COLLECTION_PARSERS","readFeaturesFromNode","internalOptions","Object","assign","getReadOptions","fetch","then","response","text","allFeatures","readFeatures","document","getElementById","innerText","toString","hotelFeatures","restaurantFeatures"],"sourceRoot":""}