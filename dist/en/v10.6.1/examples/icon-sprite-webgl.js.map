{"version":3,"file":"icon-sprite-webgl.js","mappings":"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","sources":["webpack:///./icon-sprite-webgl.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport WebGLVectorLayer from '../src/ol/layer/WebGLVector.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport ImageTile from '../src/ol/source/ImageTile.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new ImageTile({\n        attributions: attributions,\n        url:\n          'https://api.maptiler.com/maps/satellite/{z}/{x}/{y}.jpg?key=' + key,\n      }),\n    }),\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 4000000],\n    zoom: 2,\n  }),\n});\n\nconst oldColor = [255, 160, 110];\nconst newColor = [180, 255, 200];\n\nconst style = {\n  'icon-src': 'data/ufo_shapes.png',\n  'icon-width': 128,\n  'icon-height': 64,\n  'icon-color': [\n    'interpolate',\n    ['linear'],\n    ['get', 'year'],\n    1950,\n    oldColor,\n    2013,\n    newColor,\n  ],\n  'icon-offset': [\n    'match',\n    ['get', 'shape'],\n    'light',\n    [0, 0],\n    'sphere',\n    [32, 0],\n    'circle',\n    [32, 0],\n    'disc',\n    [64, 0],\n    'oval',\n    [64, 0],\n    'triangle',\n    [96, 0],\n    'fireball',\n    [0, 32],\n    [96, 32],\n  ],\n  'icon-size': [32, 32],\n  'icon-scale': 0.5,\n};\n\nconst pointsLayer = new WebGLVectorLayer({\n  variables: {\n    filterShape: 'all',\n  },\n  source: new VectorSource({\n    features: [],\n    attributions: 'National UFO Reporting Center',\n  }),\n  style: [\n    {\n      style,\n      filter: [\n        'any',\n        ['==', ['var', 'filterShape'], 'all'],\n        ['==', ['var', 'filterShape'], ['get', 'shape']],\n      ],\n    },\n  ],\n});\n\nconst shapeSelect = document.getElementById('shape-filter');\nshapeSelect.addEventListener('input', function () {\n  pointsLayer.updateStyleVariables({filterShape: shapeSelect.value});\n  map.render();\n});\nfunction fillShapeSelect(shapeTypes) {\n  Object.keys(shapeTypes)\n    .sort(function (a, b) {\n      return shapeTypes[b] - shapeTypes[a];\n    })\n    .forEach(function (shape) {\n      const option = document.createElement('option');\n      const sightings = shapeTypes[shape];\n      option.text = `${shape} (${sightings} sighting${\n        sightings === 1 ? '' : 's'\n      })`;\n      option.value = shape;\n      shapeSelect.appendChild(option);\n    });\n}\n\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/csv/ufo_sighting_data.csv');\nclient.addEventListener('load', function () {\n  const csv = client.responseText;\n  // key is shape name, value is sightings count\n  const shapeTypes = {};\n  const features = [];\n\n  let prevIndex = csv.indexOf('\\n') + 1; // scan past the header line\n  let curIndex;\n  while ((curIndex = csv.indexOf('\\n', prevIndex)) !== -1) {\n    const line = csv.substring(prevIndex, curIndex).split(',');\n    prevIndex = curIndex + 1;\n\n    const coords = [parseFloat(line[5]), parseFloat(line[4])];\n    const shape = line[2];\n    shapeTypes[shape] = (shapeTypes[shape] || 0) + 1;\n\n    features.push(\n      new Feature({\n        datetime: line[0],\n        year: parseInt(/[0-9]{4}/.exec(line[0])[0], 10), // extract the year as int\n        shape: shape,\n        duration: line[3],\n        geometry: new Point(fromLonLat(coords)),\n      }),\n    );\n  }\n  shapeTypes['all'] = features.length;\n  pointsLayer.getSource().addFeatures(features);\n  map.addLayer(pointsLayer);\n  fillShapeSelect(shapeTypes);\n});\nclient.send();\n\nconst info = document.getElementById('info');\nmap.on('pointermove', function (evt) {\n  if (map.getView().getInteracting() || map.getView().getAnimating()) {\n    return;\n  }\n  const text = map.forEachFeatureAtPixel(evt.pixel, function (feature) {\n    const datetime = feature.get('datetime');\n    const duration = feature.get('duration');\n    const shape = feature.get('shape');\n    return `On ${datetime}, lasted ${duration} seconds and had a \"${shape}\" shape.`;\n  });\n  info.innerText = text || '';\n});\n"],"names":["map","layers","source","attributions","url","target","document","getElementById","view","center","zoom","style","pointsLayer","variables","filterShape","features","filter","shapeSelect","addEventListener","updateStyleVariables","value","render","client","XMLHttpRequest","open","csv","responseText","shapeTypes","curIndex","prevIndex","indexOf","line","substring","split","coords","parseFloat","shape","push","datetime","year","parseInt","exec","duration","geometry","length","getSource","addFeatures","addLayer","Object","keys","sort","a","b","forEach","option","createElement","sightings","text","appendChild","fillShapeSelect","send","info","on","evt","getView","getInteracting","getAnimating","forEachFeatureAtPixel","pixel","feature","get","innerText"],"sourceRoot":""}