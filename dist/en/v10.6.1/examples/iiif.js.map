{"version":3,"file":"iiif.js","mappings":"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","sources":["webpack:///../src/ol/format/IIIFInfo.js","webpack:///../src/ol/source/IIIF.js","webpack:///./iiif.js"],"sourcesContent":["/**\n * @module ol/format/IIIFInfo\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} PreferredOptions\n * @property {string} [format] Preferred image format. Will be used if the image information\n * indicates support for that format.\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\n * indicates support for that quality.\n */\n\n/**\n * @typedef {Object} SupportedFeatures\n * @property {Array<string>} [supports] Supported IIIF image size and region\n * calculation features.\n * @property {Array<string>} [formats] Supported image formats.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n */\n\n/**\n * @typedef {Object} TileInfo\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\n * @property {number} width Tile width in pixels.\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\n * not given.\n */\n\n/**\n * @typedef {Object} IiifProfile\n * @property {Array<string>} [formats] Supported image formats for the image service.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n * @property {Array<string>} [supports] Supported features.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n */\n\n/**\n * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}\n *    ImageInformationResponse\n */\n\n/**\n * Enum representing the major IIIF Image API versions\n * @enum {string}\n */\nexport const Versions = {\n  VERSION1: 'version1',\n  VERSION2: 'version2',\n  VERSION3: 'version3',\n};\n\n/**\n * Supported image formats, qualities and supported region / size calculation features\n * for different image API versions and compliance levels\n * @const\n * @type {Object<string, Object<string, SupportedFeatures>>}\n */\nconst IIIF_PROFILE_VALUES = {};\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\n  'level0': {\n    supports: [],\n    formats: [],\n    qualities: ['native'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['native'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['native', 'color', 'grey', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByDistortedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default', 'bitonal'],\n  },\n};\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level1': {\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\n    formats: ['jpg'],\n    qualities: ['default'],\n  },\n  'level2': {\n    supports: [\n      'regionByPx',\n      'regionSquare',\n      'regionByPct',\n      'sizeByW',\n      'sizeByH',\n      'sizeByPct',\n      'sizeByConfinedWh',\n      'sizeByWh',\n    ],\n    formats: ['jpg', 'png'],\n    qualities: ['default'],\n  },\n};\nIIIF_PROFILE_VALUES['none'] = {\n  'none': {\n    supports: [],\n    formats: [],\n    qualities: [],\n  },\n};\n\nconst COMPLIANCE_VERSION1 =\n  /^https?:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(?:1\\.1\\/)?compliance\\.html#level[0-2]$/;\nconst COMPLIANCE_VERSION2 =\n  /^https?:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](?:\\.json)?$/;\nconst COMPLIANCE_VERSION3 =\n  /(^https?:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](?:\\.json)?$)|(^level[0-2]$)/;\n\nfunction generateVersion1Options(iiifInfo) {\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  // Version 1.0 and 1.1 do not require a profile.\n  if (levelProfile === undefined) {\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\n  }\n  return {\n    url:\n      iiifInfo.imageInfo['@id'] === undefined\n        ? undefined\n        : iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    supports: levelProfile.supports,\n    formats: [\n      ...levelProfile.formats,\n      iiifInfo.imageInfo.formats === undefined\n        ? []\n        : iiifInfo.imageInfo.formats,\n    ],\n    qualities: [\n      ...levelProfile.qualities,\n      iiifInfo.imageInfo.qualities === undefined\n        ? []\n        : iiifInfo.imageInfo.qualities,\n    ],\n    resolutions: iiifInfo.imageInfo.scale_factors,\n    tileSize:\n      iiifInfo.imageInfo.tile_width !== undefined\n        ? iiifInfo.imageInfo.tile_height !== undefined\n          ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]\n          : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]\n        : iiifInfo.imageInfo.tile_height != undefined\n          ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]\n          : undefined,\n  };\n}\n\nfunction generateVersion2Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    additionalProfile =\n      Array.isArray(iiifInfo.imageInfo.profile) &&\n      iiifInfo.imageInfo.profile.length > 1,\n    profileSupports =\n      additionalProfile && iiifInfo.imageInfo.profile[1].supports\n        ? iiifInfo.imageInfo.profile[1].supports\n        : [],\n    profileFormats =\n      additionalProfile && iiifInfo.imageInfo.profile[1].formats\n        ? iiifInfo.imageInfo.profile[1].formats\n        : [],\n    profileQualities =\n      additionalProfile && iiifInfo.imageInfo.profile[1].qualities\n        ? iiifInfo.imageInfo.profile[1].qualities\n        : [];\n  return {\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height === undefined ? tile.width : tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports: [...levelProfile.supports, ...profileSupports],\n    formats: [...levelProfile.formats, ...profileFormats],\n    qualities: [...levelProfile.qualities, ...profileQualities],\n  };\n}\n\nfunction generateVersion3Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n    formats =\n      iiifInfo.imageInfo.extraFormats === undefined\n        ? levelProfile.formats\n        : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\n    preferredFormat =\n      iiifInfo.imageInfo.preferredFormats !== undefined &&\n      Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\n      iiifInfo.imageInfo.preferredFormats.length > 0\n        ? iiifInfo.imageInfo.preferredFormats\n            .filter(function (format) {\n              return ['jpg', 'png', 'gif'].includes(format);\n            })\n            .reduce(function (acc, format) {\n              return acc === undefined && formats.includes(format)\n                ? format\n                : acc;\n            }, undefined)\n        : undefined;\n  return {\n    url: iiifInfo.imageInfo['id'],\n    sizes:\n      iiifInfo.imageInfo.sizes === undefined\n        ? undefined\n        : iiifInfo.imageInfo.sizes.map(function (size) {\n            return [size.width, size.height];\n          }),\n    tileSize:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : [\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.width;\n            })[0],\n            iiifInfo.imageInfo.tiles.map(function (tile) {\n              return tile.height;\n            })[0],\n          ],\n    resolutions:\n      iiifInfo.imageInfo.tiles === undefined\n        ? undefined\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\n            return tile.scaleFactors;\n          })[0],\n    supports:\n      iiifInfo.imageInfo.extraFeatures === undefined\n        ? levelProfile.supports\n        : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\n    formats: formats,\n    qualities:\n      iiifInfo.imageInfo.extraQualities === undefined\n        ? levelProfile.qualities\n        : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\n    preferredFormat: preferredFormat,\n  };\n}\n\nconst versionFunctions = {};\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\n\n/**\n * @classdesc\n * Format for transforming IIIF Image API image information responses into\n * IIIF tile source ready options\n *\n * @api\n */\nclass IIIFInfo {\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   */\n  constructor(imageInfo) {\n    this.setImageInfo(imageInfo);\n  }\n\n  /**\n   * @param {string|ImageInformationResponse} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   * @api\n   */\n  setImageInfo(imageInfo) {\n    if (typeof imageInfo == 'string') {\n      this.imageInfo = JSON.parse(imageInfo);\n    } else {\n      this.imageInfo = imageInfo;\n    }\n  }\n\n  /**\n   * @return {Versions|undefined} Major IIIF version.\n   * @api\n   */\n  getImageApiVersion() {\n    if (this.imageInfo === undefined) {\n      return undefined;\n    }\n    let context = this.imageInfo['@context'] || 'ol-no-context';\n    if (typeof context == 'string') {\n      context = [context];\n    }\n    for (let i = 0; i < context.length; i++) {\n      switch (context[i]) {\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\n        case 'http://iiif.io/api/image/1/context.json':\n          return Versions.VERSION1;\n        case 'http://iiif.io/api/image/2/context.json':\n          return Versions.VERSION2;\n        case 'http://iiif.io/api/image/3/context.json':\n          return Versions.VERSION3;\n        case 'ol-no-context':\n          // Image API 1.0 has no '@context'\n          if (\n            this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&\n            this.imageInfo.identifier\n          ) {\n            return Versions.VERSION1;\n          }\n          break;\n        default:\n      }\n    }\n    assert(\n      false,\n      'Cannot determine IIIF Image API version from provided image information JSON',\n    );\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string|undefined} Compliance level as it appears in the IIIF image information\n   * response.\n   */\n  getComplianceLevelEntryFromProfile(version) {\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\n      return undefined;\n    }\n    if (version === undefined) {\n      version = this.getImageApiVersion();\n    }\n    switch (version) {\n      case Versions.VERSION1:\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION3:\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION2:\n        if (\n          typeof this.imageInfo.profile === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile)\n        ) {\n          return this.imageInfo.profile;\n        }\n        if (\n          Array.isArray(this.imageInfo.profile) &&\n          this.imageInfo.profile.length > 0 &&\n          typeof this.imageInfo.profile[0] === 'string' &&\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])\n        ) {\n          return this.imageInfo.profile[0];\n        }\n        break;\n      default:\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\n   */\n  getComplianceLevelFromProfile(version) {\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\n    if (complianceLevel === undefined) {\n      return undefined;\n    }\n    const level = complianceLevel.match(/level[0-2](?:\\.json)?$/g);\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\n  }\n\n  /**\n   * @return {SupportedFeatures|undefined} Image formats, qualities and region / size calculation\n   * methods that are supported by the IIIF service.\n   */\n  getComplianceLevelSupportedFeatures() {\n    if (this.imageInfo === undefined) {\n      return undefined;\n    }\n    const version = this.getImageApiVersion();\n    const level = this.getComplianceLevelFromProfile(version);\n    if (level === undefined) {\n      return IIIF_PROFILE_VALUES['none']['none'];\n    }\n    return IIIF_PROFILE_VALUES[version][level];\n  }\n\n  /**\n   * @param {PreferredOptions} [preferredOptions] Optional options for preferred format and quality.\n   * @return {import(\"../source/IIIF.js\").Options|undefined} IIIF tile source ready constructor options.\n   * @api\n   */\n  getTileSourceOptions(preferredOptions) {\n    const options = preferredOptions || {},\n      version = this.getImageApiVersion();\n    if (version === undefined) {\n      return undefined;\n    }\n    const imageOptions =\n      version === undefined ? undefined : versionFunctions[version](this);\n    if (imageOptions === undefined) {\n      return undefined;\n    }\n    return {\n      url: imageOptions.url,\n      version: version,\n      size: [this.imageInfo.width, this.imageInfo.height],\n      sizes: imageOptions.sizes,\n      format:\n        options.format !== undefined &&\n        imageOptions.formats.includes(options.format)\n          ? options.format\n          : imageOptions.preferredFormat !== undefined\n            ? imageOptions.preferredFormat\n            : 'jpg',\n      supports: imageOptions.supports,\n      quality:\n        options.quality && imageOptions.qualities.includes(options.quality)\n          ? options.quality\n          : imageOptions.qualities.includes('native')\n            ? 'native'\n            : 'default',\n      resolutions: Array.isArray(imageOptions.resolutions)\n        ? imageOptions.resolutions.sort(function (a, b) {\n            return b - a;\n          })\n        : undefined,\n      tileSize: imageOptions.tileSize,\n    };\n  }\n}\n\nexport default IIIFInfo;\n","/**\n * @module ol/source/IIIF\n */\n\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {toSize} from '../size.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n\n    let baseUrl = partialOptions.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      'Missing or invalid `size`',\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality =\n      partialOptions.quality ||\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2),\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      }),\n    );\n\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\n\nexport default IIIF;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport IIIFInfo from '../src/ol/format/IIIFInfo.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport IIIF from '../src/ol/source/IIIF.js';\n\nconst layer = new TileLayer(),\n  map = new Map({\n    layers: [layer],\n    target: 'map',\n  }),\n  notifyDiv = document.getElementById('iiif-notification'),\n  urlInput = document.getElementById('imageInfoUrl'),\n  displayButton = document.getElementById('display');\n\nfunction refreshMap(imageInfoUrl) {\n  fetch(imageInfoUrl)\n    .then(function (response) {\n      response\n        .json()\n        .then(function (imageInfo) {\n          const options = new IIIFInfo(imageInfo).getTileSourceOptions();\n          if (options === undefined || options.version === undefined) {\n            notifyDiv.textContent =\n              'Data seems to be no valid IIIF image information.';\n            return;\n          }\n          options.zDirection = -1;\n          const iiifTileSource = new IIIF(options);\n          layer.setSource(iiifTileSource);\n          map.setView(\n            new View({\n              resolutions: iiifTileSource.getTileGrid().getResolutions(),\n              extent: iiifTileSource.getTileGrid().getExtent(),\n              constrainOnlyCenter: true,\n            }),\n          );\n          map.getView().fit(iiifTileSource.getTileGrid().getExtent());\n          notifyDiv.textContent = '';\n        })\n        .catch(function (body) {\n          notifyDiv.textContent = 'Could not read image info json. ' + body;\n        });\n    })\n    .catch(function () {\n      notifyDiv.textContent = 'Could not read data from URL.';\n    });\n}\n\ndisplayButton.addEventListener('click', function () {\n  refreshMap(urlInput.value);\n});\n\nrefreshMap(urlInput.value);\n"],"names":["Versions","IIIF_PROFILE_VALUES","supports","formats","qualities","COMPLIANCE_VERSION1","COMPLIANCE_VERSION2","COMPLIANCE_VERSION3","versionFunctions","iiifInfo","levelProfile","getComplianceLevelSupportedFeatures","undefined","url","imageInfo","replace","resolutions","scale_factors","tileSize","tile_width","tile_height","additionalProfile","Array","isArray","profile","length","profileSupports","profileFormats","profileQualities","sizes","map","size","width","height","tiles","tile","scaleFactors","extraFormats","preferredFormat","preferredFormats","filter","format","includes","reduce","acc","extraFeatures","extraQualities","constructor","this","setImageInfo","JSON","parse","getImageApiVersion","context","i","getComplianceLevelEntryFromProfile","identifier","version","test","getComplianceLevelFromProfile","complianceLevel","level","match","getTileSourceOptions","preferredOptions","options","imageOptions","quality","sort","a","b","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","TileImage","partialOptions","baseUrl","lastIndexOf","isNaN","tilePixelRatio","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","tileWidth","tileHeight","maxZoom","Math","max","ceil","log","LN2","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","TileGrid","origin","IiifTileClass","bind","super","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileClass","tileUrlFunction","tileCoord","pixelRatio","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","regionWidth","regionHeight","transition","zDirection","Tile","Map","layers","target","notifyDiv","document","getElementById","urlInput","refreshMap","imageInfoUrl","fetch","then","response","json","textContent","iiifTileSource","setSource","setView","View","getTileGrid","getResolutions","getExtent","constrainOnlyCenter","getView","fit","catch","body","addEventListener","value"],"sourceRoot":""}