{"version":3,"file":"mapserver-cgi.js","mappings":"4KAOA,MACMA,EAAS,CAAC,OAAQ,QAAS,OAAQ,SACnCC,EAAiB,IAAI,IAAW,CACpCC,OAAQF,EACRG,OAAQ,IAAI,KAAY,CACtBC,OC+CG,SAAsBC,GAC3B,MAAMC,EAAOD,EAAQC,MAAQ,KACvBC,EAAQF,EAAQE,OAAS,EACzBC,EAAcH,EAAQG,aAAe,KAG3C,OAAO,SAAUN,EAAQO,EAAYC,GACnC,MAAMC,EAAQ,IAAIC,MAClBD,EAAMH,YAAcA,EACpBN,GAAS,QAAiBA,EAAQO,EAAYC,EAAYH,GAC1D,MAAMM,GAAQ,QAASX,GAAUO,EAC3BK,GAAS,QAAUZ,GAAUO,EAC7BM,EAAO,CAACF,EAAQH,EAAYI,EAASJ,GACrCM,EAzCV,SAAgBC,EAASC,EAAQhB,EAAQa,GACvC,MAAMF,EAAQM,KAAKC,MAAML,EAAK,IACxBD,EAASK,KAAKC,MAAML,EAAK,IACzBM,EAAU,GAAGR,KAASC,IACtBQ,EAAS,GAAGpB,EAAO,MAAMA,EAAO,MAAMA,EAAO,MAAMA,EAAO,KAE1DqB,EAAa,CACjBC,KAAM,MACNC,cAAe,MACfC,OAAQJ,EACRK,OAAQL,EACRM,SAAUP,EACVQ,KAAMhB,EAAQ,EACdiB,KAAMhB,EAAS,EACfiB,MAAOV,GAGT,OADAW,OAAOC,OAAOV,EAAYL,IACnB,QAAaD,EAASM,EAC/B,CAuBgBW,CAAO7B,EAAQ8B,IAAK9B,EAAQa,OAAQhB,EAAQa,GACxD,OAAOT,EAAKK,EAAOK,GAAKoB,MAAMzB,IAAU,CAAEA,QAAOT,SAAQQ,gBAC3D,CACF,CD/DY2B,CAAa,CACnBF,IANe,8CAOfjB,OAAQ,CACN,IAAO,gDACP,OAAU,6CAMN,IAAIoB,EAAA,EAAI,CAClBC,OAAQ,CAACtC,GACTuC,OAAQ,MACRC,KAAM,IAAIC,EAAA,GAAK,CACbC,QAAQ,QAAU3C,GAClB4C,KAAM,M","sources":["webpack:///./mapserver-cgi.js","webpack:///../src/ol/source/mapserver.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getCenter} from '../src/ol/extent.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport ImageSource from '../src/ol/source/Image.js';\nimport {createLoader} from '../src/ol/source/mapserver.js';\n\nconst mapserverUrl = 'https://demo.mapserver.org/cgi-bin/mapserv?';\nconst bounds = [388039, 5234969, 500964, 5295764];\nconst mapServerLayer = new ImageLayer({\n  extent: bounds,\n  source: new ImageSource({\n    loader: createLoader({\n      url: mapserverUrl,\n      params: {\n        'map': '/mapserver/apps/itasca_legend/map/itasca3.map',\n        'layers': 'boundaries water roads other cities',\n      },\n    }),\n  }),\n});\n\nconst map = new Map({\n  layers: [mapServerLayer],\n  target: 'map',\n  view: new View({\n    center: getCenter(bounds),\n    zoom: 10,\n  }),\n});\n","/**\n * @module ol/source/mapserver\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\nimport {appendParams} from '../uri.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {string} url The MapServer url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * the image from the remote server.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Object} [params] Additional query parameters.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * @param {string} baseUrl The MapServer url.\n * @param {Object<string, string|number>} params Request parameters.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @return {string} The MapServer map image request URL.\n */\nfunction getUrl(baseUrl, params, extent, size) {\n  const width = Math.round(size[0]);\n  const height = Math.round(size[1]);\n  const mapSize = `${width} ${height}`;\n  const mapExt = `${extent[0]} ${extent[1]} ${extent[2]} ${extent[3]}`;\n\n  const baseParams = {\n    mode: 'map',\n    map_imagetype: 'png',\n    mapext: mapExt,\n    imgext: mapExt,\n    map_size: mapSize,\n    imgx: width / 2,\n    imgy: height / 2,\n    imgxy: mapSize,\n  };\n  Object.assign(baseParams, params);\n  return appendParams(baseUrl, baseParams);\n}\n\n/**\n * Creates a loader for MapServer images generated using the CGI interface,\n * which predates OGC services. It is **strongly** recommended to configure\n * MapServer to use WMS, and use the WMS createLoader.\n * @param {LoaderOptions} options LoaderOptions Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} MapServer image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const ratio = options.ratio ?? 1;\n  const crossOrigin = options.crossOrigin ?? null;\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    const image = new Image();\n    image.crossOrigin = crossOrigin;\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n    const src = getUrl(options.url, options.params, extent, size);\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n"],"names":["bounds","mapServerLayer","extent","source","loader","options","load","ratio","crossOrigin","resolution","pixelRatio","image","Image","width","height","size","src","baseUrl","params","Math","round","mapSize","mapExt","baseParams","mode","map_imagetype","mapext","imgext","map_size","imgx","imgy","imgxy","Object","assign","getUrl","url","then","createLoader","Map","layers","target","view","View","center","zoom"],"sourceRoot":""}