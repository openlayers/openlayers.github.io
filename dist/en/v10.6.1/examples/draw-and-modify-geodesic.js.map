{"version":3,"file":"draw-and-modify-geodesic.js","mappings":"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","sources":["webpack:///./draw-and-modify-geodesic.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeometryCollection from '../src/ol/geom/GeometryCollection.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Polygon, {circular} from '../src/ol/geom/Polygon.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport Modify from '../src/ol/interaction/Modify.js';\nimport Snap from '../src/ol/interaction/Snap.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {transform} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {getDistance} from '../src/ol/sphere.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#33cc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nconst geodesicStyle = new Style({\n  geometry: function (feature) {\n    return feature.get('modifyGeometry') || feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ff3333',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0, 0, 0, 0)',\n    }),\n  }),\n});\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const geometry = feature.getGeometry();\n    return geometry.getType() === 'GeometryCollection' ? geodesicStyle : style;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 6600000],\n    zoom: 3,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  style: function (feature, resolution) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const modifyPoint = feature.getGeometry().getCoordinates();\n        const geometries = modifyFeature.getGeometry().getGeometries();\n        const polygon = geometries[0].getCoordinates()[0];\n        const center = geometries[1].getCoordinates();\n        const projection = map.getView().getProjection();\n        let first, last, radius;\n        if (modifyPoint[0] === center[0] && modifyPoint[1] === center[1]) {\n          // center is being modified\n          // get unchanged radius from diameter between polygon vertices\n          first = transform(polygon[0], projection, 'EPSG:4326');\n          last = transform(\n            polygon[(polygon.length - 1) / 2],\n            projection,\n            'EPSG:4326',\n          );\n          radius = getDistance(first, last) / 2;\n        } else {\n          // radius is being modified\n          first = transform(center, projection, 'EPSG:4326');\n          last = transform(modifyPoint, projection, 'EPSG:4326');\n          radius = getDistance(first, last);\n        }\n        // update the polygon using new center or radius\n        const circle = circular(\n          transform(center, projection, 'EPSG:4326'),\n          radius,\n          128,\n        );\n        circle.transform('EPSG:4326', projection);\n        geometries[0].setCoordinates(circle.getCoordinates());\n        // save changes to be applied at the end of the interaction\n        modifyGeometry.setGeometries(geometries);\n      }\n    });\n    return defaultStyle(feature, resolution);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    const geometry = feature.getGeometry();\n    if (geometry.getType() === 'GeometryCollection') {\n      feature.set('modifyGeometry', geometry.clone(), true);\n    }\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\n\nlet draw, snap; // global so we can remove them later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  let value = typeSelect.value;\n  let geometryFunction;\n  if (value === 'Geodesic') {\n    value = 'Circle';\n    geometryFunction = function (coordinates, geometry, projection) {\n      if (!geometry) {\n        geometry = new GeometryCollection([\n          new Polygon([]),\n          new Point(coordinates[0]),\n        ]);\n      }\n      const geometries = geometry.getGeometries();\n      const center = transform(coordinates[0], projection, 'EPSG:4326');\n      const last = transform(coordinates[1], projection, 'EPSG:4326');\n      const radius = getDistance(center, last);\n      const circle = circular(center, radius, 128);\n      circle.transform('EPSG:4326', projection);\n      geometries[0].setCoordinates(circle.getCoordinates());\n      geometry.setGeometries(geometries);\n      return geometry;\n    };\n  }\n  draw = new Draw({\n    source: source,\n    type: value,\n    geometryFunction: geometryFunction,\n  });\n  map.addInteraction(draw);\n  snap = new Snap({source: source});\n  map.addInteraction(snap);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  map.removeInteraction(snap);\n  addInteractions();\n};\n\naddInteractions();\n"],"names":["raster","source","style","fill","color","stroke","width","image","radius","geodesicStyle","geometry","feature","get","getGeometry","vector","getType","map","layers","target","view","center","zoom","defaultStyle","getOverlay","getStyleFunction","modify","resolution","forEach","modifyFeature","modifyGeometry","modifyPoint","getCoordinates","geometries","getGeometries","polygon","projection","getView","getProjection","first","last","length","circle","transform","setCoordinates","setGeometries","draw","snap","on","event","features","set","clone","setGeometry","unset","addInteraction","typeSelect","document","getElementById","addInteractions","geometryFunction","value","coordinates","type","onchange","removeInteraction"],"sourceRoot":""}