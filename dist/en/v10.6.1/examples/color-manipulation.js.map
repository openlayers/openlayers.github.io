{"version":3,"file":"color-manipulation.js","mappings":";;;;;;;;;;;AAAmC;AACE;AACa;AACI;AACE;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,0EAAY;AAC/B;AACA,QAAQ,6EAAU;AAClB;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,gBAAgB,+DAAG;AACnB;AACA,QAAQ,uEAAU;AAClB;AACA,KAAK;AACL;AACA;AACA,YAAY,iEAAI;AAChB;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC","sources":["webpack:///./color-manipulation.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport RasterSource from '../src/ol/source/Raster.js';\nimport StadiaMaps from '../src/ol/source/StadiaMaps.js';\n\n/**\n * Color manipulation functions below are adapted from\n * https://github.com/d3/d3-color.\n */\nconst Xn = 0.95047;\nconst Yn = 1;\nconst Zn = 1.08883;\nconst t0 = 4 / 29;\nconst t1 = 6 / 29;\nconst t2 = 3 * t1 * t1;\nconst t3 = t1 * t1 * t1;\nconst twoPi = 2 * Math.PI;\n\n/**\n * Convert an RGB pixel into an HCL pixel.\n * @param {Array<number>} pixel A pixel in RGB space.\n * @return {Array<number>} A pixel in HCL space.\n */\nfunction rgb2hcl(pixel) {\n  const red = rgb2xyz(pixel[0]);\n  const green = rgb2xyz(pixel[1]);\n  const blue = rgb2xyz(pixel[2]);\n\n  const x = xyz2lab(\n    (0.4124564 * red + 0.3575761 * green + 0.1804375 * blue) / Xn,\n  );\n  const y = xyz2lab(\n    (0.2126729 * red + 0.7151522 * green + 0.072175 * blue) / Yn,\n  );\n  const z = xyz2lab(\n    (0.0193339 * red + 0.119192 * green + 0.9503041 * blue) / Zn,\n  );\n\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n\n  const c = Math.sqrt(a * a + b * b);\n  let h = Math.atan2(b, a);\n  if (h < 0) {\n    h += twoPi;\n  }\n\n  pixel[0] = h;\n  pixel[1] = c;\n  pixel[2] = l;\n\n  return pixel;\n}\n\n/**\n * Convert an HCL pixel into an RGB pixel.\n * @param {Array<number>} pixel A pixel in HCL space.\n * @return {Array<number>} A pixel in RGB space.\n */\nfunction hcl2rgb(pixel) {\n  const h = pixel[0];\n  const c = pixel[1];\n  const l = pixel[2];\n\n  const a = Math.cos(h) * c;\n  const b = Math.sin(h) * c;\n\n  let y = (l + 16) / 116;\n  let x = isNaN(a) ? y : y + a / 500;\n  let z = isNaN(b) ? y : y - b / 200;\n\n  y = Yn * lab2xyz(y);\n  x = Xn * lab2xyz(x);\n  z = Zn * lab2xyz(z);\n\n  pixel[0] = xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n  pixel[1] = xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z);\n  pixel[2] = xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\n  return pixel;\n}\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction rgb2xyz(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction xyz2rgb(x) {\n  return (\n    255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055)\n  );\n}\n\nconst raster = new RasterSource({\n  sources: [\n    new StadiaMaps({\n      layer: 'stamen_watercolor',\n    }),\n  ],\n  operation: function (pixels, data) {\n    const hcl = rgb2hcl(pixels[0]);\n\n    let h = hcl[0] + (Math.PI * data.hue) / 180;\n    if (h < 0) {\n      h += twoPi;\n    } else if (h > twoPi) {\n      h -= twoPi;\n    }\n    hcl[0] = h;\n\n    hcl[1] *= data.chroma / 100;\n    hcl[2] *= data.lightness / 100;\n\n    return hcl2rgb(hcl);\n  },\n  lib: {\n    rgb2hcl: rgb2hcl,\n    hcl2rgb: hcl2rgb,\n    rgb2xyz: rgb2xyz,\n    lab2xyz: lab2xyz,\n    xyz2lab: xyz2lab,\n    xyz2rgb: xyz2rgb,\n    Xn: Xn,\n    Yn: Yn,\n    Zn: Zn,\n    t0: t0,\n    t1: t1,\n    t2: t2,\n    t3: t3,\n    twoPi: twoPi,\n  },\n});\n\nconst controls = {};\n\nraster.on('beforeoperations', function (event) {\n  const data = event.data;\n  for (const id in controls) {\n    data[id] = Number(controls[id].value);\n  }\n});\n\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      source: raster,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 2500000],\n    zoom: 2,\n    maxZoom: 18,\n  }),\n});\n\nconst controlIds = ['hue', 'chroma', 'lightness'];\ncontrolIds.forEach(function (id) {\n  const control = document.getElementById(id);\n  const output = document.getElementById(id + 'Out');\n  control.addEventListener('input', function () {\n    output.innerText = control.value;\n    raster.changed();\n  });\n  output.innerText = control.value;\n  controls[id] = control;\n});\n"],"names":[],"sourceRoot":""}