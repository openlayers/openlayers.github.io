{"version":3,"file":"cluster.js","mappings":"mQAgBA,MAAMA,EAAgBC,SAASC,eAAe,YACxCC,EAAmBF,SAASC,eAAe,gBAG3CE,EAAW,IAAIC,MADP,KAERC,EAAI,KACV,IAAK,IAAIC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9B,MAAMC,EAAc,CAAC,EAAIF,EAAIG,KAAKC,SAAWJ,EAAG,EAAIA,EAAIG,KAAKC,SAAWJ,GACxEF,EAASG,GAAK,IAAI,IAAQ,IAAI,IAAMC,GACtC,CAEA,MAAMG,EAAS,IAAI,IAAa,CAC9BP,SAAUA,IAGNQ,EAAgB,IAAI,IAAQ,CAChCC,SAAUC,SAASd,EAAce,MAAO,IACxCC,YAAaF,SAASX,EAAiBY,MAAO,IAC9CJ,OAAQA,IAGJM,EAAa,CAAC,EACdC,EAAW,IAAI,IAAY,CAC/BP,OAAQC,EACRO,MAAO,SAAUC,GACf,MAAMC,EAAOD,EAAQE,IAAI,YAAYC,OACrC,IAAIJ,EAAQF,EAAWI,GAqBvB,OApBKF,IACHA,EAAQ,IAAI,KAAM,CAChBK,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRC,OAAQ,IAAI,IAAO,CACjBC,MAAO,SAETC,KAAM,IAAI,IAAK,CACbD,MAAO,cAGXE,KAAM,IAAI,IAAK,CACbA,KAAMR,EAAKS,WACXF,KAAM,IAAI,IAAK,CACbD,MAAO,aAIbV,EAAWI,GAAQF,GAEdA,CACT,IAGIY,EAAS,IAAI,IAAU,CAC3BpB,OAAQ,IAAI,MAGRqB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACF,EAAQb,GACjBgB,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVrC,EAAcsC,iBAAiB,SAAS,WACtC1B,EAAc2B,YAAYzB,SAASd,EAAce,MAAO,IAC1D,IAEAZ,EAAiBmC,iBAAiB,SAAS,WACzC1B,EAAc4B,eAAe1B,SAASX,EAAiBY,MAAO,IAChE,IAEAiB,EAAIS,GAAG,SAAUnC,IACfY,EAASwB,YAAYpC,EAAEqC,OAAOC,MAAMC,IAClC,GAAIA,EAAgBtB,OAAQ,CAE1B,MAAMnB,EAAWyC,EAAgB,GAAGvB,IAAI,YACxC,GAAIlB,EAASmB,OAAS,EAAG,CACvB,MAAMuB,GAAS,QACb1C,EAAS4B,KAAKe,GAAMA,EAAEC,cAAcC,oBAEtCjB,EAAIkB,UAAUC,IAAIL,EAAQ,CAACM,SAAU,IAAMC,QAAS,CAAC,GAAI,GAAI,GAAI,KACnE,CACF,IACA,G","sources":["webpack:///./cluster.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {boundingExtent} from '../src/ol/extent.js';\nimport Point from '../src/ol/geom/Point.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport Cluster from '../src/ol/source/Cluster.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\nimport Text from '../src/ol/style/Text.js';\n\nconst distanceInput = document.getElementById('distance');\nconst minDistanceInput = document.getElementById('min-distance');\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 4500000;\nfor (let i = 0; i < count; ++i) {\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\n  features[i] = new Feature(new Point(coordinates));\n}\n\nconst source = new VectorSource({\n  features: features,\n});\n\nconst clusterSource = new Cluster({\n  distance: parseInt(distanceInput.value, 10),\n  minDistance: parseInt(minDistanceInput.value, 10),\n  source: source,\n});\n\nconst styleCache = {};\nconst clusters = new VectorLayer({\n  source: clusterSource,\n  style: function (feature) {\n    const size = feature.get('features').length;\n    let style = styleCache[size];\n    if (!style) {\n      style = new Style({\n        image: new CircleStyle({\n          radius: 10,\n          stroke: new Stroke({\n            color: '#fff',\n          }),\n          fill: new Fill({\n            color: '#3399CC',\n          }),\n        }),\n        text: new Text({\n          text: size.toString(),\n          fill: new Fill({\n            color: '#fff',\n          }),\n        }),\n      });\n      styleCache[size] = style;\n    }\n    return style;\n  },\n});\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  layers: [raster, clusters],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndistanceInput.addEventListener('input', function () {\n  clusterSource.setDistance(parseInt(distanceInput.value, 10));\n});\n\nminDistanceInput.addEventListener('input', function () {\n  clusterSource.setMinDistance(parseInt(minDistanceInput.value, 10));\n});\n\nmap.on('click', (e) => {\n  clusters.getFeatures(e.pixel).then((clickedFeatures) => {\n    if (clickedFeatures.length) {\n      // Get clustered Coordinates\n      const features = clickedFeatures[0].get('features');\n      if (features.length > 1) {\n        const extent = boundingExtent(\n          features.map((r) => r.getGeometry().getCoordinates()),\n        );\n        map.getView().fit(extent, {duration: 1000, padding: [50, 50, 50, 50]});\n      }\n    }\n  });\n});\n"],"names":["distanceInput","document","getElementById","minDistanceInput","features","Array","e","i","coordinates","Math","random","source","clusterSource","distance","parseInt","value","minDistance","styleCache","clusters","style","feature","size","get","length","image","radius","stroke","color","fill","text","toString","raster","map","layers","target","view","center","zoom","addEventListener","setDistance","setMinDistance","on","getFeatures","pixel","then","clickedFeatures","extent","r","getGeometry","getCoordinates","getView","fit","duration","padding"],"sourceRoot":""}