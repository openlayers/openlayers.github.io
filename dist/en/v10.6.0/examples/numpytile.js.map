{"version":3,"file":"numpytile.js","mappings":"wFA8BA,SAASA,EAAYC,GACnB,OAAOC,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWJ,GACxD,CAcA,SAASK,EAAWL,GAElB,MAA6B,UADjBD,EAAYC,EAAIM,MAAM,EAAG,IACxBA,MAAM,EAAG,EACxB,CA/CAC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,gBAoDR,SAAyBX,GACvB,GAAuB,IAAnBA,EAAIY,WACN,MAAO,CAAC,EAIV,IAAKP,EAAWL,GACd,MAAM,IAAIa,MAAM,mBAElB,IASIC,EATAC,GAjCgBC,EAiCYhB,EAAIM,MAAM,EAAG,IAhCzCW,EAAO,IAAIC,SAASF,GACpBG,EAAMF,EAAKG,SAAS,GACxBD,GAAOF,EAAKG,SAAS,IAAM,GA+BzBC,EAAYtB,EAAYC,EAAIM,MAAM,GAAI,GAAKS,IAC3CO,EAAc,GAAKP,EAIjBQ,EAAOC,KAAKC,MAAMJ,EAAUK,cAAcC,QAAQ,KAAM,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,OAAQ,MAvCvG,IAAsBX,EAChBC,EACAE,EAyCJ,GAAmB,QAAfI,EAAKK,MACPd,EAAO,IAAIV,WAAWJ,EAAKsB,QACtB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAIe,UAAU7B,EAAKsB,QACrB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAIgB,YAAY9B,EAAKsB,QACvB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAIiB,WAAW/B,EAAKsB,QACtB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAIkB,YAAYhC,EAAKsB,QACvB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAImB,WAAWjC,EAAKsB,QACtB,GAAmB,QAAfC,EAAKK,MACdd,EAAO,IAAIoB,aAAalC,EAAKsB,OACxB,IAAmB,QAAfC,EAAKK,MAGd,MAAM,IAAIf,MAAM,yBAFhBC,EAAO,IAAIqB,aAAanC,EAAKsB,EAG/B,CACA,MAAO,CACLc,MAAOb,EAAKa,MACZtB,KAAMA,EAEV,EA7FAL,EAAQJ,WAAaA,C,6FCiCrB,MAAMgC,EAAmBC,GAAY,CACnC,cACA,CAAC,UACD,CAAC,OAAQA,GACT,CAAC,MAAO,QACR,EACA,CAAC,MAAO,QACR,GAGIC,EAAa,IACbC,EAAa,KAEbC,EAAa,IAAI,IAAU,CAC/BC,MAAO,CACLC,MAAO,CACL,QACAN,EAAgB,GAChBA,EAAgB,GAChBA,EAAgB,GAChB,CAAC,OAAQ,IAEXO,UAAW,CACT,KAAQL,EACR,KAAQC,IAGZK,OAAQ,IAAI,IAAe,CACzBC,OAvDJ,SAAyBC,EAAGC,EAAGC,GAC7B,MAAMC,EAAM,iDAAiDH,KAAKC,KAAKC,uBAAuBE,mBAH9F,6FAOA,OAAOC,MAAMF,GACVG,MAAMC,GAAMA,EAAEC,gBACdF,MAAMrC,GAAW,kBAA4BA,KAC7CqC,MAAMG,IAEL,MAAMC,EAAW,IAAIvB,aAAa,QAC5BwB,EAAW,MACjB,IAAK,IAAIV,EAAI,EAAGA,EAAI,IAAKA,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAMU,EAAKX,EAAQ,IAAJC,EACfQ,EAAc,EAALE,EAAS,GAAKH,EAAU1C,KAAS,IAAJmC,EAAUD,GAChDS,EAAc,EAALE,EAAS,GAAKH,EAAU1C,KAAK4C,EAAe,IAAJT,EAAUD,GAC3DS,EAAc,EAALE,EAAS,GAAKH,EAAU1C,KAAK4C,OAAmB,IAAJT,EAAUD,GAC/DS,EAAc,EAALE,EAAS,GAAKH,EAAU1C,KAAK4C,OAAmB,IAAJT,EAAUD,GAC/DS,EAAc,EAALE,EAAS,GAChBH,EAAU1C,KAAK4C,OAAmB,IAAJT,EAAUD,GAAK,EAAI,EAAM,CAC3D,CAEF,OAAOS,CAAQ,GAErB,EA+BIG,UAAW,MAaTC,GATM,IAAI,IAAI,CAClBC,OAAQ,MACRC,OAAQ,CAACtB,GACTxB,KAAM,IAAI,KAAK,CACb+C,QAAQ,QAAW,CAAC,QAAS,SAC7BC,KAAM,OAIOC,SAASC,eAAe,cACnCC,EAAWF,SAASC,eAAe,aACnCE,EAAYH,SAASC,eAAe,cACpCG,EAAYJ,SAASC,eAAe,cAE1CN,EAASU,iBAAiB,SAAUC,IAClC/B,EAAWgC,qBAAqB,CAC9B,KAAQC,WAAWF,EAAIV,OAAOpD,OAC9B,KAAQgE,WAAWN,EAAS1D,SAE9B2D,EAAUM,UAAYH,EAAIV,OAAOpD,KAAK,IAGxC0D,EAASG,iBAAiB,SAAUC,IAClC/B,EAAWgC,qBAAqB,CAC9B,KAAQC,WAAWb,EAASnD,OAC5B,KAAQgE,WAAWF,EAAIV,OAAOpD,SAEhC4D,EAAUK,UAAYH,EAAIV,OAAOpD,KAAK,IAGxCmD,EAASnD,MAAQT,OAAOsC,GACxB6B,EAAS1D,MAAQT,OAAOuC,GACxB6B,EAAUM,UAAY1E,OAAOsC,GAC7B+B,EAAUK,UAAY1E,OAAOuC,E","sources":["webpack:///../node_modules/@planet/ol-numpytiles/index.js","webpack:///./numpytile.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromArrayBuffer = fromArrayBuffer;\nexports.isNumpyArr = isNumpyArr;\n/* Copyright 2021 Planet Labs Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Client-side parser for .npy files\n *\n *  The numpy format specification is [here](http://docs.scipy.org/doc/numpy-dev/neps/npy-format.html).\n *  This code is inspired by the GIST found [here](https://gist.github.com/nvictus/88b3b5bfe587d32ac1ab519fd0009607) but has been heavily modified.\n *\n * @module NumpyLoader\n */\n\nfunction asciiDecode(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\nfunction readUint16LE(buffer) {\n  var view = new DataView(buffer);\n  var val = view.getUint8(0);\n  val |= view.getUint8(1) << 8;\n  return val;\n}\n\n/** Sniff test to see if an arrayBuffer contains a Numpy arr\n *\n * @param {ArrayBuffer} buf - The array buffer to test.\n *\n * @returns {boolean} Returns true if likely a numpy array, false otherwise.\n */\nfunction isNumpyArr(buf) {\n  var magic = asciiDecode(buf.slice(0, 6));\n  return magic.slice(1, 6) === 'NUMPY';\n}\n\n/** Read an ArrayBuffer as a NumpyTile\n *\n *  @param {ArrayBuffer} buf - Numpy array to convert to Javascript typed array.\n *\n *  @returns Javascript typed array.\n */\nfunction fromArrayBuffer(buf) {\n  if (buf.byteLength === 0) {\n    return {};\n  }\n  // Check the magic number\n\n  if (!isNumpyArr(buf)) {\n    throw new Error('Not a NumpyTile');\n  }\n  var headerLength = readUint16LE(buf.slice(8, 10)),\n    headerStr = asciiDecode(buf.slice(10, 10 + headerLength)),\n    offsetBytes = 10 + headerLength;\n\n  // this is a rough but working conversion of the\n  //  numpy header dict to Javascript object.\n  var info = JSON.parse(headerStr.toLowerCase().replace(/'/g, '\"').replace(/\\(/g, '[').replace(/\\),/g, ']'));\n\n  // Intepret the bytes according to the specified dtype\n  var data;\n  if (info.descr === '|u1') {\n    data = new Uint8Array(buf, offsetBytes);\n  } else if (info.descr === '|i1') {\n    data = new Int8Array(buf, offsetBytes);\n  } else if (info.descr === '<u2') {\n    data = new Uint16Array(buf, offsetBytes);\n  } else if (info.descr === '<i2') {\n    data = new Int16Array(buf, offsetBytes);\n  } else if (info.descr === '<u4') {\n    data = new Uint32Array(buf, offsetBytes);\n  } else if (info.descr === '<i4') {\n    data = new Int32Array(buf, offsetBytes);\n  } else if (info.descr === '<f4') {\n    data = new Float32Array(buf, offsetBytes);\n  } else if (info.descr === '<f8') {\n    data = new Float64Array(buf, offsetBytes);\n  } else {\n    throw new Error('unknown numeric dtype');\n  }\n  return {\n    shape: info.shape,\n    data: data\n  };\n}","import NumpyLoader from '@planet/ol-numpytiles';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport DataTileSource from '../src/ol/source/DataTile.js';\n\n// 16-bit COG\n// Which will be served as NumpyTiles.\nconst COG =\n  'https://storage.googleapis.com/open-cogs/stac-examples/20201211_223832_CS2_analytic.tif';\n\nfunction numpyTileLoader(z, x, y) {\n  const url = `https://titiler.xyz/cog/tiles/WebMercatorQuad/${z}/${x}/${y}@1x?format=npy&url=${encodeURIComponent(\n    COG,\n  )}`;\n\n  return fetch(url)\n    .then((r) => r.arrayBuffer())\n    .then((buffer) => NumpyLoader.fromArrayBuffer(buffer))\n    .then((numpyData) => {\n      // flatten the numpy data\n      const dataTile = new Float32Array(256 * 256 * 5);\n      const bandSize = 256 * 256;\n      for (let x = 0; x < 256; x++) {\n        for (let y = 0; y < 256; y++) {\n          const px = x + y * 256;\n          dataTile[px * 5 + 0] = numpyData.data[y * 256 + x];\n          dataTile[px * 5 + 1] = numpyData.data[bandSize + y * 256 + x];\n          dataTile[px * 5 + 2] = numpyData.data[bandSize * 2 + y * 256 + x];\n          dataTile[px * 5 + 3] = numpyData.data[bandSize * 3 + y * 256 + x];\n          dataTile[px * 5 + 4] =\n            numpyData.data[bandSize * 4 + y * 256 + x] > 0 ? 1.0 : 0;\n        }\n      }\n      return dataTile;\n    });\n}\n\nconst interpolateBand = (bandIdx) => [\n  'interpolate',\n  ['linear'],\n  ['band', bandIdx],\n  ['var', 'bMin'],\n  0,\n  ['var', 'bMax'],\n  1,\n];\n\nconst initialMin = 3000;\nconst initialMax = 18000;\n\nconst numpyLayer = new TileLayer({\n  style: {\n    color: [\n      'array',\n      interpolateBand(3),\n      interpolateBand(2),\n      interpolateBand(1),\n      ['band', 5],\n    ],\n    variables: {\n      'bMin': initialMin,\n      'bMax': initialMax,\n    },\n  },\n  source: new DataTileSource({\n    loader: numpyTileLoader,\n    bandCount: 5,\n  }),\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [numpyLayer],\n  view: new View({\n    center: fromLonLat([172.933, 1.3567]),\n    zoom: 15,\n  }),\n});\n\nconst inputMin = document.getElementById('input-min');\nconst inputMax = document.getElementById('input-max');\nconst outputMin = document.getElementById('output-min');\nconst outputMax = document.getElementById('output-max');\n\ninputMin.addEventListener('input', (evt) => {\n  numpyLayer.updateStyleVariables({\n    'bMin': parseFloat(evt.target.value),\n    'bMax': parseFloat(inputMax.value),\n  });\n  outputMin.innerText = evt.target.value;\n});\n\ninputMax.addEventListener('input', (evt) => {\n  numpyLayer.updateStyleVariables({\n    'bMin': parseFloat(inputMin.value),\n    'bMax': parseFloat(evt.target.value),\n  });\n  outputMax.innerText = evt.target.value;\n});\n\ninputMin.value = String(initialMin);\ninputMax.value = String(initialMax);\noutputMin.innerText = String(initialMin);\noutputMax.innerText = String(initialMax);\n"],"names":["asciiDecode","buf","String","fromCharCode","apply","Uint8Array","isNumpyArr","slice","Object","defineProperty","exports","value","fromArrayBuffer","byteLength","Error","data","headerLength","buffer","view","DataView","val","getUint8","headerStr","offsetBytes","info","JSON","parse","toLowerCase","replace","descr","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","shape","interpolateBand","bandIdx","initialMin","initialMax","numpyLayer","style","color","variables","source","loader","z","x","y","url","encodeURIComponent","fetch","then","r","arrayBuffer","numpyData","dataTile","bandSize","px","bandCount","inputMin","target","layers","center","zoom","document","getElementById","inputMax","outputMin","outputMax","addEventListener","evt","updateStyleVariables","parseFloat","innerText"],"sourceRoot":""}