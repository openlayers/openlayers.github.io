{"version":3,"file":"topolis.js","mappings":"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","sources":["webpack:///./topolis.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Polygon from '../src/ol/geom/Polygon.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport Snap from '../src/ol/interaction/Snap.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\nimport Text from '../src/ol/style/Text.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function (f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1}),\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1,\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function (f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)',\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2,\n        }),\n      }),\n    });\n    return [style];\n  },\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16,\n  }),\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function (e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function (e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function (e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function (e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node,\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge,\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face,\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (\n      crossing.length === 1 &&\n      !start &&\n      !end &&\n      edgesAtStart.length === 0 &&\n      edgesAtEnd.length === 0\n    ) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString',\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges,\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"names":["raster","source","nodes","wrapX","nodesLayer","style","f","image","radius","fill","color","stroke","width","text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","layers","target","view","center","zoom","topo","topolis","createTopology","removeElementFeature","element","feature","getFeatureById","removeFeature","createNode","coord","node","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","geometry","coordinate","setId","addFeature","e","edge","coordinates","setGeometry","face","getFaceGeometry","draw","type","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","start","end","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","addControl"],"sourceRoot":""}