{"version":3,"file":"google.js","mappings":"6MA+EA,MAAMA,UAAeC,EAAA,EAInB,WAAAC,CAAYC,GACV,MAAMC,IAAYD,EAAQC,QAE1BC,MAAM,CACJC,wBAAyBH,EAAQG,wBACjCC,UAAWJ,EAAQI,UACnBC,YAAa,YACbC,YAAaN,EAAQM,YACrBC,WAAY,YACZC,2BAA4BR,EAAQQ,2BACpCC,MAAO,UACPC,iBAAkBV,EAAQU,iBAC1BC,eAAgBV,EAAU,EAAI,EAC9BW,WAAyBC,IAAlBb,EAAQY,OAAsBZ,EAAQY,MAC7CE,WAAYd,EAAQc,WACpBC,WAAYf,EAAQe,aAOtBC,KAAKC,QAAUjB,EAAQkB,IAMvBF,KAAKG,OAAS,KAKd,MAAMC,EAAsB,CAC1BC,QAASrB,EAAQqB,SAAW,UAC5BC,SAAUtB,EAAQsB,UAAY,QAC9BC,OAAQvB,EAAQuB,QAAU,MAExBvB,EAAQwB,cACVJ,EAAoBI,YAAcxB,EAAQwB,aAExCxB,EAAQyB,QACVL,EAAoBK,MAAQzB,EAAQyB,OAElCxB,IACFmB,EAAoBnB,SAAU,GAE5BD,EAAQ0B,aACVN,EAAoBM,WAAa1B,EAAQ0B,YAEvC1B,EAAQ2B,SACVP,EAAoBO,OAAS3B,EAAQ2B,SAEf,IAApB3B,EAAQ4B,UACVR,EAAoBQ,SAAU,GAE5B5B,EAAQ6B,aACVT,EAAoBS,WAAa7B,EAAQ6B,YAO3Cb,KAAKc,qBAAuBV,EAM5BJ,KAAKe,mBAMLf,KAAKgB,kBAMLhB,KAAKiB,6BAMLjB,KAAKkB,wBAELlB,KAAKmB,gBACP,CAcA,QAAAC,GACE,OAAOpB,KAAKG,MACd,CAQA,iBAAAkB,CAAkBC,EAAKC,GACrB,OAAOC,MAAMF,EAAKC,EACpB,CAMA,oBAAMJ,GACJ,MAAMG,EAAMG,oDAA6BzB,KAAKC,QACxCsB,EAAS,CACbG,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU9B,KAAKc,uBAGtBiB,QAAiB/B,KAAKqB,kBAAkBC,EAAKC,GACnD,IAAKQ,EAASC,GAAI,CAChB,IACE,MAAMJ,QAAaG,EAASE,OAC5BjC,KAAKG,OAAS,IAAI+B,MAAMN,EAAKO,MAAMC,QACrC,CAAE,MACApC,KAAKG,OAAS,IAAI+B,MAAM,+BAC1B,CAEA,YADAlC,KAAKqC,SAAS,QAEhB,CAKA,MAAMC,QAA6BP,EAASE,OAEtCtC,EAAiBK,KAAKuC,kBAAkB,GACxCC,EAAW,CACfF,EAAqBG,UAAY9C,EACjC2C,EAAqBI,WAAa/C,GAGpCK,KAAK2C,UAAW,QAAU,CACxBC,QAAQ,QAAqB5C,KAAK6C,iBAClCC,QApOU,GAqOVN,SAAUA,IAGZ,MAAMO,EAAUT,EAAqBS,QACrC/C,KAAKe,mBAAqBgC,EAC1B,MAAM7C,EAAMF,KAAKC,QACjBD,KAAKgD,gBAAkB,SAAUC,EAAWC,EAAY3D,GAKtD,MADY,0CAHF0D,EAAU,MACVA,EAAU,MACVA,EAAU,cAC6BF,SAAe7C,GAElE,EAEA,MAAMiD,EAAqD,IAA5CC,SAASd,EAAqBa,OAAQ,IAC/CE,EAAUC,KAAKC,IAAIJ,EAASK,KAAKC,MAAQ,IAAW,GAC1DzD,KAAKgB,kBAAoB0C,YAAW,IAAM1D,KAAKmB,kBAAkBkC,GAEjErD,KAAK2D,gBAAgB3D,KAAK4D,mBAAmBC,KAAK7D,OAElDA,KAAKqC,SAAS,QAChB,CAOA,wBAAMuB,CAAmBE,GACvB,GACEA,EAAWC,UAAUC,EAAA,EAASC,YAC9BH,EAAWC,UAAUC,EAAA,EAASE,cAC9BJ,EAAWK,QAEX,OAAOnE,KAAKiB,6BAEd,MAAOmD,EAAMC,IAAS,SACpB,OAAcP,EAAWlB,QACzBkB,EAAWQ,UAAU/E,aAEhBgF,EAAMC,IAAS,SACpB,QAAYV,EAAWlB,QACvBkB,EAAWQ,UAAU/E,YAOjBkF,EAAiB,QALNzE,KAAK0E,cACAC,kBACpBb,EAAWQ,UAAUM,WACrB5E,KAAKD,qBAEsCyE,WAAeH,UAAcE,UAAaH,IAEvF,GAAIpE,KAAKkB,yBAA2BuD,EAClC,OAAOzE,KAAKiB,6BAEdjB,KAAKkB,wBAA0BuD,EAC/B,MAEMnD,EAAM,wDAFItB,KAAKe,0BACTf,KAAKC,WAC8CwE,IAK/D,OAJAzE,KAAKiB,mCAAqCO,MAAMF,GAC7CuD,MAAM9C,GAAaA,EAASE,SAC5B4C,MAAM5C,GAASA,EAAK6C,YAEhB9E,KAAKiB,4BACd,CAKA,eAAA8D,GACEC,aAAahF,KAAKgB,mBAClB9B,MAAM6F,iBACR,EAGF,QC9QAE,SAASC,eAAe,YAAYC,iBAAiB,UAAWC,KAvChE,SAAiBlF,GACf,MAAMmF,EAAS,IAAI,EAAO,CACxBnF,MACAO,MAAO,gBACPxB,SAAS,IAGXoG,EAAOC,GAAG,UAAU,KACQ,UAAtBD,EAAOE,YACTC,MAAMH,EAAOjE,WACf,IAGF,MAAMqE,UAA0BC,EAAA,EAC9B,WAAA3G,GACE,MAAM4G,EAAUV,SAASW,cAAc,OACvCD,EAAQE,MAAMC,cAAgB,OAC9BH,EAAQE,MAAME,SAAW,WACzBJ,EAAQE,MAAMG,OAAS,MACvBL,EAAQE,MAAMI,KAAO,MACrBN,EAAQO,IACN,qFACFhH,MAAM,CACJyG,QAASA,GAEb,EAGU,IAAIQ,EAAA,EAAI,CAClBC,OAAQ,CAAC,IAAI,IAAM,CAACf,YACpBgB,UAAU,SAAkBC,OAAO,CAAC,IAAIb,IACxCc,OAAQ,MACRC,KAAM,IAAIC,EAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,KAGZ,CAGEC,CAAQxB,EAAMmB,OAAOM,SAAc,IAAEC,MAAM,G","sources":["webpack:///../src/ol/source/Google.js","webpack:///./google.js"],"sourcesContent":["/**\n * @module ol/source/Google\n */\n\nimport ViewHint from '../ViewHint.js';\nimport {getBottomLeft, getTopRight} from '../extent.js';\nimport {toLonLat} from '../proj.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport TileImage from './TileImage.js';\n\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst attributionUrl = 'https://tile.googleapis.com/tile/v1/viewport';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {boolean} [attributionsCollapsible=true] Allow the attributions to be collapsed.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n * @property {Array<string>} [apiOptions] An array of values specifying additional options to apply.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n\n    super({\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US',\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n    if (options.apiOptions) {\n      sessionTokenRequest.apiOptions = options.apiOptions;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.sessionTokenValue_;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportAttribution_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.previousViewportExtent_;\n\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.sessionTokenRequest_),\n    };\n\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [\n      sessionTokenResponse.tileWidth / tilePixelRatio,\n      sessionTokenResponse.tileHeight / tilePixelRatio,\n    ];\n\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n\n    const session = sessionTokenResponse.session;\n    this.sessionTokenValue_ = session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n\n    this.setAttributions(this.fetchAttributions_.bind(this));\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  /**\n   * @param {import('../Map.js').FrameState} frameState The frame state.\n   * @return {Promise<string>} The attributions.\n   * @private\n   */\n  async fetchAttributions_(frameState) {\n    if (\n      frameState.viewHints[ViewHint.ANIMATING] ||\n      frameState.viewHints[ViewHint.INTERACTING] ||\n      frameState.animate\n    ) {\n      return this.previousViewportAttribution_;\n    }\n    const [west, south] = toLonLat(\n      getBottomLeft(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const [east, north] = toLonLat(\n      getTopRight(frameState.extent),\n      frameState.viewState.projection,\n    );\n    const tileGrid = this.getTileGrid();\n    const zoom = tileGrid.getZForResolution(\n      frameState.viewState.resolution,\n      this.zDirection,\n    );\n    const viewportExtent = `zoom=${zoom}&north=${north}&south=${south}&east=${east}&west=${west}`;\n    // check if the extent or zoom has actually changed to avoid unnecessary requests\n    if (this.previousViewportExtent_ == viewportExtent) {\n      return this.previousViewportAttribution_;\n    }\n    this.previousViewportExtent_ = viewportExtent;\n    const session = this.sessionTokenValue_;\n    const key = this.apiKey_;\n    const url = `${attributionUrl}?session=${session}&key=${key}&${viewportExtent}`;\n    this.previousViewportAttribution_ = await fetch(url)\n      .then((response) => response.json())\n      .then((json) => json.copyright);\n\n    return this.previousViewportAttribution_;\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\n\nexport default Google;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Control from '../src/ol/control/Control.js';\nimport {defaults as defaultControls} from '../src/ol/control/defaults.js';\nimport Layer from '../src/ol/layer/WebGLTile.js';\nimport Google from '../src/ol/source/Google.js';\n\nfunction showMap(key) {\n  const source = new Google({\n    key,\n    scale: 'scaleFactor2x',\n    highDpi: true,\n  });\n\n  source.on('change', () => {\n    if (source.getState() === 'error') {\n      alert(source.getError());\n    }\n  });\n\n  class GoogleLogoControl extends Control {\n    constructor() {\n      const element = document.createElement('img');\n      element.style.pointerEvents = 'none';\n      element.style.position = 'absolute';\n      element.style.bottom = '5px';\n      element.style.left = '5px';\n      element.src =\n        'https://developers.google.com/static/maps/documentation/images/google_on_white.png';\n      super({\n        element: element,\n      });\n    }\n  }\n\n  const map = new Map({\n    layers: [new Layer({source})],\n    controls: defaultControls().extend([new GoogleLogoControl()]),\n    target: 'map',\n    view: new View({\n      center: [0, 0],\n      zoom: 2,\n    }),\n  });\n}\n\ndocument.getElementById('key-form').addEventListener('submit', (event) => {\n  showMap(event.target.elements['key'].value);\n});\n"],"names":["Google","TileImage","constructor","options","highDpi","super","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","undefined","transition","zDirection","this","apiKey_","key","error_","sessionTokenRequest","mapType","language","region","imageFormat","scale","layerTypes","styles","overlay","apiOptions","sessionTokenRequest_","sessionTokenValue_","sessionRefreshId_","previousViewportAttribution_","previousViewportExtent_","createSession_","getError","fetchSessionToken","url","config","fetch","createSessionUrl","method","headers","body","JSON","stringify","response","ok","json","Error","error","message","setState","sessionTokenResponse","getTilePixelRatio","tileSize","tileWidth","tileHeight","tileGrid","extent","getProjection","maxZoom","session","tileUrlFunction","tileCoord","pixelRatio","expiry","parseInt","timeout","Math","max","Date","now","setTimeout","setAttributions","fetchAttributions_","bind","frameState","viewHints","ViewHint","ANIMATING","INTERACTING","animate","west","south","viewState","east","north","viewportExtent","getTileGrid","getZForResolution","resolution","then","copyright","disposeInternal","clearTimeout","document","getElementById","addEventListener","event","source","on","getState","alert","GoogleLogoControl","Control","element","createElement","style","pointerEvents","position","bottom","left","src","Map","layers","controls","extend","target","view","View","center","zoom","showMap","elements","value"],"sourceRoot":""}