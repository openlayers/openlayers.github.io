{"version":3,"file":"cog-pyramid.js","mappings":"iKAUA,MAAMA,EAAW,I,SAAI,GAAS,CAC5BC,OAAQ,EAAE,KAAM,GAAI,IAAK,IACzBC,YAAa,CAAC,QAAU,SAAW,UAAY,WAAc,aAC7DC,UAAW,CACT,CAAC,IAAK,KACN,CAAC,KAAM,KACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,SAILC,EAAU,IAAIC,EAAA,EAAe,CACjCC,QCkCK,SAA6BN,EAAUO,GAC5C,MAAMC,EAAc,IAAIC,EAAA,EAAS,IAC3BC,EAAiBV,EAASW,YAChC,OAAO,SAAUV,EAAQW,GACvBJ,EAAYK,cACRH,IACFT,GAAS,QAAgBS,EAAgBT,IAE3C,MAAMa,EAAId,EAASe,kBAAkBH,GAC/BI,EAAgB,GAStB,OARAhB,EAASiB,iBAAiBhB,EAAQa,GAAII,IACpC,MAAMC,EAAMD,EAAUE,WACtB,IAAKZ,EAAYa,YAAYF,GAAM,CACjC,MAAMG,EAASf,EAAQW,GACvBV,EAAYe,IAAIJ,EAAKG,EACvB,CACAN,EAAcQ,KAAKhB,EAAYiB,IAAIN,GAAK,IAEnCH,CACT,CACF,CDtDWU,CACP1B,GACA,EAAEc,EAAGa,EAAGC,KACN,IAAIC,EAAA,EAAQ,CACVvB,QAAS,CACP,CACEwB,IAAK,yDAAyDhB,KAAKc,KAAKD,gBAOxE,IAAII,EAAA,EAAI,CAClBC,OAAQ,MACRC,OAAQ,CAAC7B,GACT8B,KAAM,IAAIC,EAAA,GAAK,CACbC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,gBAAgB,K","sources":["webpack:///./cog-pyramid.js","webpack:///../src/ol/source.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport WebGLTileLayer from '../src/ol/layer/WebGLTile.js';\nimport GeoTIFF from '../src/ol/source/GeoTIFF.js';\nimport {sourcesFromTileGrid} from '../src/ol/source.js';\nimport TileGrid from '../src/ol/tilegrid/TileGrid.js';\n\n// Metadata from https://s2downloads.eox.at/demo/EOxCloudless/2019/rgb/2019_EOxCloudless_rgb.json\n\n// Tile grid of the GeoTIFF pyramid layout\nconst tileGrid = new TileGrid({\n  extent: [-180, -90, 180, 90],\n  resolutions: [0.703125, 0.3515625, 0.17578125, 8.7890625e-2, 4.39453125e-2],\n  tileSizes: [\n    [512, 256],\n    [1024, 512],\n    [2048, 1024],\n    [4096, 2048],\n    [4096, 4096],\n  ],\n});\n\nconst pyramid = new WebGLTileLayer({\n  sources: sourcesFromTileGrid(\n    tileGrid,\n    ([z, x, y]) =>\n      new GeoTIFF({\n        sources: [\n          {\n            url: `https://s2downloads.eox.at/demo/EOxCloudless/2019/rgb/${z}/${y}/${x}.tif`,\n          },\n        ],\n      }),\n  ),\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [pyramid],\n  view: new View({\n    projection: 'EPSG:4326',\n    center: [0, 0],\n    zoom: 0,\n    showFullExtent: true,\n  }),\n});\n","/**\n * @module ol/source\n */\n\nimport {getIntersection} from './extent.js';\nimport LRUCache from './structs/LRUCache.js';\n\nexport {default as BingMaps} from './source/BingMaps.js';\nexport {default as CartoDB} from './source/CartoDB.js';\nexport {default as Cluster} from './source/Cluster.js';\nexport {default as DataTile} from './source/DataTile.js';\nexport {default as GeoTIFF} from './source/GeoTIFF.js';\nexport {default as Google} from './source/Google.js';\nexport {default as IIIF} from './source/IIIF.js';\nexport {default as Image} from './source/Image.js';\nexport {default as ImageArcGISRest} from './source/ImageArcGISRest.js';\nexport {default as ImageCanvas} from './source/ImageCanvas.js';\nexport {default as ImageMapGuide} from './source/ImageMapGuide.js';\nexport {default as ImageStatic} from './source/ImageStatic.js';\nexport {default as ImageTile} from './source/ImageTile.js';\nexport {default as ImageWMS} from './source/ImageWMS.js';\nexport {default as OGCMapTile} from './source/OGCMapTile.js';\nexport {default as OGCVectorTile} from './source/OGCVectorTile.js';\nexport {default as OSM} from './source/OSM.js';\nexport {default as Raster} from './source/Raster.js';\nexport {default as Source} from './source/Source.js';\nexport {default as StadiaMaps} from './source/StadiaMaps.js';\nexport {default as Tile} from './source/Tile.js';\nexport {default as TileArcGISRest} from './source/TileArcGISRest.js';\nexport {default as TileDebug} from './source/TileDebug.js';\nexport {default as TileImage} from './source/TileImage.js';\nexport {default as TileJSON} from './source/TileJSON.js';\nexport {default as TileWMS} from './source/TileWMS.js';\nexport {default as UrlTile} from './source/UrlTile.js';\nexport {default as UTFGrid} from './source/UTFGrid.js';\nexport {default as Vector} from './source/Vector.js';\nexport {default as VectorTile} from './source/VectorTile.js';\nexport {default as WMTS} from './source/WMTS.js';\nexport {default as XYZ} from './source/XYZ.js';\nexport {default as Zoomify} from './source/Zoomify.js';\nexport {createLoader as createWMSLoader} from './source/wms.js';\nexport {createLoader as createArcGISRestLoader} from './source/arcgisRest.js';\nexport {createLoader as createStaticLoader} from './source/static.js';\nexport {createLoader as createMapGuideLoader} from './source/mapguide.js';\n\n/**\n * Creates a sources function from a tile grid. This function can be used as value for the\n * `sources` property of the {@link module:ol/layer/Layer~Layer} subclasses that support it.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @param {function(import(\"./tilecoord.js\").TileCoord): import(\"./source/Source.js\").default} factory Source factory.\n * This function takes a {@link module:ol/tilecoord~TileCoord} as argument and is expected to return a\n * {@link module:ol/source/Source~Source}. **Note**: The returned sources should have a tile grid with\n * a limited set of resolutions, matching the resolution range of a single zoom level of the pyramid\n * `tileGrid` that `sourcesFromTileGrid` was called with.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./source/Source.js\").default>} Sources function.\n * @api\n */\nexport function sourcesFromTileGrid(tileGrid, factory) {\n  const sourceCache = new LRUCache(32);\n  const tileGridExtent = tileGrid.getExtent();\n  return function (extent, resolution) {\n    sourceCache.expireCache();\n    if (tileGridExtent) {\n      extent = getIntersection(tileGridExtent, extent);\n    }\n    const z = tileGrid.getZForResolution(resolution);\n    const wantedSources = [];\n    tileGrid.forEachTileCoord(extent, z, (tileCoord) => {\n      const key = tileCoord.toString();\n      if (!sourceCache.containsKey(key)) {\n        const source = factory(tileCoord);\n        sourceCache.set(key, source);\n      }\n      wantedSources.push(sourceCache.get(key));\n    });\n    return wantedSources;\n  };\n}\n"],"names":["tileGrid","extent","resolutions","tileSizes","pyramid","WebGLTile","sources","factory","sourceCache","LRUCache","tileGridExtent","getExtent","resolution","expireCache","z","getZForResolution","wantedSources","forEachTileCoord","tileCoord","key","toString","containsKey","source","set","push","get","sourcesFromTileGrid","x","y","GeoTIFF","url","Map","target","layers","view","View","projection","center","zoom","showFullExtent"],"sourceRoot":""}