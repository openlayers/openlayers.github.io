{"version":3,"file":"custom-hit-detection-renderer.js","mappings":"4MAWA,MAAMA,GAAuB,QAAW,EAAE,SAAU,WAC9CC,EAAkB,yBAClBC,EAAY,kBAElB,IAAIC,EAAqB,KAEzB,MAAMC,EAAkB,CAACC,EAAKC,EAAGC,EAAGC,KAClCH,EAAII,UAAY,kBAChBJ,EAAIK,YAAcF,EAClBH,EAAIM,UAAY,EAChBN,EAAIO,UAAY,SAChBP,EAAIQ,aAAe,SACnBR,EAAIS,KAAO,oBACXT,EAAIU,OAAS,gCACbV,EAAIW,SAASd,EAAWI,EAAGC,GAC3BF,EAAIY,WAAWf,EAAWI,EAAGC,EAAE,EAG3BW,EAAgB,IAAI,IAAQ,CAChCC,SAAU,IAAI,IAAOnB,EAAsB,MAG7CkB,EAAcE,IAAI,cAAenB,GAEjCiB,EAAcG,SACZ,IAAI,KAAM,CACR,QAAAC,CAASC,EAAaC,GACpB,OAAQlB,EAAGC,IAAKkB,EAAIC,IAAOH,EACrBlB,EAAMmB,EAAMG,QACZC,EAAKH,EAAKnB,EACVuB,EAAKH,EAAKnB,EACVuB,EAASC,KAAKC,KAAKJ,EAAKA,EAAKC,EAAKA,GAGlCI,EAAuB,IAATH,EAEdI,EAAW7B,EAAI8B,qBACnB7B,EACAC,EALkB,EAOlBD,EACAC,EACA0B,GAEFC,EAASE,aAAa,EAAG,mBACzBF,EAASE,aAAa,GAAK,qBAC3BF,EAASE,aAAa,EAAG,qBACzB/B,EAAIgC,YACJhC,EAAIiC,IAAIhC,EAAGC,EAAGuB,EAAQ,EAAG,EAAIC,KAAKQ,IAAI,GACtClC,EAAII,UAAYyB,EAChB7B,EAAImC,OACJnC,EAAIK,YAAc,kBAClBL,EAAIG,SAEJJ,EAAgBC,EAAKC,EAAGC,EAAGW,EAAcuB,IAAI,eAC/C,EACA,oBAAAC,CAAqBnB,EAAaC,GAChC,MAAOlB,EAAGC,GAAKgB,EAAY,GACrBlB,EAAMmB,EAAMG,QAClBvB,EAAgBC,EAAKC,EAAGC,EAAGW,EAAcuB,IAAI,eAC/C,KAIJ,MAAME,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,IACZC,SAAS,IAEX,IAAI,IAAY,CACdD,OAAQ,IAAI,IAAa,CACvBE,SAAU,CAAC7B,QAIjB8B,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQlD,EACRmD,KAAM,OAIVR,EAAIS,GAAG,eAAgBC,IACrB,MAAMC,EAAcX,EAAIY,sBAAsBF,EAAIG,OAAQC,IACxDA,EAAQrC,IAAI,cAAe,uBACpBqC,KAGLtD,GAAsBA,GAAsBmD,GAC9CnD,EAAmBiB,IAAI,cAAenB,GAExCE,EAAqBmD,CAAW,G","sources":["webpack:///./custom-hit-detection-renderer.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Circle from '../src/ol/geom/Circle.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst columbusCircleCoords = fromLonLat([-73.98189, 40.76805]);\nconst labelTextStroke = 'rgba(120, 120, 120, 1)';\nconst labelText = 'Columbus Circle';\n\nlet pointerOverFeature = null;\n\nconst renderLabelText = (ctx, x, y, stroke) => {\n  ctx.fillStyle = 'rgba(255,0,0,1)';\n  ctx.strokeStyle = stroke;\n  ctx.lineWidth = 1;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.font = `bold 30px verdana`;\n  ctx.filter = 'drop-shadow(7px 7px 2px #e81)';\n  ctx.fillText(labelText, x, y);\n  ctx.strokeText(labelText, x, y);\n};\n\nconst circleFeature = new Feature({\n  geometry: new Circle(columbusCircleCoords, 50),\n});\n\ncircleFeature.set('label-color', labelTextStroke);\n\ncircleFeature.setStyle(\n  new Style({\n    renderer(coordinates, state) {\n      const [[x, y], [x1, y1]] = coordinates;\n      const ctx = state.context;\n      const dx = x1 - x;\n      const dy = y1 - y;\n      const radius = Math.sqrt(dx * dx + dy * dy);\n\n      const innerRadius = 0;\n      const outerRadius = radius * 1.4;\n\n      const gradient = ctx.createRadialGradient(\n        x,\n        y,\n        innerRadius,\n        x,\n        y,\n        outerRadius,\n      );\n      gradient.addColorStop(0, 'rgba(255,0,0,0)');\n      gradient.addColorStop(0.6, 'rgba(255,0,0,0.2)');\n      gradient.addColorStop(1, 'rgba(255,0,0,0.8)');\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, true);\n      ctx.fillStyle = gradient;\n      ctx.fill();\n      ctx.strokeStyle = 'rgba(255,0,0,1)';\n      ctx.stroke();\n\n      renderLabelText(ctx, x, y, circleFeature.get('label-color'));\n    },\n    hitDetectionRenderer(coordinates, state) {\n      const [x, y] = coordinates[0];\n      const ctx = state.context;\n      renderLabelText(ctx, x, y, circleFeature.get('label-color'));\n    },\n  }),\n);\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n      visible: true,\n    }),\n    new VectorLayer({\n      source: new VectorSource({\n        features: [circleFeature],\n      }),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: columbusCircleCoords,\n    zoom: 19,\n  }),\n});\n\nmap.on('pointermove', (evt) => {\n  const featureOver = map.forEachFeatureAtPixel(evt.pixel, (feature) => {\n    feature.set('label-color', 'rgba(255,255,255,1)');\n    return feature;\n  });\n\n  if (pointerOverFeature && pointerOverFeature != featureOver) {\n    pointerOverFeature.set('label-color', labelTextStroke);\n  }\n  pointerOverFeature = featureOver;\n});\n"],"names":["columbusCircleCoords","labelTextStroke","labelText","pointerOverFeature","renderLabelText","ctx","x","y","stroke","fillStyle","strokeStyle","lineWidth","textAlign","textBaseline","font","filter","fillText","strokeText","circleFeature","geometry","set","setStyle","renderer","coordinates","state","x1","y1","context","dx","dy","radius","Math","sqrt","outerRadius","gradient","createRadialGradient","addColorStop","beginPath","arc","PI","fill","get","hitDetectionRenderer","map","layers","source","visible","features","target","view","center","zoom","on","evt","featureOver","forEachFeatureAtPixel","pixel","feature"],"sourceRoot":""}