{"version":3,"file":"modify-scale-and-rotate.js","mappings":"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","sources":["webpack:///./modify-scale-and-rotate.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  never,\n  platformModifierKeyOnly,\n  primaryAction,\n} from '../src/ol/events/condition.js';\nimport {getCenter, getHeight, getWidth} from '../src/ol/extent.js';\nimport MultiPoint from '../src/ol/geom/MultiPoint.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport Modify from '../src/ol/interaction/Modify.js';\nimport Translate from '../src/ol/interaction/Translate.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst style = new Style({\n  geometry: function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    return modifyGeometry ? modifyGeometry.geometry : feature.getGeometry();\n  },\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: '#ffcc33',\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: '#ffcc33',\n    }),\n  }),\n});\n\nfunction calculateCenter(geometry) {\n  let center, coordinates, minRadius;\n  const type = geometry.getType();\n  if (type === 'Polygon') {\n    let x = 0;\n    let y = 0;\n    let i = 0;\n    coordinates = geometry.getCoordinates()[0].slice(1);\n    coordinates.forEach(function (coordinate) {\n      x += coordinate[0];\n      y += coordinate[1];\n      i++;\n    });\n    center = [x / i, y / i];\n  } else if (type === 'LineString') {\n    center = geometry.getCoordinateAt(0.5);\n    coordinates = geometry.getCoordinates();\n  } else {\n    center = getCenter(geometry.getExtent());\n  }\n  let sqDistances;\n  if (coordinates) {\n    sqDistances = coordinates.map(function (coordinate) {\n      const dx = coordinate[0] - center[0];\n      const dy = coordinate[1] - center[1];\n      return dx * dx + dy * dy;\n    });\n    minRadius = Math.sqrt(Math.max.apply(Math, sqDistances)) / 3;\n  } else {\n    minRadius =\n      Math.max(\n        getWidth(geometry.getExtent()),\n        getHeight(geometry.getExtent()),\n      ) / 3;\n  }\n  return {\n    center: center,\n    coordinates: coordinates,\n    minRadius: minRadius,\n    sqDistances: sqDistances,\n  };\n}\n\nconst vector = new VectorLayer({\n  source: source,\n  style: function (feature) {\n    const styles = [style];\n    const modifyGeometry = feature.get('modifyGeometry');\n    const geometry = modifyGeometry\n      ? modifyGeometry.geometry\n      : feature.getGeometry();\n    const result = calculateCenter(geometry);\n    const center = result.center;\n    if (center) {\n      styles.push(\n        new Style({\n          geometry: new Point(center),\n          image: new CircleStyle({\n            radius: 4,\n            fill: new Fill({\n              color: '#ff3333',\n            }),\n          }),\n        }),\n      );\n      const coordinates = result.coordinates;\n      if (coordinates) {\n        const minRadius = result.minRadius;\n        const sqDistances = result.sqDistances;\n        const rsq = minRadius * minRadius;\n        const points = coordinates.filter(function (coordinate, index) {\n          return sqDistances[index] > rsq;\n        });\n        styles.push(\n          new Style({\n            geometry: new MultiPoint(points),\n            image: new CircleStyle({\n              radius: 4,\n              fill: new Fill({\n                color: '#33cc33',\n              }),\n            }),\n          }),\n        );\n      }\n    }\n    return styles;\n  },\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4,\n  }),\n});\n\nconst defaultStyle = new Modify({source: source})\n  .getOverlay()\n  .getStyleFunction();\n\nconst modify = new Modify({\n  source: source,\n  condition: function (event) {\n    return primaryAction(event) && !platformModifierKeyOnly(event);\n  },\n  deleteCondition: never,\n  insertVertexCondition: never,\n  style: function (feature, resolution) {\n    feature.get('features').forEach(function (modifyFeature) {\n      const modifyGeometry = modifyFeature.get('modifyGeometry');\n      if (modifyGeometry) {\n        const point = feature.getGeometry().getCoordinates();\n        let modifyPoint = modifyGeometry.point;\n        if (!modifyPoint) {\n          // save the initial geometry and vertex position\n          modifyPoint = point;\n          modifyGeometry.point = modifyPoint;\n          modifyGeometry.geometry0 = modifyGeometry.geometry;\n          // get anchor and minimum radius of vertices to be used\n          const result = calculateCenter(modifyGeometry.geometry0);\n          modifyGeometry.center = result.center;\n          modifyGeometry.minRadius = result.minRadius;\n        }\n\n        const center = modifyGeometry.center;\n        const minRadius = modifyGeometry.minRadius;\n        let dx, dy;\n        dx = modifyPoint[0] - center[0];\n        dy = modifyPoint[1] - center[1];\n        const initialRadius = Math.sqrt(dx * dx + dy * dy);\n        if (initialRadius > minRadius) {\n          const initialAngle = Math.atan2(dy, dx);\n          dx = point[0] - center[0];\n          dy = point[1] - center[1];\n          const currentRadius = Math.sqrt(dx * dx + dy * dy);\n          if (currentRadius > 0) {\n            const currentAngle = Math.atan2(dy, dx);\n            const geometry = modifyGeometry.geometry0.clone();\n            geometry.scale(currentRadius / initialRadius, undefined, center);\n            geometry.rotate(currentAngle - initialAngle, center);\n            modifyGeometry.geometry = geometry;\n          }\n        }\n      }\n    });\n    return defaultStyle(feature, resolution);\n  },\n});\n\nmodify.on('modifystart', function (event) {\n  event.features.forEach(function (feature) {\n    feature.set(\n      'modifyGeometry',\n      {geometry: feature.getGeometry().clone()},\n      true,\n    );\n  });\n});\n\nmodify.on('modifyend', function (event) {\n  event.features.forEach(function (feature) {\n    const modifyGeometry = feature.get('modifyGeometry');\n    if (modifyGeometry) {\n      feature.setGeometry(modifyGeometry.geometry);\n      feature.unset('modifyGeometry', true);\n    }\n  });\n});\n\nmap.addInteraction(modify);\nmap.addInteraction(\n  new Translate({\n    condition: function (event) {\n      return primaryAction(event) && platformModifierKeyOnly(event);\n    },\n    layers: [vector],\n  }),\n);\n\nlet draw; // global so we can remove it later\nconst typeSelect = document.getElementById('type');\n\nfunction addInteractions() {\n  draw = new Draw({\n    source: source,\n    type: typeSelect.value,\n  });\n  map.addInteraction(draw);\n}\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteractions();\n};\n\naddInteractions();\n"],"names":["raster","source","style","geometry","feature","modifyGeometry","get","getGeometry","fill","color","stroke","width","image","radius","calculateCenter","center","coordinates","minRadius","type","getType","x","y","i","getCoordinates","slice","forEach","coordinate","getCoordinateAt","getExtent","sqDistances","map","dx","dy","Math","sqrt","max","apply","vector","styles","result","push","rsq","points","filter","index","layers","target","view","zoom","defaultStyle","getOverlay","getStyleFunction","modify","condition","event","deleteCondition","insertVertexCondition","resolution","modifyFeature","point","modifyPoint","geometry0","initialRadius","initialAngle","atan2","currentRadius","currentAngle","clone","scale","undefined","rotate","draw","on","features","set","setGeometry","unset","addInteraction","typeSelect","document","getElementById","addInteractions","value","onchange","removeInteraction"],"sourceRoot":""}