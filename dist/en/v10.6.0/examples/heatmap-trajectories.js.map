{"version":3,"file":"heatmap-trajectories.js","mappings":"sLASA,MAAMA,EAAOC,SAASC,eAAe,QAC/BC,EAASF,SAASC,eAAe,UAEjCE,EAAU,IAAI,IAAa,CAC/BC,OAAQ,IAAI,IAAa,CACvBC,IAAK,sCACLC,OAAQ,IAAI,IACZC,aAAc,8BAEhBR,KAAM,CAAC,IAAK,CAAC,MAAO,QAAS,GAC7BG,OAAQ,CAAC,IAAK,CAAC,MAAO,UAAW,GACjCM,UAAW,CACTT,KAAMU,SAASV,EAAKW,MAAO,IAC3BR,OAAQO,SAASP,EAAOQ,MAAO,IAC/BC,SAAU,OAEZC,OAAQ,CACN,MACA,CAAC,KAAM,CAAC,MAAO,YAAa,OAC5B,CAAC,KAAM,CAAC,MAAO,YAAa,CAAC,MAAO,cAEtCC,OAAQ,IAAM,KAGVC,EAAS,IAAI,IAAU,CAC3BV,OAAQ,IAAI,IAAW,CACrBW,MAAO,0BAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACH,EAAQX,GACjBe,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,MAAO,QAC3BC,KAAM,OAIVtB,EAAKuB,iBAAiB,SAAS,WAC7BnB,EAAQoB,qBAAqB,CAACxB,KAAMU,SAASV,EAAKW,MAAO,KAC3D,IAEAR,EAAOoB,iBAAiB,SAAS,WAC/BnB,EAAQoB,qBAAqB,CAACrB,OAAQO,SAASP,EAAOQ,MAAO,KAC/D,IAEA,MAAMc,EAAiBxB,SAASC,eAAe,mBAC/CuB,EAAeF,iBAAiB,SAAS,WACvCnB,EAAQoB,qBAAqB,CAACZ,SAAUa,EAAed,QACvDM,EAAIS,QACN,G","sources":["webpack:///./heatmap-trajectories.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport HeatmapLayer from '../src/ol/layer/Heatmap.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport StadiaMaps from '../src/ol/source/StadiaMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst blur = document.getElementById('blur');\nconst radius = document.getElementById('radius');\n\nconst heatmap = new HeatmapLayer({\n  source: new VectorSource({\n    url: 'data/geojson/ship-trajectories.json',\n    format: new GeoJSON(),\n    attributions: 'Danish Maritime Authority',\n  }),\n  blur: ['/', ['var', 'blur'], 2],\n  radius: ['/', ['var', 'radius'], 2],\n  variables: {\n    blur: parseInt(blur.value, 10),\n    radius: parseInt(radius.value, 10),\n    shipType: 'All',\n  },\n  filter: [\n    'any',\n    ['==', ['var', 'shipType'], 'All'],\n    ['==', ['var', 'shipType'], ['get', 'ShipType']],\n  ],\n  weight: () => 0.1,\n});\n\nconst raster = new TileLayer({\n  source: new StadiaMaps({\n    layer: 'alidade_smooth_dark',\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, heatmap /*vector*/],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([11.86, 57.67]),\n    zoom: 12,\n  }),\n});\n\nblur.addEventListener('input', function () {\n  heatmap.updateStyleVariables({blur: parseInt(blur.value, 10)});\n});\n\nradius.addEventListener('input', function () {\n  heatmap.updateStyleVariables({radius: parseInt(radius.value, 10)});\n});\n\nconst shipTypeSelect = document.getElementById('shiptype-filter');\nshipTypeSelect.addEventListener('input', function () {\n  heatmap.updateStyleVariables({shipType: shipTypeSelect.value});\n  map.render();\n});\n"],"names":["blur","document","getElementById","radius","heatmap","source","url","format","attributions","variables","parseInt","value","shipType","filter","weight","raster","layer","map","layers","target","view","center","zoom","addEventListener","updateStyleVariables","shipTypeSelect","render"],"sourceRoot":""}