{"version":3,"file":"line-arrows.js","mappings":"iOAaA,MAAMA,EAAS,IAAI,IAAU,CAC3BC,OAAQ,IAAI,MAGRA,EAAS,IAAI,IAkCbC,EAAS,IAAI,IAAY,CAC7BD,OAAQA,EACRE,MAlCoB,SAAUC,GAC9B,MAAMC,EAAWD,EAAQE,cACnBC,EAAS,CAEb,IAAI,KAAM,CACRC,OAAQ,IAAI,IAAO,CACjBC,MAAO,UACPC,MAAO,OAuBb,OAlBAL,EAASM,gBAAe,SAAUC,EAAOC,GACvC,MAAMC,EAAKD,EAAI,GAAKD,EAAM,GACpBG,EAAKF,EAAI,GAAKD,EAAM,GACpBI,EAAWC,KAAKC,MAAMH,EAAID,GAEhCP,EAAOY,KACL,IAAI,KAAM,CACRd,SAAU,IAAI,IAAMQ,GACpBO,MAAO,IAAI,IAAK,CACdC,IAAK,iBACLC,OAAQ,CAAC,IAAM,IACfC,gBAAgB,EAChBP,UAAWA,MAInB,IAEOT,CACT,IAQMiB,GAAS,QAAI,aAAaC,YAAYC,QAC5CF,EAAO,IAAMA,EAAO,GACpBA,EAAO,IAAMA,EAAO,GAER,IAAI,IAAI,CAClBG,OAAQ,CAAC3B,EAAQE,GACjB0B,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,EAAE,KAAU,MACpBC,KAAM,EACNP,aAIAQ,eACF,IAAI,KAAK,CACP/B,OAAQA,EACRgC,KAAM,e","sources":["webpack:///./line-arrows.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {get} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport Icon from '../src/ol/style/Icon.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst styleFunction = function (feature) {\n  const geometry = feature.getGeometry();\n  const styles = [\n    // linestring\n    new Style({\n      stroke: new Stroke({\n        color: '#ffcc33',\n        width: 2,\n      }),\n    }),\n  ];\n\n  geometry.forEachSegment(function (start, end) {\n    const dx = end[0] - start[0];\n    const dy = end[1] - start[1];\n    const rotation = Math.atan2(dy, dx);\n    // arrows\n    styles.push(\n      new Style({\n        geometry: new Point(end),\n        image: new Icon({\n          src: 'data/arrow.png',\n          anchor: [0.75, 0.5],\n          rotateWithView: true,\n          rotation: -rotation,\n        }),\n      }),\n    );\n  });\n\n  return styles;\n};\nconst vector = new VectorLayer({\n  source: source,\n  style: styleFunction,\n});\n\n// Limit multi-world panning to one world east and west of the real world.\n// Geometry coordinates have to be within that range.\nconst extent = get('EPSG:3857').getExtent().slice();\nextent[0] += extent[0];\nextent[2] += extent[2];\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4,\n    extent,\n  }),\n});\n\nmap.addInteraction(\n  new Draw({\n    source: source,\n    type: 'LineString',\n  }),\n);\n"],"names":["raster","source","vector","style","feature","geometry","getGeometry","styles","stroke","color","width","forEachSegment","start","end","dx","dy","rotation","Math","atan2","push","image","src","anchor","rotateWithView","extent","getExtent","slice","layers","target","view","center","zoom","addInteraction","type"],"sourceRoot":""}