{"version":3,"file":"vector-osm.js","mappings":"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","sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport {extend} from '../array.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {makeStructureNS, pushParseAndPop} from '../xml.js';\nimport {transformGeometryWithOptions} from './Feature.js';\nimport XMLFeature from './XMLFeature.js';\n\n/**\n * @const\n * @type {Array<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay,\n});\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nclass OSMXML extends XMLFeature {\n  constructor() {\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    options = this.getReadOptions(node, options);\n    if (node.localName == 'osm') {\n      const state = pushParseAndPop(\n        {\n          nodes: {},\n          ways: [],\n          features: [],\n        },\n        PARSERS,\n        node,\n        [options],\n      );\n      // parse nodes in ways\n      for (let j = 0; j < state.ways.length; j++) {\n        const values = /** @type {Object} */ (state.ways[j]);\n        /** @type {Array<number>} */\n        const flatCoordinates = values.flatCoordinates;\n        if (!flatCoordinates.length) {\n          for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n            const point = state.nodes[values.ndrefs[i]];\n            extend(flatCoordinates, point);\n          }\n        }\n        let geometry;\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, 'XY', [\n            flatCoordinates.length,\n          ]);\n        } else {\n          geometry = new LineString(flatCoordinates, 'XY');\n        }\n        transformGeometryWithOptions(geometry, false, options);\n        const feature = new Feature(geometry);\n        if (values.id !== undefined) {\n          feature.setId(values.id);\n        }\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n      if (state.features) {\n        return state.features;\n      }\n    }\n    return [];\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat')),\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop(\n    {\n      tags: {},\n    },\n    NODE_PARSERS,\n    node,\n    objectStack,\n  );\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    if (id !== undefined) {\n      feature.setId(id);\n    }\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop(\n    {\n      id: id,\n      ndrefs: [],\n      flatCoordinates: [],\n      tags: {},\n    },\n    WAY_PARSERS,\n    node,\n    objectStack,\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n  if (node.hasAttribute('lon') && node.hasAttribute('lat')) {\n    values.flatCoordinates.push(parseFloat(node.getAttribute('lon')));\n    values.flatCoordinates.push(parseFloat(node.getAttribute('lat')));\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\nimport ImageTile from '../src/ol/source/ImageTile.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)',\n      }),\n    }),\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)',\n      }),\n    }),\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2,\n      }),\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3,\n      }),\n    }),\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1,\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)',\n      }),\n    }),\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)',\n        }),\n        stroke: null,\n      }),\n    }),\n  },\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function (extent, resolution, projection, success, failure) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function () {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection(),\n      });\n      vectorSource.addFeatures(features);\n      success(features);\n    });\n    client.addEventListener('error', failure);\n    const query =\n      '(node(' +\n      epsg4326Extent[1] +\n      ',' +\n      Math.max(epsg4326Extent[0], -180) +\n      ',' +\n      epsg4326Extent[3] +\n      ',' +\n      Math.min(epsg4326Extent[2], 180) +\n      ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy,\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  },\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new ImageTile({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/maps/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    tileSize: 512,\n    maxZoom: 20,\n  }),\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17,\n  }),\n});\n"],"names":["NAMESPACE_URIS","WAY_PARSERS","node","objectStack","values","length","ndrefs","push","getAttribute","hasAttribute","flatCoordinates","parseFloat","readTag","PARSERS","options","state","id","coordinates","nodes","tags","NODE_PARSERS","geometry","Point","feature","Feature","undefined","setId","setProperties","features","ways","OSMXML","XMLFeature","constructor","super","this","dataProjection","readFeaturesFromNode","getReadOptions","localName","j","i","ii","point","Polygon","LineString","map","styles","Style","stroke","Stroke","color","width","fill","Fill","zIndex","image","Circle","radius","vectorSource","format","loader","extent","resolution","projection","success","failure","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","query","Math","max","min","send","strategy","vector","Vector","source","style","key","value","get","regexp","RegExp","test","raster","Tile","ImageTile","attributions","url","tileSize","maxZoom","Map","layers","target","document","getElementById","view","View","center","zoom"],"sourceRoot":""}