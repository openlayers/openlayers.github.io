{"version":3,"file":"external-map.js","mappings":"oLASA,MAAMA,UAAqB,IACzB,WAAAC,GACEC,MAAM,CACJC,QAASC,SAASC,cAAc,SAElCC,KAAKH,QAAQI,aAAa,SAAU,UACpCD,KAAKH,QAAQK,UAAY,UACzBF,KAAKH,QAAQM,UAAY,2BAC3B,EAGF,MAAMC,EAAiBN,SAASO,eAAe,OAEzCC,EAAM,IAAI,IAAI,CAClBC,OAAQH,EACRI,UAAU,SAAkBC,OAAO,CAAC,IAAI,IAAc,IAAIf,IAC1DgB,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,MAAO,OAC3BC,KAAM,MAIV,IAAIC,EACJ,SAASC,IACHD,IACFA,EAAUE,QACVF,OAAYG,EAEhB,CAEAC,OAAOC,iBAAiB,WAAYJ,GAEpC,MAAMK,EAASvB,SAASO,eAAe,uBAEvC,SAASiB,IACPlB,EAAemB,MAAMC,OAAS,GAC9BlB,EAAImB,UAAUrB,GACdiB,EAAOK,UAAW,CACpB,CAEA,SAASC,IACP,IAAKZ,EACH,OAEF,MAAMa,EAAoBb,EAAUjB,SAASO,eAAe,OACvDuB,IAG4B,YAA7B9B,SAAS+B,iBAEXD,EAAkBE,UAAUC,OAAO,YACnCH,EAAkB3B,aAAa,WAAY,KAC3C2B,EAAkBI,UAGlBJ,EAAkBK,gBAAgB,YAClCL,EAAkBE,UAAUI,IAAI,aAEpC,CACAf,OAAOC,iBAAiB,mBAAoBO,GAE5CN,EAAOD,iBAAiB,SAAS,WAC/B,MAAMe,EAAgBrC,SAASO,eAAe,kBAC9C8B,EAAclC,aAAa,SAAU,UACrCoB,EAAOK,UAAW,EAGlB,IAAIU,EAAaC,YAAW,WAC1BrB,IACAM,IACAa,EAAcF,gBAAgB,UAC9BG,OAAalB,CACf,GAAG,KAEHH,EAAYI,OAAOmB,KACjB,kCACA,YACA,uDAEFvB,EAAUK,iBAAiB,oBAAoB,WAC7C,MAAMQ,EAAoBb,EAAUjB,SAASO,eAAe,OAC5DD,EAAemB,MAAMC,OAAS,MAC9BlB,EAAImB,UAAUG,GAEVQ,IACFG,aAAaH,GACbA,OAAalB,GAEfH,EAAUK,iBAAiB,YAAY,WACrCE,IAEAN,GACF,IAEAW,GACF,GACF,G","sources":["webpack:///./external-map.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Control from '../src/ol/control/Control.js';\nimport FullScreen from '../src/ol/control/FullScreen.js';\nimport {defaults as defaultControls} from '../src/ol/control/defaults.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nclass UnusableMask extends Control {\n  constructor() {\n    super({\n      element: document.createElement('div'),\n    });\n    this.element.setAttribute('hidden', 'hidden');\n    this.element.className = 'ol-mask';\n    this.element.innerHTML = '<div>Map not usable</div>';\n  }\n}\n\nconst localMapTarget = document.getElementById('map');\n\nconst map = new Map({\n  target: localMapTarget,\n  controls: defaultControls().extend([new FullScreen(), new UnusableMask()]),\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  view: new View({\n    center: fromLonLat([37.41, 8.82]),\n    zoom: 4,\n  }),\n});\n\nlet mapWindow;\nfunction closeMapWindow() {\n  if (mapWindow) {\n    mapWindow.close();\n    mapWindow = undefined;\n  }\n}\n// Close external window in case the main page is closed or reloaded\nwindow.addEventListener('pagehide', closeMapWindow);\n\nconst button = document.getElementById('external-map-button');\n\nfunction resetMapTarget() {\n  localMapTarget.style.height = '';\n  map.setTarget(localMapTarget);\n  button.disabled = false;\n}\n\nfunction updateOverlay() {\n  if (!mapWindow) {\n    return;\n  }\n  const externalMapTarget = mapWindow.document.getElementById('map');\n  if (!externalMapTarget) {\n    return;\n  }\n  if (document.visibilityState === 'visible') {\n    // Show controls and enable keyboard input\n    externalMapTarget.classList.remove('unusable');\n    externalMapTarget.setAttribute('tabindex', '0');\n    externalMapTarget.focus();\n  } else {\n    // Hide all controls and disable keyboard input\n    externalMapTarget.removeAttribute('tabindex');\n    externalMapTarget.classList.add('unusable');\n  }\n}\nwindow.addEventListener('visibilitychange', updateOverlay);\n\nbutton.addEventListener('click', function () {\n  const blockerNotice = document.getElementById('blocker-notice');\n  blockerNotice.setAttribute('hidden', 'hidden');\n  button.disabled = true;\n\n  // Reset button and map target in case window did not load or open\n  let timeoutKey = setTimeout(function () {\n    closeMapWindow();\n    resetMapTarget();\n    blockerNotice.removeAttribute('hidden');\n    timeoutKey = undefined;\n  }, 3000);\n\n  mapWindow = window.open(\n    'resources/external-map-map.html',\n    'MapWindow',\n    'toolbar=0,location=0,menubar=0,width=800,height=600',\n  );\n  mapWindow.addEventListener('DOMContentLoaded', function () {\n    const externalMapTarget = mapWindow.document.getElementById('map');\n    localMapTarget.style.height = '0px';\n    map.setTarget(externalMapTarget);\n\n    if (timeoutKey) {\n      clearTimeout(timeoutKey);\n      timeoutKey = undefined;\n    }\n    mapWindow.addEventListener('pagehide', function () {\n      resetMapTarget();\n      // Close window in case user does a page reload\n      closeMapWindow();\n    });\n\n    updateOverlay();\n  });\n});\n"],"names":["UnusableMask","constructor","super","element","document","createElement","this","setAttribute","className","innerHTML","localMapTarget","getElementById","map","target","controls","extend","layers","source","view","center","zoom","mapWindow","closeMapWindow","close","undefined","window","addEventListener","button","resetMapTarget","style","height","setTarget","disabled","updateOverlay","externalMapTarget","visibilityState","classList","remove","focus","removeAttribute","add","blockerNotice","timeoutKey","setTimeout","open","clearTimeout"],"sourceRoot":""}