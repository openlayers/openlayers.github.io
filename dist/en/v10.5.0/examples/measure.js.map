{"version":3,"file":"measure.js","mappings":"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","sources":["webpack:///./measure.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport {unByKey} from '../src/ol/Observable.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Polygon from '../src/ol/geom/Polygon.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst source = new VectorSource();\n\nconst vector = new VectorLayer({\n  source: source,\n  style: {\n    'fill-color': 'rgba(255, 255, 255, 0.2)',\n    'stroke-color': '#ffcc33',\n    'stroke-width': 2,\n    'circle-radius': 7,\n    'circle-fill-color': '#ffcc33',\n  },\n});\n\n/**\n * Currently drawn feature.\n * @type {import('../src/ol/Feature.js').default}\n */\nlet sketch;\n\n/**\n * The help tooltip element.\n * @type {HTMLElement}\n */\nlet helpTooltipElement;\n\n/**\n * Overlay to show the help messages.\n * @type {Overlay}\n */\nlet helpTooltip;\n\n/**\n * The measure tooltip element.\n * @type {HTMLElement}\n */\nlet measureTooltipElement;\n\n/**\n * Overlay to show the measurement.\n * @type {Overlay}\n */\nlet measureTooltip;\n\n/**\n * Message to show when the user is drawing a polygon.\n * @type {string}\n */\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\n\n/**\n * Message to show when the user is drawing a line.\n * @type {string}\n */\nconst continueLineMsg = 'Click to continue drawing the line';\n\n/**\n * Handle pointer move.\n * @param {import('../src/ol/MapBrowserEvent').default} evt The event.\n */\nconst pointerMoveHandler = function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  let helpMsg = 'Click to start drawing';\n\n  if (sketch) {\n    const geom = sketch.getGeometry();\n    if (geom instanceof Polygon) {\n      helpMsg = continuePolygonMsg;\n    } else if (geom instanceof LineString) {\n      helpMsg = continueLineMsg;\n    }\n  }\n\n  helpTooltipElement.innerHTML = helpMsg;\n  helpTooltip.setPosition(evt.coordinate);\n\n  helpTooltipElement.classList.remove('hidden');\n};\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15,\n  }),\n});\n\nmap.on('pointermove', pointerMoveHandler);\n\nmap.getViewport().addEventListener('mouseout', function () {\n  helpTooltipElement.classList.add('hidden');\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\n\n/**\n * Format length output.\n * @param {LineString} line The line.\n * @return {string} The formatted length.\n */\nconst formatLength = function (line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';\n  } else {\n    output = Math.round(length * 100) / 100 + ' ' + 'm';\n  }\n  return output;\n};\n\n/**\n * Format area output.\n * @param {Polygon} polygon The polygon.\n * @return {string} Formatted area.\n */\nconst formatArea = function (polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = Math.round((area / 1000000) * 100) / 100 + ' ' + 'km<sup>2</sup>';\n  } else {\n    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n};\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.2)',\n  }),\n  stroke: new Stroke({\n    color: 'rgba(0, 0, 0, 0.5)',\n    lineDash: [10, 10],\n    width: 2,\n  }),\n  image: new CircleStyle({\n    radius: 5,\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 0.7)',\n    }),\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)',\n    }),\n  }),\n});\n\nfunction addInteraction() {\n  const type = typeSelect.value == 'area' ? 'Polygon' : 'LineString';\n  draw = new Draw({\n    source: source,\n    type: type,\n    style: function (feature) {\n      const geometryType = feature.getGeometry().getType();\n      if (geometryType === type || geometryType === 'Point') {\n        return style;\n      }\n    },\n  });\n  map.addInteraction(draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  let listener;\n  draw.on('drawstart', function (evt) {\n    // set sketch\n    sketch = evt.feature;\n\n    /** @type {import('../src/ol/coordinate.js').Coordinate|undefined} */\n    let tooltipCoord;\n\n    listener = sketch.getGeometry().on('change', function (evt) {\n      const geom = evt.target;\n      let output;\n      if (geom instanceof Polygon) {\n        output = formatArea(geom);\n        tooltipCoord = geom.getInteriorPoint().getCoordinates();\n      } else if (geom instanceof LineString) {\n        output = formatLength(geom);\n        tooltipCoord = geom.getLastCoordinate();\n      }\n      measureTooltipElement.innerHTML = output;\n      measureTooltip.setPosition(tooltipCoord);\n    });\n  });\n\n  draw.on('drawend', function () {\n    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';\n    measureTooltip.setOffset([0, -7]);\n    // unset sketch\n    sketch = null;\n    // unset tooltip so that a new one can be created\n    measureTooltipElement = null;\n    createMeasureTooltip();\n    unByKey(listener);\n  });\n}\n\n/**\n * Creates a new help tooltip\n */\nfunction createHelpTooltip() {\n  if (helpTooltipElement) {\n    helpTooltipElement.remove();\n  }\n  helpTooltipElement = document.createElement('div');\n  helpTooltipElement.className = 'ol-tooltip hidden';\n  helpTooltip = new Overlay({\n    element: helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left',\n  });\n  map.addOverlay(helpTooltip);\n}\n\n/**\n * Creates a new measure tooltip\n */\nfunction createMeasureTooltip() {\n  if (measureTooltipElement) {\n    measureTooltipElement.remove();\n  }\n  measureTooltipElement = document.createElement('div');\n  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\n  measureTooltip = new Overlay({\n    element: measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center',\n    stopEvent: false,\n    insertFirst: false,\n  });\n  map.addOverlay(measureTooltip);\n}\n\n/**\n * Let user change the geometry type.\n */\ntypeSelect.onchange = function () {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"names":["raster","source","vector","style","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","map","layers","target","view","center","zoom","on","evt","dragging","helpMsg","geom","getGeometry","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","typeSelect","document","getElementById","draw","fill","color","stroke","lineDash","width","image","radius","addInteraction","type","value","listener","feature","geometryType","getType","createMeasureTooltip","createElement","className","element","offset","positioning","addOverlay","createHelpTooltip","tooltipCoord","output","polygon","area","Math","round","formatArea","getInteriorPoint","getCoordinates","line","length","formatLength","getLastCoordinate","setOffset","stopEvent","insertFirst","onchange","removeInteraction"],"sourceRoot":""}