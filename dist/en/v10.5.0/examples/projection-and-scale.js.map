{"version":3,"file":"projection-and-scale.js","mappings":"2KAYA,MAAMA,EAAiBC,SAASC,eAAe,mBACzCC,GAAa,QAAcH,EAAeI,OAE1CC,EAAe,IAAI,IAAU,CACjCC,MAAO,SACPC,KAAK,EACLC,MAAO,EACPC,MAAM,EACNC,SAAU,MAGNC,EAAM,IAAI,IAAI,CAClBC,UAAU,SAAkBC,OAAO,CAACR,IACpCS,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,OAGhBC,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAU,CAAC,EAAG,IAAK,YAAaf,GACxCgB,KAAM,EACNhB,WAAYA,MA6BhBH,EAAeoB,iBAAiB,UAzBhC,WACE,MAAMC,EAAcV,EAAIW,UAClBC,EAAoBF,EAAYG,gBAChCC,GAAgB,QAAczB,EAAeI,OAC7CsB,EAAoBL,EAAYM,gBAChCC,EAAgBP,EAAYQ,YAC5BC,EAAkBT,EAAYU,cAC9BC,GAAY,QAAUJ,EAAeL,EAAmBE,GACxDQ,EAAaV,EAAkBW,mBAC/BC,EAASV,EAAcS,mBAMvBE,EACHV,IALD,QAAmBH,EAAmB,EAAIU,EAAYL,EAAe,KACrEK,KAEA,QAAmBR,EAAe,EAAIU,EAAQH,EAAW,KAAOG,GAG5DE,EAAU,IAAI,KAAK,CACvBnB,OAAQc,EACRM,WAAYF,EACZG,SAAUT,EACV3B,WAAYsB,IAEdd,EAAI6B,QAAQH,EACd,G","sources":["webpack:///./projection-and-scale.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ScaleLine from '../src/ol/control/ScaleLine.js';\nimport {defaults as defaultControls} from '../src/ol/control/defaults.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {\n  get as getProjection,\n  getPointResolution,\n  transform,\n} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nconst viewProjSelect = document.getElementById('view-projection');\nconst projection = getProjection(viewProjSelect.value);\n\nconst scaleControl = new ScaleLine({\n  units: 'metric',\n  bar: true,\n  steps: 4,\n  text: true,\n  minWidth: 140,\n});\n\nconst map = new Map({\n  controls: defaultControls().extend([scaleControl]),\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: transform([0, 52], 'EPSG:4326', projection),\n    zoom: 6,\n    projection: projection,\n  }),\n});\n\nfunction onChangeProjection() {\n  const currentView = map.getView();\n  const currentProjection = currentView.getProjection();\n  const newProjection = getProjection(viewProjSelect.value);\n  const currentResolution = currentView.getResolution();\n  const currentCenter = currentView.getCenter();\n  const currentRotation = currentView.getRotation();\n  const newCenter = transform(currentCenter, currentProjection, newProjection);\n  const currentMPU = currentProjection.getMetersPerUnit();\n  const newMPU = newProjection.getMetersPerUnit();\n  const currentPointResolution =\n    getPointResolution(currentProjection, 1 / currentMPU, currentCenter, 'm') *\n    currentMPU;\n  const newPointResolution =\n    getPointResolution(newProjection, 1 / newMPU, newCenter, 'm') * newMPU;\n  const newResolution =\n    (currentResolution * currentPointResolution) / newPointResolution;\n  const newView = new View({\n    center: newCenter,\n    resolution: newResolution,\n    rotation: currentRotation,\n    projection: newProjection,\n  });\n  map.setView(newView);\n}\nviewProjSelect.addEventListener('change', onChangeProjection);\n"],"names":["viewProjSelect","document","getElementById","projection","value","scaleControl","units","bar","steps","text","minWidth","map","controls","extend","layers","source","target","view","center","zoom","addEventListener","currentView","getView","currentProjection","getProjection","newProjection","currentResolution","getResolution","currentCenter","getCenter","currentRotation","getRotation","newCenter","currentMPU","getMetersPerUnit","newMPU","newResolution","newView","resolution","rotation","setView"],"sourceRoot":""}