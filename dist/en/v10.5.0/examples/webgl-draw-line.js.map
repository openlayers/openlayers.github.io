{"version":3,"file":"webgl-draw-line.js","mappings":"sNAaA,MAAMA,EAAiB,CACrBC,MAAO,GACPC,OAAQ,EACRC,QAAS,OACTC,SAAU,QACVC,WAAY,GACZC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,WAAY,EACZC,eAAgB,GAGZC,EAAS,IAAI,IAAa,CAC9BC,IAAK,mCACLC,OAAQ,IAAI,MAQRC,EAAW,CAACC,EAAMC,KACtB,IAAIC,EAAW,CACb,eAAgB,CAAC,MAAO,SACxB,eAAgB,qBAChB,gBAAiB,CAAC,MAAO,UACzB,qBAAsB,CAAC,MAAO,cAC9B,kBAAmB,CAAC,MAAO,WAC3B,mBAAoB,CAAC,MAAO,aAsB9B,OApBIF,IACFE,EAAW,IACNA,EACH,mBAAoB,CAClB,CAAC,MAAO,eACR,CAAC,MAAO,eACR,CAAC,MAAO,eACR,CAAC,MAAO,gBAEV,0BAA2B,CAAC,MAAO,gBAGnCD,WACKC,EAAS,gBAChBA,EAAW,IACNA,EACH,qBAAsB,eACtB,yBAA0B,CAAC,MAAO,oBAG/BA,CAAQ,EAIjB,IAAIC,EAAQJ,GAAS,GAAO,GAExBK,EAAS,IAAI,IAAiB,CAChCR,SACAO,QACAE,UAAW,IAAIrB,KAGjB,MAAMsB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZX,OAAQ,IAAI,MAEdQ,GAEFI,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,KAAM,QAC1BC,KAAM,MAIJC,EAAe,KACnB,MAAMZ,EAAOa,SAASC,eAAe,cAAcC,QAC7Cd,EAAUY,SAASC,eAAe,iBAAiBC,QACzDZ,EAAQJ,EAASC,EAAMC,GACvBK,EAAIU,YAAYZ,GAChBA,EAAS,IAAI,IAAiB,CAC5BR,SACAO,QACAE,UAAW,IAAIrB,KAEjBsB,EAAIW,SAASb,EAAO,EAGhBc,EAAS,IAAI,IAAO,CAACtB,OAAQA,IAGnC,IAAIuB,EAAMC,EAFVd,EAAIe,eAAeH,GAKjBC,EAAO,IAAI,KAAK,CACdvB,OAAQA,EACR0B,KAAM,eAERhB,EAAIe,eAAeF,GACnBC,EAAO,IAAI,IAAK,CAACxB,OAAQA,IACzBU,EAAIe,eAAeD,GAKrB,MAAMG,EAAiBC,IACrB,MAAMC,EAAeD,EAAMhB,OAAOkB,KACR,UAAtBF,EAAMhB,OAAOc,KACftC,EAAeyC,GAAgBD,EAAMhB,OAAOmB,MAE5C3C,EAAeyC,GAAgBG,WAAWJ,EAAMhB,OAAOmB,OAEzDvB,EAAOyB,qBAAqB7C,GAC5B,MAAM8C,EAAYjB,SAASC,eAAe,SAASW,KAC/CK,IACFA,EAAUC,YAAcC,OAAOhD,EAAeyC,KAEhDnB,EAAI2B,QAAQ,EAEdpB,SACGqB,iBAAiB,iBACjBC,SAASC,GAAUA,EAAMC,iBAAiB,QAASd,KACtDV,SACGqB,iBAAiB,iBACjBC,SAASC,GAAUA,EAAMC,iBAAiB,QAASzB,I","sources":["webpack:///./webgl-draw-line.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport Modify from '../src/ol/interaction/Modify.js';\nimport Snap from '../src/ol/interaction/Snap.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport WebGLVectorLayer from '../src/ol/layer/WebGLVector.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\n/** @type {import('../src/ol/style/flat.js').StyleVariables} */\nconst styleVariables = {\n  width: 12,\n  offset: 0,\n  capType: 'butt',\n  joinType: 'miter',\n  miterLimit: 10, // ratio\n  dashLength1: 25,\n  dashLength2: 15,\n  dashLength3: 15,\n  dashLength4: 15,\n  dashOffset: 0,\n  patternSpacing: 0,\n};\n\nconst source = new VectorSource({\n  url: 'data/geojson/switzerland.geojson',\n  format: new GeoJSON(),\n});\n\n/**\n * @param {boolean} dash Include line dash\n * @param {boolean} pattern Include image pattern\n * @return {import('../src/ol/style/flat.js').FlatStyle} Generated style\n */\nconst getStyle = (dash, pattern) => {\n  let newStyle = {\n    'stroke-width': ['var', 'width'],\n    'stroke-color': 'rgba(24,86,34,0.7)',\n    'stroke-offset': ['var', 'offset'],\n    'stroke-miter-limit': ['var', 'miterLimit'],\n    'stroke-line-cap': ['var', 'capType'],\n    'stroke-line-join': ['var', 'joinType'],\n  };\n  if (dash) {\n    newStyle = {\n      ...newStyle,\n      'stroke-line-dash': [\n        ['var', 'dashLength1'],\n        ['var', 'dashLength2'],\n        ['var', 'dashLength3'],\n        ['var', 'dashLength4'],\n      ],\n      'stroke-line-dash-offset': ['var', 'dashOffset'],\n    };\n  }\n  if (pattern) {\n    delete newStyle['stroke-color'];\n    newStyle = {\n      ...newStyle,\n      'stroke-pattern-src': 'data/dot.svg',\n      'stroke-pattern-spacing': ['var', 'patternSpacing'],\n    };\n  }\n  return newStyle;\n};\n\n/** @type {import('../src/ol/style/flat.js').FlatStyle} */\nlet style = getStyle(false, false);\n\nlet vector = new WebGLVectorLayer({\n  source,\n  style,\n  variables: {...styleVariables},\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    vector,\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([8.43, 46.82]),\n    zoom: 7,\n  }),\n});\n\nconst rebuildStyle = () => {\n  const dash = document.getElementById('dashEnable').checked;\n  const pattern = document.getElementById('patternEnable').checked;\n  style = getStyle(dash, pattern);\n  map.removeLayer(vector);\n  vector = new WebGLVectorLayer({\n    source,\n    style,\n    variables: {...styleVariables},\n  });\n  map.addLayer(vector);\n};\n\nconst modify = new Modify({source: source});\nmap.addInteraction(modify);\n\nlet draw, snap; // global so we can remove them later\n\nfunction addInteractions() {\n  draw = new Draw({\n    source: source,\n    type: 'LineString',\n  });\n  map.addInteraction(draw);\n  snap = new Snap({source: source});\n  map.addInteraction(snap);\n}\n\naddInteractions();\n\nconst inputListener = (event) => {\n  const variableName = event.target.name;\n  if (event.target.type === 'radio') {\n    styleVariables[variableName] = event.target.value;\n  } else {\n    styleVariables[variableName] = parseFloat(event.target.value);\n  }\n  vector.updateStyleVariables(styleVariables);\n  const valueSpan = document.getElementById(`value-${variableName}`);\n  if (valueSpan) {\n    valueSpan.textContent = String(styleVariables[variableName]);\n  }\n  map.render();\n};\ndocument\n  .querySelectorAll('input.uniform')\n  .forEach((input) => input.addEventListener('input', inputListener));\ndocument\n  .querySelectorAll('input.rebuild')\n  .forEach((input) => input.addEventListener('input', rebuildStyle));\n"],"names":["styleVariables","width","offset","capType","joinType","miterLimit","dashLength1","dashLength2","dashLength3","dashLength4","dashOffset","patternSpacing","source","url","format","getStyle","dash","pattern","newStyle","style","vector","variables","map","layers","target","view","center","zoom","rebuildStyle","document","getElementById","checked","removeLayer","addLayer","modify","draw","snap","addInteraction","type","inputListener","event","variableName","name","value","parseFloat","updateStyleVariables","valueSpan","textContent","String","render","querySelectorAll","forEach","input","addEventListener"],"sourceRoot":""}