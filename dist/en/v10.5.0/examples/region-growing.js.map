{"version":3,"file":"region-growing.js","mappings":";;;;;;;;;;;;;AAAmC;AACE;AACa;AACF;AACH;AACS;AACA;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wEAAwE;AACxE,4EAA4E;;AAE5E,oBAAoB,sEAAS;AAC7B,cAAc,4EAAS;AACvB;AACA,mDAAmD,EAAE,EAAE,EAAE,EAAE,EAAE;AAC7D;AACA;AACA,GAAG;AACH,CAAC;;AAED,mBAAmB,0EAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED,wBAAwB,uEAAU;AAClC;AACA;AACA,CAAC;;AAED,gBAAgB,+DAAG;AACnB;AACA;AACA,YAAY,iEAAI;AAChB,YAAY,qEAAU;AACtB;AACA,GAAG;AACH,CAAC;;AAED;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC","sources":["webpack:///./region-growing.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport ImageTile from '../src/ol/source/ImageTile.js';\nimport RasterSource from '../src/ol/source/Raster.js';\n\nfunction growRegion(inputs, data) {\n  const image = inputs[0];\n  let seed = data.pixel;\n  const delta = parseInt(data.delta);\n  if (!seed) {\n    return image;\n  }\n\n  seed = seed.map(Math.round);\n  const width = image.width;\n  const height = image.height;\n  const inputData = image.data;\n  const outputData = new Uint8ClampedArray(inputData);\n  const seedIdx = (seed[1] * width + seed[0]) * 4;\n  const seedR = inputData[seedIdx];\n  const seedG = inputData[seedIdx + 1];\n  const seedB = inputData[seedIdx + 2];\n  let edge = [seed];\n  while (edge.length) {\n    const newedge = [];\n    for (let i = 0, ii = edge.length; i < ii; i++) {\n      // As noted in the Raster source constructor, this function is provided\n      // using the `lib` option. Other functions will NOT be visible unless\n      // provided using the `lib` option.\n      const next = next4Edges(edge[i]);\n      for (let j = 0, jj = next.length; j < jj; j++) {\n        const s = next[j][0];\n        const t = next[j][1];\n        if (s >= 0 && s < width && t >= 0 && t < height) {\n          const ci = (t * width + s) * 4;\n          const cr = inputData[ci];\n          const cg = inputData[ci + 1];\n          const cb = inputData[ci + 2];\n          const ca = inputData[ci + 3];\n          // if alpha is zero, carry on\n          if (ca === 0) {\n            continue;\n          }\n          if (\n            Math.abs(seedR - cr) < delta &&\n            Math.abs(seedG - cg) < delta &&\n            Math.abs(seedB - cb) < delta\n          ) {\n            outputData[ci] = 255;\n            outputData[ci + 1] = 0;\n            outputData[ci + 2] = 0;\n            outputData[ci + 3] = 255;\n            newedge.push([s, t]);\n          }\n          // mark as visited\n          inputData[ci + 3] = 0;\n        }\n      }\n    }\n    edge = newedge;\n  }\n  return {data: outputData, width: width, height: height};\n}\n\nfunction next4Edges(edge) {\n  const x = edge[0];\n  const y = edge[1];\n  return [\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1],\n  ];\n}\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst imagery = new TileLayer({\n  source: new ImageTile({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/maps/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    tileSize: 512,\n    maxZoom: 20,\n  }),\n});\n\nconst raster = new RasterSource({\n  sources: [imagery.getSource()],\n  operationType: 'image',\n  operation: growRegion,\n  // Functions in the `lib` object will be available to the operation run in\n  // the web worker.\n  lib: {\n    next4Edges: next4Edges,\n  },\n});\n\nconst rasterImage = new ImageLayer({\n  opacity: 0.7,\n  source: raster,\n});\n\nconst map = new Map({\n  layers: [imagery, rasterImage],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-119.07, 47.65]),\n    zoom: 11,\n  }),\n});\n\nlet coordinate;\n\nmap.on('click', function (event) {\n  coordinate = event.coordinate;\n  raster.changed();\n});\n\nconst thresholdControl = document.getElementById('threshold');\n\nraster.on('beforeoperations', function (event) {\n  // the event.data object will be passed to operations\n  const data = event.data;\n  data.delta = thresholdControl.value;\n  if (coordinate) {\n    data.pixel = map.getPixelFromCoordinate(coordinate);\n  }\n});\n\nfunction updateControlValue() {\n  document.getElementById('threshold-value').innerText = thresholdControl.value;\n}\nupdateControlValue();\n\nthresholdControl.addEventListener('input', function () {\n  updateControlValue();\n  raster.changed();\n});\n"],"names":[],"sourceRoot":""}