"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2678],{56264:function(e,t,r){var n=6371008.8,o={centimeters:637100880,centimetres:637100880,degrees:360/(2*Math.PI),feet:20902260.511392,inches:39.37*n,kilometers:6371.0088,kilometres:6371.0088,meters:n,metres:n,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:n/1852,radians:1,yards:6967335.223679999};function i(e,t,r={}){const n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function a(e,t,r={}){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!h(e[0])||!h(e[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:e},t,r)}function s(e,t,r={}){if(e.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:e},t,r)}function u(e,t="kilometers"){const r=o[t];if(!r)throw new Error(t+" units is invalid");return e*r}function c(e,t="kilometers"){const r=o[t];if(!r)throw new Error(t+" units is invalid");return e/r}function l(e){return 180*(e%(2*Math.PI))/Math.PI}function f(e){return e%360*Math.PI/180}function h(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function y(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return[...e.geometry.coordinates];if("Point"===e.type)return[...e.coordinates]}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return[...e];throw new Error("coord must be GeoJSON Point or an Array of numbers")}function g(e,t,r={}){if(!0===r.final)return function(e,t){let r=g(t,e);return r=(r+180)%360,r}(e,t);const n=y(e),o=y(t),i=f(n[0]),a=f(o[0]),s=f(n[1]),u=f(o[1]),c=Math.sin(a-i)*Math.cos(u),h=Math.cos(s)*Math.sin(u)-Math.sin(s)*Math.cos(u)*Math.cos(a-i);return l(Math.atan2(c,h))}function m(e,t,r,n={}){const o=y(e),i=f(o[0]),s=f(o[1]),u=f(r),h=c(t,n.units),g=Math.asin(Math.sin(s)*Math.cos(h)+Math.cos(s)*Math.sin(h)*Math.cos(u));return a([l(i+Math.atan2(Math.sin(u)*Math.sin(h)*Math.cos(s),Math.cos(h)-Math.sin(s)*Math.sin(g))),l(g)],n.properties)}function d(e,t,r={}){var n=y(e),o=y(t),i=f(o[1]-n[1]),a=f(o[0]-n[0]),s=f(n[1]),c=f(o[1]),l=Math.pow(Math.sin(i/2),2)+Math.pow(Math.sin(a/2),2)*Math.cos(s)*Math.cos(c);return u(2*Math.atan2(Math.sqrt(l),Math.sqrt(1-l)),r.units)}function M(e,t,r={}){var n;const o=("Feature"===(n=e).type?n.geometry:n).coordinates;let i=0;for(let e=0;e<o.length&&!(t>=i&&e===o.length-1);e++){if(i>=t){const n=t-i;if(n){const t=g(o[e],o[e-1])-180;return m(o[e],n,t,r)}return a(o[e])}i+=d(o[e],o[e+1],r)}return a(o[o.length-1])}function w(e,t,r){if(null!==e)for(var n,o,i,a,s,u,c,l,f=0,h=0,y=e.type,g="FeatureCollection"===y,m="Feature"===y,d=g?e.features.length:1,M=0;M<d;M++){s=(l=!!(c=g?e.features[M].geometry:m?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var p=0;p<s;p++){var b=0,P=0;if(null!==(a=l?c.geometries[p]:c)){u=a.coordinates;var v=a.type;switch(f=!r||"Polygon"!==v&&"MultiPolygon"!==v?0:1,v){case null:break;case"Point":if(!1===t(u,h,M,b,P))return!1;h++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],h,M,b,P))return!1;h++,"MultiPoint"===v&&b++}"LineString"===v&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(o=0;o<u[n].length-f;o++){if(!1===t(u[n][o],h,M,b,P))return!1;h++}"MultiLineString"===v&&b++,"Polygon"===v&&P++}"Polygon"===v&&b++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for(P=0,o=0;o<u[n].length;o++){for(i=0;i<u[n][o].length-f;i++){if(!1===t(u[n][o][i],h,M,b,P))return!1;h++}P++}b++}break;case"GeometryCollection":for(n=0;n<a.geometries.length;n++)if(!1===w(a.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function p(e,t){var r,n,o,i,a,s,u,c,l,f,h=0,y="FeatureCollection"===e.type,g="Feature"===e.type,m=y?e.features.length:1;for(r=0;r<m;r++){for(s=y?e.features[r].geometry:g?e.geometry:e,c=y?e.features[r].properties:g?e.properties:{},l=y?e.features[r].bbox:g?e.bbox:void 0,f=y?e.features[r].id:g?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,h,c,l,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],h,c,l,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,h,c,l,f))return!1;h++}}function b(e,t){p(e,(function(e,r,n,o,a){var s,u=null===e?null:e.type;switch(u){case null:case"Point":case"LineString":case"Polygon":return!1!==t(i(e,n,{bbox:o,id:a}),r,0)&&void 0}switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}for(var c=0;c<e.coordinates.length;c++){var l=e.coordinates[c];if(!1===t(i({type:s,coordinates:l},n),r,c))return!1}}))}function P(e,t,r){var n=r,o=!1;return function(e,t){b(e,(function(e,r,n){var o=0;if(e.geometry){var i=e.geometry.type;if("Point"!==i&&"MultiPoint"!==i){var a,u=0,c=0,l=0;return!1!==w(e,(function(i,f,h,y,g){if(void 0===a||r>u||y>c||g>l)return a=i,u=r,c=y,l=g,void(o=0);var m=s([a,i],e.properties);if(!1===t(m,r,n,g,o))return!1;o++,a=i}))&&void 0}}}))}(e,(function(e,i,a,s,u){n=!1===o&&void 0===r?e:t(n,e,i,a,s,u),o=!0})),n}function v(e,t={}){return P(e,((e,r)=>{const n=r.geometry.coordinates;return e+d(n[0],n[1],t)}),0)}var k=r(41564),A=r(87240),E=r(49208),S=r(12185),G=r(23986),F=r(25231),L=r(28e3);const C=new(r(29810).A);fetch("data/geojson/roads-seoul.geojson").then((function(e){return e.json()})).then((function(e){const t=new E.A,r=t.readFeatures(e)[0],n=t.writeFeatureObject(r),o=v(n,{units:"kilometers"});for(let e=1;e<=o/.2;e++){const r=M(n,.2*e,{units:"kilometers"}),o=t.readFeature(r);o.getGeometry().transform("EPSG:4326","EPSG:3857"),C.addFeature(o)}r.getGeometry().transform("EPSG:4326","EPSG:3857"),C.addFeature(r)}));const x=new G.A({source:C}),I=new S.A({source:new L.A});new k.A({layers:[I,x],target:document.getElementById("map"),view:new A.Ay({center:(0,F.Rb)([126.980366,37.52654]),zoom:15})})}},function(e){var t;t=56264,e(e.s=t)}]);
//# sourceMappingURL=turf.js.map