{"version":3,"file":"synthetic-points.js","mappings":"mOAaA,MACMA,EAAW,IAAIC,MADP,KAERC,EAAI,KACV,IAAK,IAAIC,EAAI,EAAGA,EAHF,MAGeA,EAC3BH,EAASG,GAAK,IAAI,IAAQ,CACxB,SAAY,IAAI,IAAM,CACpB,EAAID,EAAIE,KAAKC,SAAWH,EACxB,EAAIA,EAAIE,KAAKC,SAAWH,IAE1B,EAAKC,EACL,KAAQA,EAAI,EAAI,GAAK,KAIzB,MAAMG,EAAS,CACb,GAAM,IAAI,KAAM,CACdC,MAAO,IAAI,IAAY,CACrBC,OAAQ,EACRC,KAAM,IAAI,IAAK,CAACC,MAAO,YACvBC,OAAQ,IAAI,IAAO,CAACD,MAAO,UAAWE,MAAO,QAGjD,GAAM,IAAI,KAAM,CACdL,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRC,KAAM,IAAI,IAAK,CAACC,MAAO,YACvBC,OAAQ,IAAI,IAAO,CAACD,MAAO,UAAWE,MAAO,SAK7CC,EAAe,IAAI,IAAa,CACpCb,SAAUA,EACVc,OAAO,IAEHC,EAAS,IAAI,IAAY,CAC7BC,OAAQH,EACRI,MAAO,SAAUC,GACf,OAAOZ,EAAOY,EAAQC,IAAI,QAC5B,IAGIC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CAACN,GACTO,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIV,IAAIC,EAAQ,KACRC,EAAO,KACX,MAAMC,EAAc,SAAUC,GAC5B,MAAMC,EAAiBnB,EAAaoB,8BAA8BF,GAClE,GAAuB,OAAnBC,EACFJ,EAAQ,KACRC,EAAO,SACF,CACL,MACMK,EADWF,EAAeG,cACFC,gBAAgBL,GAChC,OAAVH,EACFA,EAAQ,IAAI,IAAMM,GAElBN,EAAMS,eAAeH,GAEV,OAATL,EACFA,EAAO,IAAI,IAAW,CAACE,EAAYG,IAEnCL,EAAKQ,eAAe,CAACN,EAAYG,GAErC,CACAd,EAAIkB,QACN,EAEAlB,EAAImB,GAAG,eAAe,SAAUC,GAC9B,GAAIA,EAAIC,SACN,OAEF,MAAMV,EAAaX,EAAIsB,mBAAmBF,EAAIG,eAC9Cb,EAAYC,EACd,IAEAX,EAAImB,GAAG,SAAS,SAAUC,GACxBV,EAAYU,EAAIT,WAClB,IAEA,MAAMpB,EAAS,IAAI,IAAO,CACxBD,MAAO,sBACPE,MAAO,IAEHK,EAAQ,IAAI,KAAM,CACtBN,OAAQA,EACRJ,MAAO,IAAI,IAAY,CACrBC,OAAQ,GACRG,OAAQA,MAIZI,EAAOwB,GAAG,cAAc,SAAUC,GAChC,MAAMI,GAAgB,QAAiBJ,GACvCI,EAAcC,SAAS5B,GACT,OAAVW,GACFgB,EAAcE,aAAalB,GAEhB,OAATC,GACFe,EAAcE,aAAajB,EAE/B,IAEAT,EAAImB,GAAG,eAAe,SAAUC,GAC9B,GAAIA,EAAIC,SACN,OAEF,MAAMM,EAAM3B,EAAI4B,kBAAkBR,EAAIS,OACtC7B,EAAI8B,mBAAmBjC,MAAMkC,OAASJ,EAAM,UAAY,EAC1D,G","sources":["webpack:///./synthetic-points.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Point from '../src/ol/geom/Point.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {getVectorContext} from '../src/ol/render.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 18000000;\nfor (let i = 0; i < count; ++i) {\n  features[i] = new Feature({\n    'geometry': new Point([\n      2 * e * Math.random() - e,\n      2 * e * Math.random() - e,\n    ]),\n    'i': i,\n    'size': i % 2 ? 10 : 20,\n  });\n}\n\nconst styles = {\n  '10': new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1}),\n    }),\n  }),\n  '20': new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1}),\n    }),\n  }),\n};\n\nconst vectorSource = new VectorSource({\n  features: features,\n  wrapX: false,\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function (feature) {\n    return styles[feature.get('size')];\n  },\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function (coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    if (line === null) {\n      line = new LineString([coordinate, closestPoint]);\n    } else {\n      line.setCoordinates([coordinate, closestPoint]);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function (evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,255,0,0.9)',\n  width: 3,\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 10,\n    stroke: stroke,\n  }),\n});\n\nvector.on('postrender', function (evt) {\n  const vectorContext = getVectorContext(evt);\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const hit = map.hasFeatureAtPixel(evt.pixel);\n  map.getTargetElement().style.cursor = hit ? 'pointer' : '';\n});\n"],"names":["features","Array","e","i","Math","random","styles","image","radius","fill","color","stroke","width","vectorSource","wrapX","vector","source","style","feature","get","map","layers","target","document","getElementById","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","setStyle","drawGeometry","hit","hasFeatureAtPixel","pixel","getTargetElement","cursor"],"sourceRoot":""}