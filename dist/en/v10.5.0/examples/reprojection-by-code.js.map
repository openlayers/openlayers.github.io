{"version":3,"file":"reprojection-by-code.js","mappings":"uNAYA,MAEMA,EAAY,IAAI,IAEhBC,EAAa,IAAI,IAAU,CAC/BC,OAAQ,IAAI,IAAU,CACpBC,SAAUH,EAAUI,cACpBC,WAAYL,EAAUM,kBAExBC,SAAS,IAGLC,EAAY,IAAI,IAAU,CAE9BC,YAAa,IAAI,IAAO,CACtBC,MAAO,sBACPC,MAAO,EACPC,SAAU,CAAC,GAAK,KAElBC,YAAY,EACZN,SAAS,EACTO,OAAO,IAGHC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZd,OAAQF,IAEVC,EACAO,GAEFS,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbb,WAAY,YACZc,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAaC,SAASC,eAAe,cACrCC,EAAeF,SAASC,eAAe,eACvCE,EAAaH,SAASC,eAAe,eACrCG,EAAsBJ,SAASC,eAAe,gBAC9CI,EAAoBL,SAASC,eAAe,cAC5CK,EAAwBN,SAASC,eAAe,kBAEtD,SAASM,EAAcC,EAAMC,EAAMC,EAAUC,GAC3C,GAAa,OAATH,GAA0B,OAATC,GAA8B,OAAbC,GAA8B,OAATC,EASzD,OARAR,EAAWS,UAAY,gDACvBnB,EAAIoB,QACF,IAAI,KAAK,CACP9B,WAAY,YACZc,OAAQ,CAAC,EAAG,GACZC,KAAM,KAMZK,EAAWS,UAAY,IAAMJ,EAAO,KAAOC,EAE3C,IAAMK,KAAKN,EAAME,IACjB,QAAS,KACT,MAAMK,GAAU,QAAcP,GACxBQ,GAAa,QAAa,YAAaD,GAE7CA,EAAQE,eAAeN,GAInBA,EAAK,GAAKA,EAAK,KACjBA,EAAK,IAAM,KAEb,MAAMO,GAAS,QAAeP,EAAMK,OAAYG,EAAW,GAC3DJ,EAAQK,UAAUF,GAClB,MAAMG,EAAU,IAAI,KAAK,CACvBtC,WAAYgC,IAEdtB,EAAIoB,QAAQQ,GACZA,EAAQC,IAAIJ,EACd,CAmDA,SAASK,IACP7C,EAAU8C,2BAA2BpB,EAAoBqB,QAC3D,CACA,SAASC,IACPxC,EAAUyC,WAAWrB,EAAsBmB,QAC7C,CACA,SAASG,IACPjD,EAAWgD,WAAWtB,EAAkBoB,QAC1C,CAhBAvB,EAAa2B,QAAU,SAAUC,GAzCjC,IAAgBC,IA0CPhC,EAAWiC,MAzClB7B,EAAWS,UAAY,gBACvBqB,MACE,+CAA+CF,6DAE9CG,MAAK,SAAUC,GACd,OAAOA,EAASC,MAClB,IACCF,MAAK,SAAUE,GACd,MAAMC,EAAUD,EAAc,QAC9B,GAAIC,GAAWA,EAAQC,OAAS,EAC9B,IAAK,IAAIC,EAAI,EAAGC,EAAKH,EAAQC,OAAQC,EAAIC,EAAID,IAAK,CAChD,MAAME,EAASJ,EAAQE,GACvB,GAAIE,EAAQ,CACV,MAAMC,EAAKD,EAAW,GAChBjC,EAAOkC,EAAc,UAAI,IAAMA,EAAS,KACxCjC,EAAOgC,EAAa,KACpB/B,EAAW+B,EAAgB,QAAO,IAClC9B,EAAO8B,EAAa,KAC1B,GACEjC,GACAA,EAAK8B,OAAS,GACd5B,GACAA,EAAS4B,OAAS,GAClB3B,GACe,GAAfA,EAAK2B,OAGL,YADA/B,EAAcC,EAAMC,EAAMC,EAAUC,EAGxC,CACF,CAEFJ,EAAc,KAAM,KAAM,KAAM,KAClC,IASFuB,EAAMa,gBACR,EAcArC,EAAsBsC,iBAAiB,SAAUlB,GACjDtB,EAAoBwC,iBAAiB,SAAUrB,GAC/ClB,EAAkBuC,iBAAiB,SAAUhB,GAE7CL,IACAG,IACAE,G","sources":["webpack:///./reprojection-by-code.js"],"sourcesContent":["import proj4 from 'proj4';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {applyTransform} from '../src/ol/extent.js';\nimport Graticule from '../src/ol/layer/Graticule.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {register} from '../src/ol/proj/proj4.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileDebug from '../src/ol/source/TileDebug.js';\nimport Stroke from '../src/ol/style/Stroke.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\n\nconst osmSource = new OSM();\n\nconst debugLayer = new TileLayer({\n  source: new TileDebug({\n    tileGrid: osmSource.getTileGrid(),\n    projection: osmSource.getProjection(),\n  }),\n  visible: false,\n});\n\nconst graticule = new Graticule({\n  // the style to use for the lines, optional.\n  strokeStyle: new Stroke({\n    color: 'rgba(255,120,0,0.9)',\n    width: 2,\n    lineDash: [0.5, 4],\n  }),\n  showLabels: true,\n  visible: false,\n  wrapX: false,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource,\n    }),\n    debugLayer,\n    graticule,\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\nconst showTilesCheckbox = document.getElementById('show-tiles');\nconst showGraticuleCheckbox = document.getElementById('show-graticule');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(\n      new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 1,\n      }),\n    );\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  proj4.defs(code, proj4def);\n  register(proj4);\n  const newProj = getProjection(code);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  newProj.setWorldExtent(bbox);\n\n  // approximate calculation of projection extent,\n  // checking if the world extent crosses the dateline\n  if (bbox[0] > bbox[2]) {\n    bbox[2] += 360;\n  }\n  const extent = applyTransform(bbox, fromLonLat, undefined, 8);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj,\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch(\n    `https://api.maptiler.com/coordinates/search/${query}.json?exports=true&key=${key}`,\n  )\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      const results = json['results'];\n      if (results && results.length > 0) {\n        for (let i = 0, ii = results.length; i < ii; i++) {\n          const result = results[i];\n          if (result) {\n            const id = result['id'];\n            const code = id['authority'] + ':' + id['code'];\n            const name = result['name'];\n            const proj4def = result['exports']['wkt'];\n            const bbox = result['bbox'];\n            if (\n              code &&\n              code.length > 0 &&\n              proj4def &&\n              proj4def.length > 0 &&\n              bbox &&\n              bbox.length == 4\n            ) {\n              setProjection(code, name, proj4def, bbox);\n              return;\n            }\n          }\n        }\n      }\n      setProjection(null, null, null, null);\n    });\n}\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function (event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n/**\n * Handle checkbox change events.\n */\nfunction onReprojectionChange() {\n  osmSource.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n}\nfunction onGraticuleChange() {\n  graticule.setVisible(showGraticuleCheckbox.checked);\n}\nfunction onTilesChange() {\n  debugLayer.setVisible(showTilesCheckbox.checked);\n}\nshowGraticuleCheckbox.addEventListener('change', onGraticuleChange);\nrenderEdgesCheckbox.addEventListener('change', onReprojectionChange);\nshowTilesCheckbox.addEventListener('change', onTilesChange);\n\nonReprojectionChange();\nonGraticuleChange();\nonTilesChange();\n"],"names":["osmSource","debugLayer","source","tileGrid","getTileGrid","projection","getProjection","visible","graticule","strokeStyle","color","width","lineDash","showLabels","wrapX","map","layers","target","view","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","showTilesCheckbox","showGraticuleCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","defs","newProj","fromLonLat","setWorldExtent","extent","undefined","setExtent","newView","fit","onReprojectionChange","setRenderReprojectionEdges","checked","onGraticuleChange","setVisible","onTilesChange","onclick","event","query","value","fetch","then","response","json","results","length","i","ii","result","id","preventDefault","addEventListener"],"sourceRoot":""}