{"version":3,"file":"filter-points-webgl.js","mappings":"sLAUA,MAAMA,EAAe,I,SAAI,GAAO,CAC9BC,aAAc,SAMVC,EAAY,CAChB,IACA,CACE,IACA,CACE,IACA,CACE,IACA,CAAC,QACD,CAAC,cAAe,CAAC,UAAW,CAAC,MAAO,QAAS,KAAM,EAAG,KAV/C,aAgBb,IAGIC,EAAQ,CACZ,gBAAiB,CACf,IACA,CAAC,cAAe,CAAC,UAAW,CAAC,MAAO,QAAS,EAAG,EAAG,IAAQ,IAC3D,CAAC,IAAK,KAAM,CAAC,IAAKD,EAAW,OAE/B,oBAAqB,CACnB,cACA,CAAC,UACDA,EACA,EA9Ba,UAgCb,EAjCa,wBAoCf,iBAAkB,CAAC,IAAK,EAAK,CAAC,IAAKA,EAAW,OAI1CE,EAAeC,SAASC,eAAe,YACvCC,EAAeF,SAASC,eAAe,YAE7C,SAASE,IACP,MAAMC,EAAMJ,SAASC,eAAe,UACpCG,EAAIC,cAAc,iBAAiBC,YAAcP,EAAaQ,MAC9DH,EAAIC,cAAc,iBAAiBC,YAAcJ,EAAaK,KAChE,CAEA,MAAMC,EAAc,IAAI,IAAiB,CACvCC,UAAW,CACTC,QAASC,SAASZ,EAAaQ,OAC/BK,QAASD,SAAST,EAAaK,QAEjCT,MAAO,CACL,CACEA,QACAe,OAAQ,CACN,UACA,CAAC,MAAO,QACR,CAAC,MAAO,WACR,CAAC,MAAO,cAIdC,OAAQnB,EACRoB,qBAAqB,IAGvBhB,EAAaiB,iBAAiB,SAAS,WACrCR,EAAYS,qBAAqB,CAACP,QAASC,SAASZ,EAAaQ,SACjEJ,GACF,IACAD,EAAac,iBAAiB,SAAS,WACrCR,EAAYS,qBAAqB,CAACL,QAASD,SAAST,EAAaK,SACjEJ,GACF,IACAA,IAGA,MAAMe,EAAS,IAAIC,eACnBD,EAAOE,KAAK,MAAO,mCACnBF,EAAOG,OAAS,WACd,MAAMC,EAAMJ,EAAOK,aACbC,EAAW,GAEjB,IAEIC,EAFAC,EAAYJ,EAAIK,QAAQ,MAAQ,EAGpC,MAAqD,IAA7CF,EAAWH,EAAIK,QAAQ,KAAMD,KAAmB,CACtD,MAAME,EAAON,EAAIO,OAAOH,EAAWD,EAAWC,GAAWI,MAAM,KAC/DJ,EAAYD,EAAW,EAEvB,MAAMM,GAAS,QAAW,CAACC,WAAWJ,EAAK,IAAKI,WAAWJ,EAAK,MAC5DK,MAAMF,EAAO,KAAOE,MAAMF,EAAO,KAKrCP,EAASU,KACP,IAAI,IAAQ,CACVC,KAAMH,WAAWJ,EAAK,KAAO,EAC7BQ,KAAMzB,SAASiB,EAAK,KAAO,EAC3BS,SAAU,IAAI,IAAMN,KAG1B,CAEApC,EAAa2C,YAAYd,EAC3B,EACAN,EAAOqB,OAEP,MAAMC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZ3B,OAAQ,IAAI,IAAW,CACrB4B,MAAO,mBAGXlC,GAEFmC,OAAQ3C,SAASC,eAAe,OAChC2C,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,OAKV,SAASC,IACPP,EAAIQ,SACJC,OAAOC,sBAAsBH,EAC/B,CACAA,E","sources":["webpack:///./filter-points-webgl.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport WebGLVectorLayer from '../src/ol/layer/WebGLVector.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport StadiaMaps from '../src/ol/source/StadiaMaps.js';\nimport Vector from '../src/ol/source/Vector.js';\n\nconst vectorSource = new Vector({\n  attributions: 'NASA',\n});\n\nconst oldColor = 'rgba(242,56,22,0.61)';\nconst newColor = '#ffe52c';\nconst period = 12; // animation period in seconds\nconst animRatio = [\n  '^',\n  [\n    '/',\n    [\n      '%',\n      [\n        '+',\n        ['time'],\n        ['interpolate', ['linear'], ['get', 'year'], 1850, 0, 2015, period],\n      ],\n      period,\n    ],\n    period,\n  ],\n  0.5,\n];\n\nconst style = {\n  'circle-radius': [\n    '*',\n    ['interpolate', ['linear'], ['get', 'mass'], 0, 4, 200000, 13],\n    ['-', 1.75, ['*', animRatio, 0.75]],\n  ],\n  'circle-fill-color': [\n    'interpolate',\n    ['linear'],\n    animRatio,\n    0,\n    newColor,\n    1,\n    oldColor,\n  ],\n  'circle-opacity': ['-', 1.0, ['*', animRatio, 0.75]],\n};\n\n// handle input values & events\nconst minYearInput = document.getElementById('min-year');\nconst maxYearInput = document.getElementById('max-year');\n\nfunction updateStatusText() {\n  const div = document.getElementById('status');\n  div.querySelector('span.min-year').textContent = minYearInput.value;\n  div.querySelector('span.max-year').textContent = maxYearInput.value;\n}\n\nconst pointsLayer = new WebGLVectorLayer({\n  variables: {\n    minYear: parseInt(minYearInput.value),\n    maxYear: parseInt(maxYearInput.value),\n  },\n  style: [\n    {\n      style,\n      filter: [\n        'between',\n        ['get', 'year'],\n        ['var', 'minYear'],\n        ['var', 'maxYear'],\n      ],\n    },\n  ],\n  source: vectorSource,\n  disableHitDetection: true,\n});\n\nminYearInput.addEventListener('input', function () {\n  pointsLayer.updateStyleVariables({minYear: parseInt(minYearInput.value)});\n  updateStatusText();\n});\nmaxYearInput.addEventListener('input', function () {\n  pointsLayer.updateStyleVariables({maxYear: parseInt(maxYearInput.value)});\n  updateStatusText();\n});\nupdateStatusText();\n\n// load data;\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/csv/meteorite_landings.csv');\nclient.onload = function () {\n  const csv = client.responseText;\n  const features = [];\n\n  let prevIndex = csv.indexOf('\\n') + 1; // scan past the header line\n\n  let curIndex;\n  while ((curIndex = csv.indexOf('\\n', prevIndex)) != -1) {\n    const line = csv.substr(prevIndex, curIndex - prevIndex).split(',');\n    prevIndex = curIndex + 1;\n\n    const coords = fromLonLat([parseFloat(line[4]), parseFloat(line[3])]);\n    if (isNaN(coords[0]) || isNaN(coords[1])) {\n      // guard against bad data\n      continue;\n    }\n\n    features.push(\n      new Feature({\n        mass: parseFloat(line[1]) || 0,\n        year: parseInt(line[2]) || 0,\n        geometry: new Point(coords),\n      }),\n    );\n  }\n\n  vectorSource.addFeatures(features);\n};\nclient.send();\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new StadiaMaps({\n        layer: 'stamen_toner',\n      }),\n    }),\n    pointsLayer,\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\n// animate the map\nfunction animate() {\n  map.render();\n  window.requestAnimationFrame(animate);\n}\nanimate();\n"],"names":["vectorSource","attributions","animRatio","style","minYearInput","document","getElementById","maxYearInput","updateStatusText","div","querySelector","textContent","value","pointsLayer","variables","minYear","parseInt","maxYear","filter","source","disableHitDetection","addEventListener","updateStyleVariables","client","XMLHttpRequest","open","onload","csv","responseText","features","curIndex","prevIndex","indexOf","line","substr","split","coords","parseFloat","isNaN","push","mass","year","geometry","addFeatures","send","map","layers","layer","target","view","center","zoom","animate","render","window","requestAnimationFrame"],"sourceRoot":""}