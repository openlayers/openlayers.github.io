{"version":3,"file":"navigation-controls.js","mappings":"4KA4BA,MAAMA,UAAqBC,EAAA,EAIzB,WAAAC,CAAYC,GACVA,EAAUA,GAAoB,CAAC,EAE/BC,MAAM,CACJC,QAASC,SAASC,cAAc,OAChCC,OAAQL,EAAQK,SAOlBC,KAAKC,OAASP,EAAQO,OAASP,EAAQO,OAAS,KAEhD,MAAMC,OACkBC,IAAtBT,EAAQQ,UAA0BR,EAAQQ,UAAY,iBAElDE,OAA0BD,IAAlBT,EAAQU,MAAsBV,EAAQU,MAAQ,IACtDC,OACiBF,IAArBT,EAAQW,SAAyBX,EAAQW,SAAW,gBAChDC,EAAST,SAASC,cAAc,UACtCQ,EAAOC,aAAa,OAAQ,UAC5BD,EAAOE,MAAQH,EACfC,EAAOG,YACY,iBAAVL,EAAqBP,SAASa,eAAeN,GAASA,GAG/DE,EAAOK,iBACLC,EAAA,EAAUC,MACVb,KAAKc,aAAaC,KAAKf,OACvB,GAGF,MAAMgB,EACJd,EAAY,IAAM,KAAqB,IAAM,KACzCN,EAAUI,KAAKJ,QACrBA,EAAQM,UAAYc,EACpBpB,EAAQa,YAAYH,EACtB,CAMA,YAAAQ,CAAaG,GACXA,EAAMC,iBACNlB,KAAKmB,oBACP,CAKA,kBAAAA,GACE,MACMC,EADMpB,KAAKqB,SACAC,UACXrB,EAAUD,KAAKC,QAEjB,QAAeD,KAAKC,OAAQmB,EAAKG,iBADjCH,EAAKG,gBAAgBC,YAEzBJ,EAAKK,aAAY,QAAkBxB,GACrC,EAGF,Q,gCCvFY,IAAIyB,EAAA,EAAI,CAClBC,UAAU,SAAkBC,OAAO,CACjC,IAAI,EAAa,CACf3B,OAAQ,CACN,kBAAmB,kBAAmB,kBACtC,uBAIN4B,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,KAGhBjC,OAAQ,MACRqB,KAAM,IAAIa,EAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,K","sources":["webpack:///../src/ol/control/ZoomToExtent.js","webpack:///./navigation-controls.js"],"sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport EventType from '../events/EventType.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {fromUserExtent} from '../proj.js';\nimport Control from './Control.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label,\n    );\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false,\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent\n      ? view.getProjection().getExtent()\n      : fromUserExtent(this.extent, view.getProjection());\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ZoomToExtent from '../src/ol/control/ZoomToExtent.js';\nimport {defaults as defaultControls} from '../src/ol/control/defaults.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nconst map = new Map({\n  controls: defaultControls().extend([\n    new ZoomToExtent({\n      extent: [\n        813079.7791264898, 5929220.284081122, 848966.9639063801,\n        5936863.986909639,\n      ],\n    }),\n  ]),\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n"],"names":["ZoomToExtent","Control","constructor","options","super","element","document","createElement","target","this","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","EventType","CLICK","handleClick_","bind","cssClasses","event","preventDefault","handleZoomToExtent","view","getMap","getView","getProjection","getExtent","fitInternal","Map","controls","extend","layers","Tile","source","OSM","View","center","zoom"],"sourceRoot":""}