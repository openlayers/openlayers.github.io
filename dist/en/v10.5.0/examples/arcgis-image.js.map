{"version":3,"file":"arcgis-image.js","mappings":"4KAiDA,MAAMA,UAAwB,KAI5B,WAAAC,CAAYC,GAGVC,MAAM,CACJC,cAHFF,EAAUA,GAAoB,CAAC,GAGPE,aACtBC,YAAaH,EAAQG,YACrBC,WAAYJ,EAAQI,WACpBC,YAAaL,EAAQK,cAOvBC,KAAKC,kBACqBC,IAAxBR,EAAQS,YAA4BT,EAAQS,YAAc,KAM5DH,KAAKI,YAA2BF,IAAlBR,EAAQW,OAAsBX,EAAQW,MAMpDL,KAAKM,KAAOZ,EAAQa,IAMpBP,KAAKQ,wBAC2BN,IAA9BR,EAAQe,kBACJf,EAAQe,kBACR,KAMNT,KAAKU,QAAUC,OAAOC,OAAO,CAAC,EAAGlB,EAAQmB,QAMzCb,KAAKc,WAAa,CAAC,EAAG,GAMtBd,KAAKe,kBAAoB,EAMzBf,KAAKgB,YAA2Bd,IAAlBR,EAAQuB,MAAsBvB,EAAQuB,MAAQ,IAM5DjB,KAAKkB,kBAAoB,IAC3B,CAQA,SAAAC,GACE,OAAOnB,KAAKU,OACd,CAUA,gBAAAU,CAAiBC,EAAQC,EAAYC,EAAYzB,GAC/C,YAAkBI,IAAdF,KAAKM,KACA,MAEJN,KAAKwB,QAAUxB,KAAKkB,oBAAsBpB,IAE7CE,KAAKkB,kBAAoBpB,EACzBE,KAAKwB,QAAS,OAAa,CACzBrB,YAAaH,KAAKC,aAClBY,OAAQb,KAAKU,QACbZ,WAAYA,EACZO,MAAOL,KAAKI,OACZG,IAAKP,KAAKM,KACVW,MAAOjB,KAAKgB,OACZS,KAAM,CAACC,EAAOC,KACZ3B,KAAK0B,MAAME,SAASF,GACpB1B,KAAKQ,mBAAmBR,KAAK0B,MAAOC,IAC7B,QAAOD,OAKb/B,MAAMyB,iBAAiBC,EAAQC,EAAYC,EAAYzB,GAChE,CAOA,oBAAA+B,GACE,OAAO7B,KAAKQ,kBACd,CAOA,MAAAsB,GACE,OAAO9B,KAAKM,IACd,CAOA,oBAAAyB,CAAqBtB,GACnBT,KAAKQ,mBAAqBC,EAC1BT,KAAKgC,SACP,CAOA,MAAAC,CAAO1B,GACDA,GAAOP,KAAKM,OACdN,KAAKM,KAAOC,EACZP,KAAKwB,OAAS,KACdxB,KAAKgC,UAET,CAOA,SAAAE,CAAUrB,GACRb,KAAKU,QAAUC,OAAOC,OAAO,CAAC,EAAGC,GACjCb,KAAKgC,SACP,CAOA,YAAAG,CAAatB,GACXF,OAAOC,OAAOZ,KAAKU,QAASG,GAC5Bb,KAAKgC,SACP,CAKA,OAAAA,GACEhC,KAAK0B,MAAQ,KACb/B,MAAMqC,SACR,EAGF,Q,UCpOA,MAIM,EAAS,CACb,IAAII,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAIC,EAAA,EAAW,CACbF,OAAQ,IAAI,EAAgB,CAC1BpB,MAAO,EACPJ,OAAQ,CAAC,EACTN,IAXJ,iFAeU,IAAIiC,EAAA,EAAI,CAClBC,OAAQ,EACRC,OAAQ,MACRC,KAAM,IAAIC,EAAA,GAAK,CACbC,OAAQ,EAAE,SAAU,SACpBC,KAAM,K","sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport {decode} from '../Image.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {createLoader} from './arcgisRest.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options} [options] Image ArcGIS Rest Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.loaderProjection_ = null;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @override\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader || this.loaderProjection_ !== projection) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loaderProjection_ = projection;\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  setParams(params) {\n    this.params_ = Object.assign({}, params);\n    this.changed();\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @override\n   */\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport ImageArcGISRest from '../src/ol/source/ImageArcGISRest.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nconst url =\n  'https://sampleserver6.arcgisonline.com/ArcGIS/rest/services/' +\n  'USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM(),\n  }),\n  new ImageLayer({\n    source: new ImageArcGISRest({\n      ratio: 1,\n      params: {},\n      url: url,\n    }),\n  }),\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n  }),\n});\n"],"names":["ImageArcGISRest","constructor","options","super","attributions","interpolate","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","Object","assign","params","imageSize_","renderedRevision_","ratio_","ratio","loaderProjection_","getParams","getImageInternal","extent","resolution","pixelRatio","loader","load","image","src","setImage","getImageLoadFunction","getUrl","setImageLoadFunction","changed","setUrl","setParams","updateParams","Tile","source","OSM","Image","Map","layers","target","view","View","center","zoom"],"sourceRoot":""}