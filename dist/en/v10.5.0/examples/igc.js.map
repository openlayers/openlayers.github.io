{"version":3,"file":"igc.js","mappings":"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","sources":["webpack:///./igc.js"],"sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport IGC from '../src/ol/format/IGC.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport Point from '../src/ol/geom/Point.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport {getVectorContext} from '../src/ol/render.js';\nimport OSM, {ATTRIBUTION} from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport CircleStyle from '../src/ol/style/Circle.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst colors = {\n  'Clement Latour': 'rgba(0, 0, 255, 0.7)',\n  'Damien de Baesnt': 'rgba(0, 215, 255, 0.7)',\n  'Sylvain Dhonneur': 'rgba(0, 165, 255, 0.7)',\n  'Tom Payne': 'rgba(0, 255, 255, 0.7)',\n  'Ulrich Prinz': 'rgba(0, 215, 255, 0.7)',\n};\n\nconst styleCache = {};\nconst styleFunction = function (feature) {\n  const color = colors[feature.get('PLT')];\n  let style = styleCache[color];\n  if (!style) {\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: 3,\n      }),\n    });\n    styleCache[color] = style;\n  }\n  return style;\n};\n\nconst vectorSource = new VectorSource();\n\nconst igcUrls = [\n  'data/igc/Clement-Latour.igc',\n  'data/igc/Damien-de-Baenst.igc',\n  'data/igc/Sylvain-Dhonneur.igc',\n  'data/igc/Tom-Payne.igc',\n  'data/igc/Ulrich-Prinz.igc',\n];\n\nfunction get(url, callback) {\n  const client = new XMLHttpRequest();\n  client.open('GET', url);\n  client.onload = function () {\n    callback(client.responseText);\n  };\n  client.send();\n}\n\nconst igcFormat = new IGC();\nfor (let i = 0; i < igcUrls.length; ++i) {\n  get(igcUrls[i], function (data) {\n    const features = igcFormat.readFeatures(data, {\n      featureProjection: 'EPSG:3857',\n    });\n    vectorSource.addFeatures(features);\n  });\n}\n\nconst time = {\n  start: Infinity,\n  stop: -Infinity,\n  duration: 0,\n};\nvectorSource.on('addfeature', function (event) {\n  const geometry = event.feature.getGeometry();\n  time.start = Math.min(time.start, geometry.getFirstCoordinate()[2]);\n  time.stop = Math.max(time.stop, geometry.getLastCoordinate()[2]);\n  time.duration = time.stop - time.start;\n});\n\nconst vectorLayer = new VectorLayer({\n  source: vectorSource,\n  style: styleFunction,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM({\n        attributions: [\n          'All maps Â© <a href=\"https://www.opencyclemap.org/\">OpenCycleMap</a>',\n          ATTRIBUTION,\n        ],\n        url:\n          'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +\n          '?apikey=0e6fc415256d4fbb9b5166a718591d71',\n      }),\n    }),\n    vectorLayer,\n  ],\n  target: 'map',\n  view: new View({\n    center: [703365.7089403362, 5714629.865071137],\n    zoom: 9,\n  }),\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function (coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  const info = document.getElementById('info');\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n    info.innerHTML = '&nbsp;';\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    const date = new Date(closestPoint[2] * 1000);\n    info.innerHTML =\n      closestFeature.get('PLT') + ' (' + date.toUTCString() + ')';\n    const coordinates = [coordinate, [closestPoint[0], closestPoint[1]]];\n    if (line === null) {\n      line = new LineString(coordinates);\n    } else {\n      line.setCoordinates(coordinates);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function (evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function (evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,0,0,0.9)',\n  width: 1,\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 5,\n    fill: null,\n    stroke: stroke,\n  }),\n});\nvectorLayer.on('postrender', function (evt) {\n  const vectorContext = getVectorContext(evt);\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nconst featureOverlay = new VectorLayer({\n  source: new VectorSource(),\n  map: map,\n  style: new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({\n        color: 'rgba(255,0,0,0.9)',\n      }),\n    }),\n  }),\n});\n\nconst control = document.getElementById('time');\ncontrol.addEventListener('input', function () {\n  const value = parseInt(control.value, 10) / 100;\n  const m = time.start + time.duration * value;\n  vectorSource.forEachFeature(function (feature) {\n    const geometry =\n      /** @type {import('../src/ol/geom/LineString.js').default} */ (\n        feature.getGeometry()\n      );\n    const coordinate = geometry.getCoordinateAtM(m, true);\n    let highlight = feature.get('highlight');\n    if (highlight === undefined) {\n      highlight = new Feature(new Point(coordinate));\n      feature.set('highlight', highlight);\n      featureOverlay.getSource().addFeature(highlight);\n    } else {\n      highlight.getGeometry().setCoordinates(coordinate);\n    }\n  });\n  map.render();\n});\n"],"names":["colors","styleCache","vectorSource","igcUrls","get","url","callback","client","XMLHttpRequest","open","onload","responseText","send","igcFormat","i","length","data","features","readFeatures","featureProjection","addFeatures","time","start","Infinity","stop","duration","on","event","geometry","feature","getGeometry","Math","min","getFirstCoordinate","max","getLastCoordinate","vectorLayer","source","style","color","stroke","width","map","layers","attributions","target","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","info","document","getElementById","innerHTML","closestPoint","getClosestPoint","setCoordinates","date","Date","toUTCString","coordinates","render","evt","dragging","getEventCoordinate","originalEvent","image","radius","fill","vectorContext","setStyle","drawGeometry","featureOverlay","control","addEventListener","value","parseInt","m","forEachFeature","getCoordinateAtM","highlight","undefined","set","getSource","addFeature"],"sourceRoot":""}