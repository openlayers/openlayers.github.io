"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3649],{1115:function(t,e,s){class i{static equalsWithTolerance(t,e,s){return Math.abs(t-e)<=s}}class n extends Error{constructor(t){super(t),this.name=Object.keys({Exception:n})[0]}toString(){return this.message}}class r extends n{constructor(t){super(t),this.name=Object.keys({IllegalArgumentException:r})[0]}}class o{constructor(t,e){this.low=e||0,this.high=t||0}static toBinaryString(t){let e,s="";for(e=2147483648;e>0;e>>>=1)s+=(t.high&e)===e?"1":"0";for(e=2147483648;e>0;e>>>=1)s+=(t.low&e)===e?"1":"0";return s}}function a(){}function l(){}function h(){}a.NaN=NaN,a.isNaN=t=>Number.isNaN(t),a.isInfinite=t=>!Number.isFinite(t),a.MAX_VALUE=Number.MAX_VALUE,a.POSITIVE_INFINITY=Number.POSITIVE_INFINITY,a.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,"function"==typeof Float64Array&&"function"==typeof Int32Array?function(){const t=2146435072,e=new Float64Array(1),s=new Int32Array(e.buffer);a.doubleToLongBits=function(i){e[0]=i;let n=0|s[0],r=0|s[1];return(r&t)===t&&1048575&r&&0!==n&&(n=0,r=2146959360),new o(r,n)},a.longBitsToDouble=function(t){return s[0]=t.low,s[1]=t.high,e[0]}}():function(){const t=1023,e=Math.log2,s=Math.floor,i=Math.pow,n=function(){for(let t=53;t>0;t--){const n=i(2,t)-1;if(s(e(n))+1===t)return n}return 0}();a.doubleToLongBits=function(r){let a,l,h,c,u,g,d,_,p;if(r<0||1/r===Number.NEGATIVE_INFINITY?(g=1<<31,r=-r):g=0,0===r)return p=0,_=g,new o(_,p);if(r===1/0)return p=0,_=2146435072|g,new o(_,p);if(r!=r)return p=0,_=2146959360,new o(_,p);if(c=0,p=0,a=s(r),a>1)if(a<=n)c=s(e(a)),c<=20?(p=0,_=a<<20-c&1048575):(h=c-20,l=i(2,h),p=a%l<<32-h,_=a/l&1048575);else for(h=a,p=0;l=h/2,h=s(l),0!==h;)c++,p>>>=1,p|=(1&_)<<31,_>>>=1,l!==h&&(_|=524288);if(d=c+t,u=0===a,a=r-a,c<52&&0!==a)for(h=0;;){if(l=2*a,l>=1?(a=l-1,u?(d--,u=!1):(h<<=1,h|=1,c++)):(a=l,u?0==--d&&(c++,u=!1):(h<<=1,c++)),20===c)_|=h,h=0;else if(52===c){p|=h;break}if(1===l){c<20?_|=h<<20-c:c<52&&(p|=h<<52-c);break}}return _|=d<<20,_|=g,new o(_,p)},a.longBitsToDouble=function(e){let s,n,r,o;const a=e.high,l=e.low,h=a&1<<31?-1:1;for(r=((2146435072&a)>>20)-t,o=0,n=1<<19,s=1;s<=20;s++)a&n&&(o+=i(2,-s)),n>>>=1;for(n=1<<31,s=21;s<=52;s++)l&n&&(o+=i(2,-s)),n>>>=1;if(-1023===r){if(0===o)return 0*h;r=-1022}else{if(1024===r)return 0===o?h/0:NaN;o+=1}return h*o*i(2,r)}}();class c extends n{constructor(t){super(t),this.name=Object.keys({RuntimeException:c})[0]}}class u extends c{constructor(){super(),u.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)c.constructor_.call(this);else if(1===arguments.length){const t=arguments[0];c.constructor_.call(this,t)}}}class g{static isTrue(){if(1===arguments.length){const t=arguments[0];g.isTrue(t,null)}else if(2===arguments.length){const t=arguments[1];if(!arguments[0])throw null===t?new u:new u(t)}}static shouldNeverReachHere(){if(0===arguments.length)g.shouldNeverReachHere(null);else if(1===arguments.length){const t=arguments[0];throw new u("Should never reach here"+(null!==t?": "+t:""))}}static equals(){if(2===arguments.length){const t=arguments[0],e=arguments[1];g.equals(t,e,null)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(!e.equals(t))throw new u("Expected "+t+" but encountered "+e+(null!==s?": "+s:""))}}}function d(){}function _(){}const p=new ArrayBuffer(8),f=new Float64Array(p),m=new Int32Array(p);class y{constructor(){y.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)y.constructor_.call(this,0,0);else if(1===arguments.length){const t=arguments[0];y.constructor_.call(this,t.x,t.y,t.getZ())}else if(2===arguments.length){const t=arguments[0],e=arguments[1];y.constructor_.call(this,t,e,y.NULL_ORDINATE)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.x=t,this.y=e,this.z=s}}static hashCode(t){return f[0]=t,m[0]^m[1]}equals2D(){if(1===arguments.length){const t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){const t=arguments[0],e=arguments[1];return!!i.equalsWithTolerance(this.x,t.x,e)&&!!i.equalsWithTolerance(this.y,t.y,e)}}setM(t){throw new r("Invalid ordinate index: "+y.M)}equals3D(t){return this.x===t.x&&this.y===t.y&&(this.getZ()===t.getZ()||a.isNaN(this.getZ())&&a.isNaN(t.getZ()))}setX(t){this.x=t}compareTo(t){const e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0}getX(){return this.x}copy(){return new y(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+")"}distance3D(t){const e=this.x-t.x,s=this.y-t.y,i=this.getZ()-t.getZ();return Math.sqrt(e*e+s*s+i*i)}getY(){return this.y}getM(){return a.NaN}setOrdinate(t,e){switch(t){case y.X:this.x=e;break;case y.Y:this.y=e;break;case y.Z:this.setZ(e);break;default:throw new r("Invalid ordinate index: "+t)}}getZ(){return this.z}getOrdinate(t){switch(t){case y.X:return this.x;case y.Y:return this.y;case y.Z:return this.getZ()}throw new r("Invalid ordinate index: "+t)}equals(t){return t instanceof y&&this.equals2D(t)}equalInZ(t,e){return i.equalsWithTolerance(this.getZ(),t.getZ(),e)}setZ(t){this.z=t}clone(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return g.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw t}}setY(t){this.y=t}distance(t){const e=this.x-t.x,s=this.y-t.y;return Math.sqrt(e*e+s*s)}hashCode(){let t=17;return t=37*t+y.hashCode(this.x),t=37*t+y.hashCode(this.y),t}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}get interfaces_(){return[l,d,h]}}class x{constructor(){x.constructor_.apply(this,arguments)}static constructor_(){if(this._dimensionsToTest=2,0===arguments.length)x.constructor_.call(this,2);else if(1===arguments.length){const t=arguments[0];if(2!==t&&3!==t)throw new r("only 2 or 3 dimensions may be specified");this._dimensionsToTest=t}}static compare(t,e){return t<e?-1:t>e?1:a.isNaN(t)?a.isNaN(e)?0:-1:a.isNaN(e)?1:0}compare(t,e){const s=x.compare(t.x,e.x);if(0!==s)return s;const i=x.compare(t.y,e.y);if(0!==i)return i;if(this._dimensionsToTest<=2)return 0;return x.compare(t.getZ(),e.getZ())}get interfaces_(){return[_]}}function I(t,e){return t.interfaces_&&t.interfaces_.indexOf(e)>-1}y.DimensionalComparator=x,y.NULL_ORDINATE=a.NaN,y.X=0,y.Y=1,y.Z=2,y.M=3;class E{static ofLine(t){const e=t.size();if(e<=1)return 0;let s=0;const i=new y;t.getCoordinate(0,i);let n=i.x,r=i.y;for(let o=1;o<e;o++){t.getCoordinate(o,i);const e=i.x,a=i.y,l=e-n,h=a-r;s+=Math.sqrt(l*l+h*h),n=e,r=a}return s}}class N{filter(t){}}class T extends n{constructor(t){super(t),this.name=Object.keys({UnsupportedOperationException:T})[0]}}class L{add(){}addAll(){}isEmpty(){}iterator(){}size(){}toArray(){}remove(){}}class S extends n{constructor(t){super(t),this.name=Object.keys({IndexOutOfBoundsException:S})[0]}}class C extends L{get(){}set(){}isEmpty(){}}class R extends n{constructor(t){super(t),this.name=Object.keys({NoSuchElementException:R})[0]}}class w extends C{constructor(t){super(),this.array=[],t instanceof L&&this.addAll(t)}get interfaces_(){return[C,L]}ensureCapacity(){}add(t){return 1===arguments.length?this.array.push(t):this.array.splice(arguments[0],0,arguments[1]),!0}clear(){this.array=[]}addAll(t){for(const e of t)this.array.push(e)}set(t,e){const s=this.array[t];return this.array[t]=e,s}iterator(){return new O(this)}get(t){if(t<0||t>=this.size())throw new S;return this.array[t]}isEmpty(){return 0===this.array.length}sort(t){t?this.array.sort(((e,s)=>t.compare(e,s))):this.array.sort()}size(){return this.array.length}toArray(){return this.array.slice()}remove(t){for(let e=0,s=this.array.length;e<s;e++)if(this.array[e]===t)return!!this.array.splice(e,1);return!1}[Symbol.iterator](){return this.array.values()}}class O{constructor(t){this.arrayList=t,this.position=0}next(){if(this.position===this.arrayList.size())throw new R;return this.arrayList.get(this.position++)}hasNext(){return this.position<this.arrayList.size()}set(t){return this.arrayList.set(this.position-1,t)}remove(){this.arrayList.remove(this.arrayList.get(this.position))}}class M extends w{constructor(){super(),M.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.ensureCapacity(t.length),this.add(t,!0)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.ensureCapacity(t.length),this.add(t,e)}}getCoordinate(t){return this.get(t)}addAll(){if(2===arguments.length&&"boolean"==typeof arguments[1]&&I(arguments[0],L)){const t=arguments[1];let e=!1;for(let s=arguments[0].iterator();s.hasNext();)this.add(s.next(),t),e=!0;return e}return super.addAll.apply(this,arguments)}clone(){const t=super.clone.call(this);for(let e=0;e<this.size();e++)t.add(e,this.get(e).clone());return t}closeRing(){if(this.size()>0){const t=this.get(0).copy();this.add(t,!1)}}toCoordinateArray(){if(0===arguments.length)return this.toArray(M.coordArrayType);if(1===arguments.length){if(arguments[0])return this.toArray(M.coordArrayType);const t=this.size(),e=new Array(t).fill(null);for(let s=0;s<t;s++)e[s]=this.get(t-s-1);return e}}add(){if(1===arguments.length){const t=arguments[0];return super.add.call(this,t)}if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return this.add(t,e,!0),!0}if(arguments[0]instanceof y&&"boolean"==typeof arguments[1]){const t=arguments[0];if(!arguments[1]&&this.size()>=1){if(this.get(this.size()-1).equals2D(t))return null}super.add.call(this,t)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return this.add(t,e),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];if(arguments[2])for(let s=0;s<t.length;s++)this.add(t[s],e);else for(let s=t.length-1;s>=0;s--)this.add(t[s],e);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1];if(!arguments[2]){const s=this.size();if(s>0){if(t>0){if(this.get(t-1).equals2D(e))return null}if(t<s){if(this.get(t).equals2D(e))return null}}}super.add.call(this,t,e)}}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];let n=1;s>i&&(n=-1);for(let r=s;r!==i;r+=n)this.add(t[r],e);return!0}}}M.coordArrayType=new Array(0).fill(null);class A extends y{constructor(){super(),A.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)y.constructor_.call(this);else if(1===arguments.length){if(arguments[0]instanceof A){const t=arguments[0];y.constructor_.call(this,t.x,t.y)}else if(arguments[0]instanceof y){const t=arguments[0];y.constructor_.call(this,t.x,t.y)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];y.constructor_.call(this,t,e,y.NULL_ORDINATE)}}setOrdinate(t,e){switch(t){case A.X:this.x=e;break;case A.Y:this.y=e;break;default:throw new r("Invalid ordinate index: "+t)}}setZ(t){throw new r("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new A(this)}toString(){return"("+this.x+", "+this.y+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}getZ(){return y.NULL_ORDINATE}getOrdinate(t){switch(t){case A.X:return this.x;case A.Y:return this.y}throw new r("Invalid ordinate index: "+t)}}A.X=0,A.Y=1,A.Z=-1,A.M=-1;class b extends y{constructor(){super(),b.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)y.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof b){const t=arguments[0];y.constructor_.call(this,t.x,t.y),this._m=t._m}else if(arguments[0]instanceof y){const t=arguments[0];y.constructor_.call(this,t.x,t.y),this._m=this.getM()}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];y.constructor_.call(this,t,e,y.NULL_ORDINATE),this._m=s}}setM(t){this._m=t}setZ(t){throw new r("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new b(this)}toString(){return"("+this.x+", "+this.y+" m="+this.getM()+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}getM(){return this._m}setOrdinate(t,e){switch(t){case b.X:this.x=e;break;case b.Y:this.y=e;break;case b.M:this._m=e;break;default:throw new r("Invalid ordinate index: "+t)}}getZ(){return y.NULL_ORDINATE}getOrdinate(t){switch(t){case b.X:return this.x;case b.Y:return this.y;case b.M:return this._m}throw new r("Invalid ordinate index: "+t)}}b.X=0,b.Y=1,b.Z=-1,b.M=2;class P extends y{constructor(){super(),P.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)y.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof P){const t=arguments[0];y.constructor_.call(this,t),this._m=t._m}else if(arguments[0]instanceof y){const t=arguments[0];y.constructor_.call(this,t),this._m=this.getM()}}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];y.constructor_.call(this,t,e,s),this._m=i}}setM(t){this._m=t}getOrdinate(t){switch(t){case y.X:return this.x;case y.Y:return this.y;case y.Z:return this.getZ();case y.M:return this.getM()}throw new r("Invalid ordinate index: "+t)}copy(){return new P(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+" m="+this.getM()+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}getM(){return this._m}setOrdinate(t,e){switch(t){case y.X:this.x=e;break;case y.Y:this.y=e;break;case y.Z:this.z=e;break;case y.M:this._m=e;break;default:throw new r("Invalid ordinate index: "+t)}}}class D{static measures(t){return t instanceof A?0:t instanceof b||t instanceof P?1:0}static create(){if(1===arguments.length){const t=arguments[0];return D.create(t,0)}if(2===arguments.length){const t=arguments[0],e=arguments[1];return 2===t?new A:3===t&&0===e?new y:3===t&&1===e?new b:4===t&&1===e?new P:new y}}static dimension(t){return t instanceof A?2:t instanceof b?3:t instanceof P?4:3}}class v{static log10(t){const e=Math.log(t);return a.isInfinite(e)||a.isNaN(e)?e:e/v.LOG_10}static min(t,e,s,i){let n=t;return e<n&&(n=e),s<n&&(n=s),i<n&&(n=i),n}static clamp(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2];return t<e?e:t>s?s:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];return t<e?e:t>s?s:t}}static average(t,e){return(t+e)/2}static wrap(t,e){return t<0?e- -t%e:t%e}static max(){if(3===arguments.length){const t=arguments[1],e=arguments[2];let s=arguments[0];return t>s&&(s=t),e>s&&(s=e),s}if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3];let i=arguments[0];return t>i&&(i=t),e>i&&(i=e),s>i&&(i=s),i}}}v.LOG_10=Math.log(10);class F{static arraycopy(t,e,s,i,n){let r=0;for(let o=e;o<e+n;o++)s[i+r]=t[o],r++}static getProperty(t){return{"line.separator":"\n"}[t]}}class G{constructor(){G.constructor_.apply(this,arguments)}static constructor_(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof G){const t=arguments[0];this.init(t)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t.x,e.x,t.y,e.y)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.init(t,e,s,i)}}static intersects(){if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];return s.x>=(t.x<e.x?t.x:e.x)&&s.x<=(t.x>e.x?t.x:e.x)&&s.y>=(t.y<e.y?t.y:e.y)&&s.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];let n=Math.min(s.x,i.x),r=Math.max(s.x,i.x),o=Math.min(t.x,e.x),a=Math.max(t.x,e.x);return!(o>r)&&(!(a<n)&&(n=Math.min(s.y,i.y),r=Math.max(s.y,i.y),o=Math.min(t.y,e.y),a=Math.max(t.y,e.y),!(o>r)&&!(a<n)))}}getArea(){return this.getWidth()*this.getHeight()}getMinX(){return this._minx}expandToInclude(){if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof G){const t=arguments[0];if(t.isNull())return null;this.isNull()?(this._minx=t.getMinX(),this._maxx=t.getMaxX(),this._miny=t.getMinY(),this._maxy=t.getMaxY()):(t._minx<this._minx&&(this._minx=t._minx),t._maxx>this._maxx&&(this._maxx=t._maxx),t._miny<this._miny&&(this._miny=t._miny),t._maxy>this._maxy&&(this._maxy=t._maxy))}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.isNull()?(this._minx=t,this._maxx=t,this._miny=e,this._maxy=e):(t<this._minx&&(this._minx=t),t>this._maxx&&(this._maxx=t),e<this._miny&&(this._miny=e),e>this._maxy&&(this._maxy=e))}}compareTo(t){const e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0}translate(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)}copy(){return new G(this)}expandBy(){if(1===arguments.length){const t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.isNull())return null;this._minx-=t,this._maxx+=t,this._miny-=e,this._maxy+=e,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}}contains(){if(1===arguments.length){if(arguments[0]instanceof G){const t=arguments[0];return this.covers(t)}if(arguments[0]instanceof y){const t=arguments[0];return this.covers(t)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.covers(t,e)}}hashCode(){let t=17;return t=37*t+y.hashCode(this._minx),t=37*t+y.hashCode(this._maxx),t=37*t+y.hashCode(this._miny),t=37*t+y.hashCode(this._maxy),t}equals(t){if(!(t instanceof G))return!1;const e=t;return this.isNull()?e.isNull():this._maxx===e.getMaxX()&&this._maxy===e.getMaxY()&&this._minx===e.getMinX()&&this._miny===e.getMinY()}intersection(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new G;const e=this._minx>t._minx?this._minx:t._minx,s=this._miny>t._miny?this._miny:t._miny,i=this._maxx<t._maxx?this._maxx:t._maxx,n=this._maxy<t._maxy?this._maxy:t._maxy;return new G(e,i,s,n)}isNull(){return this._maxx<this._minx}getMaxX(){return this._maxx}covers(){if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof G){const t=arguments[0];return!this.isNull()&&!t.isNull()&&(t.getMinX()>=this._minx&&t.getMaxX()<=this._maxx&&t.getMinY()>=this._miny&&t.getMaxY()<=this._maxy)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];return!this.isNull()&&(t>=this._minx&&t<=this._maxx&&e>=this._miny&&e<=this._maxy)}}intersects(){if(1===arguments.length){if(arguments[0]instanceof G){const t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof y){const t=arguments[0];return this.intersects(t.x,t.y)}}else if(2===arguments.length){if(arguments[0]instanceof y&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1];if(this.isNull())return!1;if((t.x<e.x?t.x:e.x)>this._maxx)return!1;if((t.x>e.x?t.x:e.x)<this._minx)return!1;if((t.y<e.y?t.y:e.y)>this._maxy)return!1;return!((t.y>e.y?t.y:e.y)<this._miny)}if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return!this.isNull()&&!(t>this._maxx||t<this._minx||e>this._maxy||e<this._miny)}}}getMinY(){return this._miny}getDiameter(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return Math.sqrt(t*t+e*e)}minExtent(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return t<e?t:e}getWidth(){return this.isNull()?0:this._maxx-this._minx}toString(){return"Env["+this._minx+" : "+this._maxx+", "+this._miny+" : "+this._maxy+"]"}setToNull(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1}disjoint(t){return!(!this.isNull()&&!t.isNull())||(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}getHeight(){return this.isNull()?0:this._maxy-this._miny}maxExtent(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return t>e?t:e}centre(){return this.isNull()?null:new y((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)}init(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof G){const t=arguments[0];this._minx=t._minx,this._maxx=t._maxx,this._miny=t._miny,this._maxy=t._maxy}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t.x,e.x,t.y,e.y)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];t<e?(this._minx=t,this._maxx=e):(this._minx=e,this._maxx=t),s<i?(this._miny=s,this._maxy=i):(this._miny=i,this._maxy=s)}}getMaxY(){return this._maxy}distance(t){if(this.intersects(t))return 0;let e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);let s=0;return this._maxy<t._miny?s=t._miny-this._maxy:this._miny>t._maxy&&(s=this._miny-t._maxy),0===e?s:0===s?e:Math.sqrt(e*e+s*s)}get interfaces_(){return[l,h]}}class q{static scroll(t,e){const s=q.indexOf(e,t);if(s<0)return null;const i=new Array(t.length).fill(null);F.arraycopy(t,s,i,0,t.length-s),F.arraycopy(t,0,i,t.length-s,s),F.arraycopy(i,0,t,0,t.length)}static removeRepeatedPoints(t){if(!q.hasRepeatedPoints(t))return t;return new M(t,!1).toCoordinateArray()}static reverse(t){const e=t.length-1,s=Math.trunc(e/2);for(let i=0;i<=s;i++){const s=t[i];t[i]=t[e-i],t[e-i]=s}}static removeNull(t){let e=0;for(let s=0;s<t.length;s++)null!==t[s]&&e++;const s=new Array(e).fill(null);if(0===e)return s;let i=0;for(let e=0;e<t.length;e++)null!==t[e]&&(s[i++]=t[e]);return s}static copyDeep(){if(1===arguments.length){const t=arguments[0],e=new Array(t.length).fill(null);for(let s=0;s<t.length;s++)e[s]=t[s].copy();return e}if(5===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4];for(let r=0;r<n;r++)s[i+r]=t[e+r].copy()}}static isEqualReversed(t,e){for(let s=0;s<t.length;s++){const i=t[s],n=e[t.length-s-1];if(0!==i.compareTo(n))return!1}return!0}static envelope(t){const e=new G;for(let s=0;s<t.length;s++)e.expandToInclude(t[s]);return e}static extract(t,e,s){e=v.clamp(e,0,t.length);let i=(s=v.clamp(s,-1,t.length))-e+1;s<0&&(i=0),e>=t.length&&(i=0),s<e&&(i=0);const n=new Array(i).fill(null);if(0===i)return n;let r=0;for(let i=e;i<=s;i++)n[r++]=t[i];return n}static isRing(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])}static ptNotInList(t,e){for(let s=0;s<t.length;s++){const i=t[s];if(q.indexOf(i,e)<0)return i}return null}static equals(){if(2===arguments.length){const t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++)if(!t[s].equals(e[s]))return!1;return!0}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(0!==s.compare(t[i],e[i]))return!1;return!0}}static intersection(t,e){const s=new M;for(let i=0;i<t.length;i++)e.intersects(t[i])&&s.add(t[i],!0);return s.toCoordinateArray()}static measures(t){if(null===t||0===t.length)return 0;let e=0;for(const s of t)e=Math.max(e,D.measures(s));return e}static hasRepeatedPoints(t){for(let e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1}static toCoordinateArray(t){return t.toArray(q.coordArrayType)}static dimension(t){if(null===t||0===t.length)return 3;let e=0;for(const s of t)e=Math.max(e,D.dimension(s));return e}static atLeastNCoordinatesOrNothing(t,e){return e.length>=t?e:[]}static indexOf(t,e){for(let s=0;s<e.length;s++)if(t.equals(e[s]))return s;return-1}static increasingDirection(t){for(let e=0;e<Math.trunc(t.length/2);e++){const s=t.length-1-e,i=t[e].compareTo(t[s]);if(0!==i)return i}return 1}static compare(t,e){let s=0;for(;s<t.length&&s<e.length;){const i=t[s].compareTo(e[s]);if(0!==i)return i;s++}return s<e.length?-1:s<t.length?1:0}static minCoordinate(t){let e=null;for(let s=0;s<t.length;s++)(null===e||e.compareTo(t[s])>0)&&(e=t[s]);return e}}q.ForwardComparator=class{compare(t,e){const s=t,i=e;return q.compare(s,i)}get interfaces_(){return[_]}},q.BidirectionalComparator=class{compare(t,e){const s=t,i=e;if(s.length<i.length)return-1;if(s.length>i.length)return 1;if(0===s.length)return 0;const n=q.compare(s,i);return q.isEqualReversed(s,i)?0:n}OLDcompare(t,e){const s=t,i=e;if(s.length<i.length)return-1;if(s.length>i.length)return 1;if(0===s.length)return 0;const n=q.increasingDirection(s),r=q.increasingDirection(i);let o=n>0?0:s.length-1,a=r>0?0:s.length-1;for(let t=0;t<s.length;t++){const t=s[o].compareTo(i[a]);if(0!==t)return t;o+=n,a+=r}return 0}get interfaces_(){return[_]}},q.coordArrayType=new Array(0).fill(null);class Y{static isWhitespace(t){return t<=32&&t>=0||127===t}static toUpperCase(t){return t.toUpperCase()}}class z{static toDimensionSymbol(t){switch(t){case z.FALSE:return z.SYM_FALSE;case z.TRUE:return z.SYM_TRUE;case z.DONTCARE:return z.SYM_DONTCARE;case z.P:return z.SYM_P;case z.L:return z.SYM_L;case z.A:return z.SYM_A}throw new r("Unknown dimension value: "+t)}static toDimensionValue(t){switch(Y.toUpperCase(t)){case z.SYM_FALSE:return z.FALSE;case z.SYM_TRUE:return z.TRUE;case z.SYM_DONTCARE:return z.DONTCARE;case z.SYM_P:return z.P;case z.SYM_L:return z.L;case z.SYM_A:return z.A}throw new r("Unknown dimension symbol: "+t)}}z.P=0,z.L=1,z.A=2,z.FALSE=-1,z.TRUE=-2,z.DONTCARE=-3,z.SYM_FALSE="F",z.SYM_TRUE="T",z.SYM_DONTCARE="*",z.SYM_P="0",z.SYM_L="1",z.SYM_A="2";class X{constructor(){X.constructor_.apply(this,arguments)}isGeometryCollection(){return this.getTypeCode()===X.TYPECODE_GEOMETRYCOLLECTION}getFactory(){return this._factory}getGeometryN(t){return this}getArea(){return 0}isRectangle(){return!1}equalsExact(t){return this===t||this.equalsExact(t,0)}geometryChanged(){this.apply(X.geometryChangedFilter)}geometryChangedAction(){this._envelope=null}equalsNorm(t){return null!==t&&this.norm().equalsExact(t.norm())}getLength(){return 0}getNumGeometries(){return 1}compareTo(){let t;if(1===arguments.length){const e=arguments[0];return t=e,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e)}if(2===arguments.length){const e=arguments[0],s=arguments[1];return t=e,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e,s)}}getUserData(){return this._userData}getSRID(){return this._SRID}getEnvelope(){return this.getFactory().toGeometry(this.getEnvelopeInternal())}static checkNotGeometryCollection(t){if(t.getTypeCode()===X.TYPECODE_GEOMETRYCOLLECTION)throw new r("This method does not support GeometryCollection arguments")}equal(t,e,s){return 0===s?t.equals(e):t.distance(e)<=s}norm(){const t=this.copy();return t.normalize(),t}reverse(){const t=this.reverseInternal();return null!=this.envelope&&(t.envelope=this.envelope.copy()),t.setSRID(this.getSRID()),t}copy(){const t=this.copyInternal();return t.envelope=null==this._envelope?null:this._envelope.copy(),t._SRID=this._SRID,t._userData=this._userData,t}getPrecisionModel(){return this._factory.getPrecisionModel()}getEnvelopeInternal(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new G(this._envelope)}setSRID(t){this._SRID=t}setUserData(t){this._userData=t}compare(t,e){const s=t.iterator(),i=e.iterator();for(;s.hasNext()&&i.hasNext();){const t=s.next(),e=i.next(),n=t.compareTo(e);if(0!==n)return n}return s.hasNext()?1:i.hasNext()?-1:0}hashCode(){return this.getEnvelopeInternal().hashCode()}isEquivalentClass(t){return this.getTypeCode()==t.getTypeCode()}get interfaces_(){return[d,l,h]}getClass(){return X}static hasNonEmptyElements(t){for(let e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1}static hasNullElements(t){for(let e=0;e<t.length;e++)if(null===t[e])return!0;return!1}}X.constructor_=function(t){t&&(this._envelope=null,this._userData=null,this._factory=t,this._SRID=t.getSRID())},X.TYPECODE_POINT=0,X.TYPECODE_MULTIPOINT=1,X.TYPECODE_LINESTRING=2,X.TYPECODE_LINEARRING=3,X.TYPECODE_MULTILINESTRING=4,X.TYPECODE_POLYGON=5,X.TYPECODE_MULTIPOLYGON=6,X.TYPECODE_GEOMETRYCOLLECTION=7,X.TYPENAME_POINT="Point",X.TYPENAME_MULTIPOINT="MultiPoint",X.TYPENAME_LINESTRING="LineString",X.TYPENAME_LINEARRING="LinearRing",X.TYPENAME_MULTILINESTRING="MultiLineString",X.TYPENAME_POLYGON="Polygon",X.TYPENAME_MULTIPOLYGON="MultiPolygon",X.TYPENAME_GEOMETRYCOLLECTION="GeometryCollection",X.geometryChangedFilter={get interfaces_(){return[N]},filter(t){t.geometryChangedAction()}};class B{filter(t){}}class U{}class k{getCoordinate(){if(1===arguments.length){}else if(2===arguments.length){}}getCoordinateCopy(t){}createCoordinate(){}getDimension(){}hasM(){return this.getMeasures()>0}getX(t){}hasZ(){return this.getDimension()-this.getMeasures()>2}getMeasures(){return 0}expandEnvelope(t){}copy(){}getY(t){}toCoordinateArray(){}getM(t){if(this.hasM()){const e=this.getDimension()-this.getMeasures();return this.getOrdinate(t,e)}return a.NaN}setOrdinate(t,e,s){}getZ(t){return this.hasZ()?this.getOrdinate(t,2):a.NaN}size(){}getOrdinate(t,e){}get interfaces_(){return[d]}}k.X=0,k.Y=1,k.Z=2,k.M=3;class V{static scroll(){if(2===arguments.length){if(I(arguments[0],k)&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];V.scroll(t,e,V.isRing(t))}else if(I(arguments[0],k)&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1],s=V.indexOf(e,t);if(s<=0)return null;V.scroll(t,s)}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(e<=0)return null;const i=t.copy(),n=s?t.size()-1:t.size();for(let s=0;s<n;s++)for(let r=0;r<t.getDimension();r++)t.setOrdinate(s,r,i.getOrdinate((e+s)%n,r));if(s)for(let e=0;e<t.getDimension();e++)t.setOrdinate(n,e,t.getOrdinate(0,e))}}static isEqual(t,e){const s=t.size();if(s!==e.size())return!1;const i=Math.min(t.getDimension(),e.getDimension());for(let n=0;n<s;n++)for(let s=0;s<i;s++){const i=t.getOrdinate(n,s),r=e.getOrdinate(n,s);if(t.getOrdinate(n,s)!==e.getOrdinate(n,s)&&(!a.isNaN(i)||!a.isNaN(r)))return!1}return!0}static minCoordinateIndex(){if(1===arguments.length){const t=arguments[0];return V.minCoordinateIndex(t,0,t.size()-1)}if(3===arguments.length){const t=arguments[0],e=arguments[2];let s=-1,i=null;for(let n=arguments[1];n<=e;n++){const e=t.getCoordinate(n);(null===i||i.compareTo(e)>0)&&(i=e,s=n)}return s}}static extend(t,e,s){const i=t.create(s,e.getDimension()),n=e.size();if(V.copy(e,0,i,0,n),n>0)for(let t=n;t<s;t++)V.copy(e,n-1,i,t,1);return i}static reverse(t){const e=t.size()-1,s=Math.trunc(e/2);for(let i=0;i<=s;i++)V.swap(t,i,e-i)}static ensureValidRing(t,e){const s=e.size();if(0===s)return e;if(s<=3)return V.createClosedRing(t,e,4);return e.getOrdinate(0,k.X)===e.getOrdinate(s-1,k.X)&&e.getOrdinate(0,k.Y)===e.getOrdinate(s-1,k.Y)?e:V.createClosedRing(t,e,s+1)}static minCoordinate(t){let e=null;for(let s=0;s<t.size();s++){const i=t.getCoordinate(s);(null===e||e.compareTo(i)>0)&&(e=i)}return e}static copyCoord(t,e,s,i){const n=Math.min(t.getDimension(),s.getDimension());for(let r=0;r<n;r++)s.setOrdinate(i,r,t.getOrdinate(e,r))}static isRing(t){const e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,k.X)===t.getOrdinate(e-1,k.X)&&t.getOrdinate(0,k.Y)===t.getOrdinate(e-1,k.Y))}static swap(t,e,s){if(e===s)return null;for(let i=0;i<t.getDimension();i++){const n=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(s,i)),t.setOrdinate(s,i,n)}}static copy(t,e,s,i,n){for(let r=0;r<n;r++)V.copyCoord(t,e+r,s,i+r)}static indexOf(t,e){for(let s=0;s<e.size();s++)if(t.x===e.getOrdinate(s,k.X)&&t.y===e.getOrdinate(s,k.Y))return s;return-1}static createClosedRing(t,e,s){const i=t.create(s,e.getDimension()),n=e.size();V.copy(e,0,i,0,n);for(let t=n;t<s;t++)V.copy(e,0,i,t,1);return i}}class H{filter(t){}}class Z{filter(t,e){}isGeometryChanged(){}isDone(){}}class W extends X{constructor(){super(),W.constructor_.apply(this,arguments)}static constructor_(){if(this._points=null,0===arguments.length);else if(2===arguments.length){const t=arguments[0],e=arguments[1];X.constructor_.call(this,e),this.init(t)}}computeEnvelopeInternal(){return this.isEmpty()?new G:this._points.expandEnvelope(new G)}isRing(){return this.isClosed()&&q.isRing(this.getCoordinates())}getCoordinates(){return this._points.toCoordinateArray()}copyInternal(){return new W(this._points.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t;if(this._points.size()!==s._points.size())return!1;for(let t=0;t<this._points.size();t++)if(!this.equal(this._points.getCoordinate(t),s._points.getCoordinate(t),e))return!1;return!0}return super.equalsExact.apply(this,arguments)}isClosed(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))}reverseInternal(){const t=this._points.copy();return V.reverse(t),this.getFactory().createLineString(t)}getEndPoint(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)}getTypeCode(){return X.TYPECODE_LINESTRING}getDimension(){return 1}getBoundary(){throw new T}isEquivalentClass(t){return t instanceof W}getCoordinateSequence(){return this._points}getPointN(t){return this.getFactory().createPoint(this._points.getCoordinate(t))}normalize(){for(let t=0;t<Math.trunc(this._points.size()/2);t++){const e=this._points.size()-1-t;if(!this._points.getCoordinate(t).equals(this._points.getCoordinate(e))){if(this._points.getCoordinate(t).compareTo(this._points.getCoordinate(e))>0){const t=this._points.copy();V.reverse(t),this._points=t}return null}}}getCoordinate(){return this.isEmpty()?null:this._points.getCoordinate(0)}getBoundaryDimension(){return this.isClosed()?z.FALSE:0}getLength(){return E.ofLine(this._points)}getNumPoints(){return this._points.size()}compareToSameClass(){if(1===arguments.length){const t=arguments[0];let e=0,s=0;for(;e<this._points.size()&&s<t._points.size();){const i=this._points.getCoordinate(e).compareTo(t._points.getCoordinate(s));if(0!==i)return i;e++,s++}return e<this._points.size()?1:s<t._points.size()?-1:0}if(2===arguments.length){const t=arguments[0];return arguments[1].compare(this._points,t._points)}}apply(){if(I(arguments[0],B)){const t=arguments[0];for(let e=0;e<this._points.size();e++)t.filter(this._points.getCoordinate(e))}else if(I(arguments[0],Z)){const t=arguments[0];if(0===this._points.size())return null;for(let e=0;e<this._points.size()&&(t.filter(this._points,e),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(I(arguments[0],H)){arguments[0].filter(this)}else if(I(arguments[0],N)){arguments[0].filter(this)}}getCoordinateN(t){return this._points.getCoordinate(t)}getGeometryType(){return X.TYPENAME_LINESTRING}isEmpty(){return 0===this._points.size()}init(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new r("Invalid number of points in LineString (found "+t.size()+" - must be 0 or >= 2)");this._points=t}isCoordinate(t){for(let e=0;e<this._points.size();e++)if(this._points.getCoordinate(e).equals(t))return!0;return!1}getStartPoint(){return this.isEmpty()?null:this.getPointN(0)}get interfaces_(){return[U]}}class j extends W{constructor(){super(),j.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];W.constructor_.call(this,t,e),this.validateConstruction()}copyInternal(){return new j(this._points.copy(),this._factory)}getBoundaryDimension(){return z.FALSE}isClosed(){return!!this.isEmpty()||super.isClosed.call(this)}reverseInternal(){const t=this._points.copy();return V.reverse(t),this.getFactory().createLinearRing(t)}getTypeCode(){return X.TYPECODE_LINEARRING}validateConstruction(){if(!this.isEmpty()&&!super.isClosed.call(this))throw new r("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<j.MINIMUM_VALID_SIZE)throw new r("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")}getGeometryType(){return X.TYPENAME_LINEARRING}}j.MINIMUM_VALID_SIZE=4;class Q{create(){if(1===arguments.length){if(arguments[0]instanceof Array){}else if(I(arguments[0],k)){}}else if(2===arguments.length){}else if(3===arguments.length){const t=arguments[0],e=arguments[1];return this.create(t,e)}}}class K{constructor(t){this.str=t}append(t){this.str+=t}setCharAt(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}toString(){return this.str}}class J{constructor(){J.constructor_.apply(this,arguments)}static constructor_(){if(this._dimension=3,this._measures=0,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];J.constructor_.call(this,t,q.dimension(t),q.measures(t))}else if(Number.isInteger(arguments[0])){const t=arguments[0];this._coordinates=new Array(t).fill(null);for(let e=0;e<t;e++)this._coordinates[e]=new y}else if(I(arguments[0],k)){const t=arguments[0];if(null===t)return this._coordinates=new Array(0).fill(null),null;this._dimension=t.getDimension(),this._measures=t.getMeasures(),this._coordinates=new Array(t.size()).fill(null);for(let e=0;e<this._coordinates.length;e++)this._coordinates[e]=t.getCoordinateCopy(e)}}else if(2===arguments.length){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];J.constructor_.call(this,t,e,q.measures(t))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];this._coordinates=new Array(t).fill(null),this._dimension=e;for(let s=0;s<t;s++)this._coordinates[s]=D.create(e)}}else if(3===arguments.length)if(Number.isInteger(arguments[2])&&arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];this._dimension=e,this._measures=s,this._coordinates=null===t?new Array(0).fill(null):t}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];this._coordinates=new Array(t).fill(null),this._dimension=e,this._measures=s;for(let e=0;e<t;e++)this._coordinates[e]=this.createCoordinate()}}getCoordinate(){if(1===arguments.length){const t=arguments[0];return this._coordinates[t]}if(2===arguments.length){const t=arguments[0];arguments[1].setCoordinate(this._coordinates[t])}}getCoordinateCopy(t){const e=this.createCoordinate();return e.setCoordinate(this._coordinates[t]),e}createCoordinate(){return D.create(this.getDimension(),this.getMeasures())}getDimension(){return this._dimension}getX(t){return this._coordinates[t].x}getMeasures(){return this._measures}expandEnvelope(t){for(let e=0;e<this._coordinates.length;e++)t.expandToInclude(this._coordinates[e]);return t}copy(){const t=new Array(this.size()).fill(null);for(let e=0;e<this._coordinates.length;e++){const s=this.createCoordinate();s.setCoordinate(this._coordinates[e]),t[e]=s}return new J(t,this._dimension,this._measures)}toString(){if(this._coordinates.length>0){const t=new K(17*this._coordinates.length);t.append("("),t.append(this._coordinates[0]);for(let e=1;e<this._coordinates.length;e++)t.append(", "),t.append(this._coordinates[e]);return t.append(")"),t.toString()}return"()"}getY(t){return this._coordinates[t].y}toCoordinateArray(){return this._coordinates}getM(t){return this.hasM()?this._coordinates[t].getM():a.NaN}setOrdinate(t,e,s){switch(e){case k.X:this._coordinates[t].x=s;break;case k.Y:this._coordinates[t].y=s;break;default:this._coordinates[t].setOrdinate(e,s)}}getZ(t){return this.hasZ()?this._coordinates[t].getZ():a.NaN}size(){return this._coordinates.length}getOrdinate(t,e){switch(e){case k.X:return this._coordinates[t].x;case k.Y:return this._coordinates[t].y;default:return this._coordinates[t].getOrdinate(e)}}get interfaces_(){return[k,h]}}class ${static instance(){return $.instanceObject}readResolve(){return $.instance()}create(){if(1===arguments.length){if(arguments[0]instanceof Array){return new J(arguments[0])}if(I(arguments[0],k)){return new J(arguments[0])}}else{if(2===arguments.length){let t=arguments[1];return t>3&&(t=3),t<2&&(t=2),new J(arguments[0],t)}if(3===arguments.length){let t=arguments[2],e=arguments[1]-t;return t>1&&(t=1),e>3&&(e=3),e<2&&(e=2),new J(arguments[0],e+t,t)}}}get interfaces_(){return[Q,h]}}$.instanceObject=new $;class tt extends L{contains(){}}class et extends tt{}class st extends et{constructor(t){super(),this.array=[],t instanceof L&&this.addAll(t)}contains(t){for(const e of this.array)if(0===e.compareTo(t))return!0;return!1}add(t){if(this.contains(t))return!1;for(let e=0,s=this.array.length;e<s;e++){if(1===this.array[e].compareTo(t))return!!this.array.splice(e,0,t)}return this.array.push(t),!0}addAll(t){for(const e of t)this.add(e);return!0}remove(){throw new T}size(){return this.array.length}isEmpty(){return 0===this.array.length}toArray(){return this.array.slice()}iterator(){return new it(this.array)}}class it{constructor(t){this.array=t,this.position=0}next(){if(this.position===this.array.length)throw new R;return this.array[this.position++]}hasNext(){return this.position<this.array.length}remove(){throw new T}}class nt{static sort(){const t=arguments[0];if(1===arguments.length)t.sort(((t,e)=>t.compareTo(e)));else if(2===arguments.length)t.sort(((t,e)=>arguments[1].compare(t,e)));else if(3===arguments.length){const e=t.slice(arguments[1],arguments[2]);e.sort();const s=t.slice(0,arguments[1]).concat(e,t.slice(arguments[2],t.length));t.splice(0,t.length);for(const e of s)t.push(e)}else if(4===arguments.length){const e=t.slice(arguments[1],arguments[2]);e.sort(((t,e)=>arguments[3].compare(t,e)));const s=t.slice(0,arguments[1]).concat(e,t.slice(arguments[2],t.length));t.splice(0,t.length);for(const e of s)t.push(e)}}static asList(t){const e=new w;for(const s of t)e.add(s);return e}static copyOf(t,e){return t.slice(0,e)}}class rt extends X{constructor(){super(),rt.constructor_.apply(this,arguments)}static constructor_(){if(this._geometries=null,0===arguments.length);else if(2===arguments.length){let t=arguments[0],e=arguments[1];if(X.constructor_.call(this,e),null===t&&(t=[]),X.hasNullElements(t))throw new r("geometries must not contain null elements");this._geometries=t}}computeEnvelopeInternal(){const t=new G;for(let e=0;e<this._geometries.length;e++)t.expandToInclude(this._geometries[e].getEnvelopeInternal());return t}getGeometryN(t){return this._geometries[t]}getCoordinates(){const t=new Array(this.getNumPoints()).fill(null);let e=-1;for(let s=0;s<this._geometries.length;s++){const i=this._geometries[s].getCoordinates();for(let s=0;s<i.length;s++)e++,t[e]=i[s]}return t}getArea(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getArea();return t}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new rt(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t;if(this._geometries.length!==s._geometries.length)return!1;for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].equalsExact(s._geometries[t],e))return!1;return!0}return super.equalsExact.apply(this,arguments)}reverseInternal(){const t=this._geometries.length,e=new w(t);for(let s=0;s<t;s++)e.add(this._geometries[s].reverse());return this.getFactory().buildGeometry(e)}getTypeCode(){return X.TYPECODE_GEOMETRYCOLLECTION}getDimension(){let t=z.FALSE;for(let e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getDimension());return t}getNumGeometries(){return this._geometries.length}getBoundary(){return X.checkNotGeometryCollection(this),g.shouldNeverReachHere(),null}getGeometryType(){return X.TYPENAME_GEOMETRYCOLLECTION}isEmpty(){for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].isEmpty())return!1;return!0}normalize(){for(let t=0;t<this._geometries.length;t++)this._geometries[t].normalize();nt.sort(this._geometries)}getCoordinate(){return this.isEmpty()?null:this._geometries[0].getCoordinate()}getBoundaryDimension(){let t=z.FALSE;for(let e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getBoundaryDimension());return t}getLength(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getLength();return t}getNumPoints(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getNumPoints();return t}compareToSameClass(){if(1===arguments.length){const t=arguments[0],e=new st(nt.asList(this._geometries)),s=new st(nt.asList(t._geometries));return this.compare(e,s)}if(2===arguments.length){const t=arguments[1],e=arguments[0],s=this.getNumGeometries(),i=e.getNumGeometries();let n=0;for(;n<s&&n<i;){const s=this.getGeometryN(n),i=e.getGeometryN(n),r=s.compareToSameClass(i,t);if(0!==r)return r;n++}return n<s?1:n<i?-1:0}}apply(){if(I(arguments[0],B)){const t=arguments[0];for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}else if(I(arguments[0],Z)){const t=arguments[0];if(0===this._geometries.length)return null;for(let e=0;e<this._geometries.length&&(this._geometries[e].apply(t),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(I(arguments[0],H)){const t=arguments[0];t.filter(this);for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}else if(I(arguments[0],N)){const t=arguments[0];t.filter(this);for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}}}class ot{}class at extends rt{constructor(){super(),at.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];rt.constructor_.call(this,t,e)}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new at(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return 1}getTypeCode(){return X.TYPECODE_MULTIPOLYGON}getDimension(){return 2}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const t=new w;for(let e=0;e<this._geometries.length;e++){const s=this._geometries[e].getBoundary();for(let e=0;e<s.getNumGeometries();e++)t.add(s.getGeometryN(e))}const e=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(e))}getGeometryType(){return X.TYPENAME_MULTIPOLYGON}get interfaces_(){return[ot]}}class lt{get(){}put(){}size(){}values(){}entrySet(){}}class ht extends tt{constructor(t){super(),this.map=new Map,t instanceof L&&this.addAll(t)}contains(t){const e=t.hashCode?t.hashCode():t;return!!this.map.has(e)}add(t){const e=t.hashCode?t.hashCode():t;return!this.map.has(e)&&!!this.map.set(e,t)}addAll(t){for(const e of t)this.add(e);return!0}remove(){throw new T}size(){return this.map.size}isEmpty(){return 0===this.map.size}toArray(){return Array.from(this.map.values())}iterator(){return new ct(this.map)}[Symbol.iterator](){return this.map}}class ct{constructor(t){this.iterator=t.values();const{done:e,value:s}=this.iterator.next();this.done=e,this.value=s}next(){if(this.done)throw new R;const t=this.value,{done:e,value:s}=this.iterator.next();return this.done=e,this.value=s,t}hasNext(){return!this.done}remove(){throw new T}}class ut{constructor(t){this.value=t}intValue(){return this.value}compareTo(t){return this.value<t?-1:this.value>t?1:0}static compare(t,e){return t<e?-1:t>e?1:0}static isNan(t){return Number.isNaN(t)}static valueOf(t){return new ut(t)}}class gt{constructor(){gt.constructor_.apply(this,arguments)}static constructor_(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=gt.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof dt){const t=arguments[0];this._modelType=t,t===gt.FIXED&&this.setScale(1)}else if("number"==typeof arguments[0]){const t=arguments[0];this._modelType=gt.FIXED,this.setScale(t)}else if(arguments[0]instanceof gt){const t=arguments[0];this._modelType=t._modelType,this._scale=t._scale}}static mostPrecise(t,e){return t.compareTo(e)>=0?t:e}equals(t){if(!(t instanceof gt))return!1;const e=t;return this._modelType===e._modelType&&this._scale===e._scale}compareTo(t){const e=t,s=this.getMaximumSignificantDigits(),i=e.getMaximumSignificantDigits();return ut.compare(s,i)}getType(){return this._modelType}toString(){let t="UNKNOWN";return this._modelType===gt.FLOATING?t="Floating":this._modelType===gt.FLOATING_SINGLE?t="Floating-Single":this._modelType===gt.FIXED&&(t="Fixed (Scale="+this.getScale()+")"),t}makePrecise(){if("number"==typeof arguments[0]){const t=arguments[0];if(a.isNaN(t))return t;if(this._modelType===gt.FLOATING_SINGLE){return t}return this._modelType===gt.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof y){const t=arguments[0];if(this._modelType===gt.FLOATING)return null;t.x=this.makePrecise(t.x),t.y=this.makePrecise(t.y)}}getMaximumSignificantDigits(){let t=16;return this._modelType===gt.FLOATING?t=16:this._modelType===gt.FLOATING_SINGLE?t=6:this._modelType===gt.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t}setScale(t){this._scale=Math.abs(t)}getScale(){return this._scale}isFloating(){return this._modelType===gt.FLOATING||this._modelType===gt.FLOATING_SINGLE}get interfaces_(){return[h,l]}}class dt{constructor(){dt.constructor_.apply(this,arguments)}static constructor_(){this._name=null;const t=arguments[0];this._name=t,dt.nameToTypeMap.put(t,this)}readResolve(){return dt.nameToTypeMap.get(this._name)}toString(){return this._name}get interfaces_(){return[h]}}dt.nameToTypeMap=new class extends lt{constructor(){super(),this.map=new Map}get(t){return this.map.get(t)||null}put(t,e){return this.map.set(t,e),e}values(){const t=new w,e=this.map.values();let s=e.next();for(;!s.done;)t.add(s.value),s=e.next();return t}entrySet(){const t=new ht;return this.map.entries().forEach((e=>t.add(e))),t}size(){return this.map.size()}},gt.Type=dt,gt.FIXED=new dt("FIXED"),gt.FLOATING=new dt("FLOATING"),gt.FLOATING_SINGLE=new dt("FLOATING SINGLE"),gt.maximumPreciseValue=9007199254740992;class _t extends rt{constructor(){super(),_t.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];rt.constructor_.call(this,t,e)}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new _t(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return this.isClosed()?z.FALSE:0}isClosed(){if(this.isEmpty())return!1;for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].isClosed())return!1;return!0}getTypeCode(){return X.TYPECODE_MULTILINESTRING}getDimension(){return 1}getBoundary(){throw new T}getGeometryType(){return X.TYPENAME_MULTILINESTRING}get interfaces_(){return[U]}}class pt{}class ft extends n{constructor(t){super(t),this.name=Object.keys({IllegalStateException:ft})[0]}}class mt extends X{constructor(){super(),mt.constructor_.apply(this,arguments)}static constructor_(){this._coordinates=null;const t=arguments[0],e=arguments[1];X.constructor_.call(this,e),this.init(t)}computeEnvelopeInternal(){if(this.isEmpty())return new G;const t=new G;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t}getCoordinates(){return this.isEmpty()?[]:[this.getCoordinate()]}copyInternal(){return new mt(this._coordinates.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&(!(!this.isEmpty()||!t.isEmpty())||this.isEmpty()===t.isEmpty()&&this.equal(t.getCoordinate(),this.getCoordinate(),e))}return super.equalsExact.apply(this,arguments)}reverseInternal(){return this.getFactory().createPoint(this._coordinates.copy())}getTypeCode(){return X.TYPECODE_POINT}getDimension(){return 0}getNumPoints(){return this.isEmpty()?0:1}getX(){if(null===this.getCoordinate())throw new ft("getX called on empty Point");return this.getCoordinate().x}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return X.TYPENAME_POINT}getCoordinateSequence(){return this._coordinates}getY(){if(null===this.getCoordinate())throw new ft("getY called on empty Point");return this.getCoordinate().y}isSimple(){return!0}normalize(){}getCoordinate(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null}getBoundaryDimension(){return z.FALSE}compareToSameClass(){if(1===arguments.length){const t=arguments[0];return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){const t=arguments[0];return arguments[1].compare(this._coordinates,t._coordinates)}}apply(){if(I(arguments[0],B)){const t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(I(arguments[0],Z)){const t=arguments[0];if(this.isEmpty())return null;t.filter(this._coordinates,0),t.isGeometryChanged()&&this.geometryChanged()}else if(I(arguments[0],H)){arguments[0].filter(this)}else if(I(arguments[0],N)){arguments[0].filter(this)}}isEmpty(){return 0===this._coordinates.size()}init(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),g.isTrue(t.size()<=1),this._coordinates=t}get interfaces_(){return[pt]}}class yt{static ofRingSigned(){if(arguments[0]instanceof Array){const t=arguments[0];if(t.length<3)return 0;let e=0;const s=t[0].x;for(let i=1;i<t.length-1;i++){const n=t[i].x-s,r=t[i+1].y;e+=n*(t[i-1].y-r)}return e/2}if(I(arguments[0],k)){const t=arguments[0],e=t.size();if(e<3)return 0;const s=new y,i=new y,n=new y;t.getCoordinate(0,i),t.getCoordinate(1,n);const r=i.x;n.x-=r;let o=0;for(let a=1;a<e-1;a++)s.y=i.y,i.x=n.x,i.y=n.y,t.getCoordinate(a+1,n),n.x-=r,o+=i.x*(s.y-n.y);return o/2}}static ofRing(){if(arguments[0]instanceof Array){const t=arguments[0];return Math.abs(yt.ofRingSigned(t))}if(I(arguments[0],k)){const t=arguments[0];return Math.abs(yt.ofRingSigned(t))}}}class xt{constructor(t){this.str=t}append(t){this.str+=t}setCharAt(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}toString(){return this.str}}class It{constructor(){It.constructor_.apply(this,arguments)}static constructor_(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){const t=arguments[0];this.init(t)}else if(arguments[0]instanceof It){const t=arguments[0];this.init(t)}else if("string"==typeof arguments[0]){const t=arguments[0];It.constructor_.call(this,It.parse(t))}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t,e)}}static determinant(){if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];return It.determinant(It.valueOf(t),It.valueOf(e),It.valueOf(s),It.valueOf(i))}if(arguments[3]instanceof It&&arguments[2]instanceof It&&arguments[0]instanceof It&&arguments[1]instanceof It){const t=arguments[1],e=arguments[2],s=arguments[3];return arguments[0].multiply(s).selfSubtract(t.multiply(e))}}static sqr(t){return It.valueOf(t).selfMultiply(t)}static valueOf(){if("string"==typeof arguments[0]){const t=arguments[0];return It.parse(t)}if("number"==typeof arguments[0]){return new It(arguments[0])}}static sqrt(t){return It.valueOf(t).sqrt()}static parse(t){let e=0;const s=t.length;for(;Y.isWhitespace(t.charAt(e));)e++;let i=!1;if(e<s){const s=t.charAt(e);"-"!==s&&"+"!==s||(e++,"-"===s&&(i=!0))}const n=new It;let r=0,o=0,a=0,l=!1;for(;!(e>=s);){const s=t.charAt(e);if(e++,Y.isDigit(s)){const t=s-"0";n.selfMultiply(It.TEN),n.selfAdd(t),r++}else{if("."!==s){if("e"===s||"E"===s){const s=t.substring(e);try{a=ut.parseInt(s)}catch(e){throw e instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+s+" in string "+t):e}break}throw new NumberFormatException("Unexpected character '"+s+"' at position "+e+" in string "+t)}o=r,l=!0}}let h=n;l||(o=r);const c=r-o-a;if(0===c)h=n;else if(c>0){const t=It.TEN.pow(c);h=n.divide(t)}else if(c<0){const t=It.TEN.pow(-c);h=n.multiply(t)}return i?h.negate():h}static createNaN(){return new It(a.NaN,a.NaN)}static copy(t){return new It(t)}static magnitude(t){const e=Math.abs(t),s=Math.log(e)/Math.log(10);let i=Math.trunc(Math.floor(s));return 10*Math.pow(10,i)<=e&&(i+=1),i}static stringOfChar(t,e){const s=new xt;for(let i=0;i<e;i++)s.append(t);return s.toString()}le(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<=t._lo}extractSignificantDigits(t,e){let s=this.abs(),i=It.magnitude(s._hi);const n=It.TEN.pow(i);s=s.divide(n),s.gt(It.TEN)?(s=s.divide(It.TEN),i+=1):s.lt(It.ONE)&&(s=s.multiply(It.TEN),i-=1);const r=i+1,o=new xt,a=It.MAX_PRINT_DIGITS-1;for(let e=0;e<=a;e++){t&&e===r&&o.append(".");const i=Math.trunc(s._hi);if(i<0)break;let n=!1,l=0;i>9?(n=!0,l="9"):l="0"+i,o.append(l),s=s.subtract(It.valueOf(i)).multiply(It.TEN),n&&s.selfAdd(It.TEN);let h=!0;const c=It.magnitude(s._hi);if(c<0&&Math.abs(c)>=a-e&&(h=!1),!h)break}return e[0]=i,o.toString()}sqr(){return this.multiply(this)}getSpecialNumberString(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null}setValue(){if(arguments[0]instanceof It){const t=arguments[0];return this.init(t),this}if("number"==typeof arguments[0]){const t=arguments[0];return this.init(t),this}}multiply(){if(arguments[0]instanceof It){const t=arguments[0];return t.isNaN()?It.createNaN():It.copy(this).selfMultiply(t)}if("number"==typeof arguments[0]){const t=arguments[0];return a.isNaN(t)?It.createNaN():It.copy(this).selfMultiply(t,0)}}isNaN(){return a.isNaN(this._hi)}reciprocal(){let t=null,e=null,s=null,i=null,n=null,r=null,o=null,a=null;n=1/this._hi,r=It.SPLIT*n,t=r-n,a=It.SPLIT*this._hi,t=r-t,e=n-t,s=a-this._hi,o=n*this._hi,s=a-s,i=this._hi-s,a=t*s-o+t*i+e*s+e*i,r=(1-o-a-n*this._lo)/this._hi;const l=n+r;return new It(l,n-l+r)}doubleValue(){return this._hi+this._lo}subtract(){if(arguments[0]instanceof It){const t=arguments[0];return this.add(t.negate())}if("number"==typeof arguments[0]){const t=arguments[0];return this.add(-t)}}equals(){if(1===arguments.length&&arguments[0]instanceof It){const t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}}isZero(){return 0===this._hi&&0===this._lo}selfSubtract(){if(arguments[0]instanceof It){const t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.isNaN()?this:this.selfAdd(-t,0)}}min(t){return this.le(t)?this:t}selfDivide(){if(1===arguments.length){if(arguments[0]instanceof It){const t=arguments[0];return this.selfDivide(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.selfDivide(t,0)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null,l=null,h=null;return o=this._hi/t,a=It.SPLIT*o,s=a-o,h=It.SPLIT*t,s=a-s,i=o-s,n=h-t,l=o*t,n=h-n,r=t-n,h=s*n-l+s*r+i*n+i*r,a=(this._hi-l-h+this._lo-o*e)/t,h=o+a,this._hi=h,this._lo=o-h+a,this}}dump(){return"DD<"+this._hi+", "+this._lo+">"}divide(){if(arguments[0]instanceof It){const t=arguments[0];let e=null,s=null,i=null,n=null,r=null,o=null,a=null,l=null;r=this._hi/t._hi,o=It.SPLIT*r,e=o-r,l=It.SPLIT*t._hi,e=o-e,s=r-e,i=l-t._hi,a=r*t._hi,i=l-i,n=t._hi-i,l=e*i-a+e*n+s*i+s*n,o=(this._hi-a-l+this._lo-r*t._lo)/t._hi,l=r+o;return new It(l,r-l+o)}if("number"==typeof arguments[0]){const t=arguments[0];return a.isNaN(t)?It.createNaN():It.copy(this).selfDivide(t,0)}}ge(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>=t._lo}pow(t){if(0===t)return It.valueOf(1);let e=new It(this),s=It.valueOf(1),i=Math.abs(t);if(i>1)for(;i>0;)i%2==1&&s.selfMultiply(e),i/=2,i>0&&(e=e.sqr());else s=e;return t<0?s.reciprocal():s}ceil(){if(this.isNaN())return It.NaN;const t=Math.ceil(this._hi);let e=0;return t===this._hi&&(e=Math.ceil(this._lo)),new It(t,e)}compareTo(t){const e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0}rint(){if(this.isNaN())return this;return this.add(.5).floor()}max(t){return this.ge(t)?this:t}sqrt(){if(this.isZero())return It.valueOf(0);if(this.isNegative())return It.NaN;const t=1/Math.sqrt(this._hi),e=this._hi*t,s=It.valueOf(e),i=this.subtract(s.sqr())._hi*(.5*t);return s.add(i)}selfAdd(){if(1===arguments.length){if(arguments[0]instanceof It){const t=arguments[0];return this.selfAdd(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];let e=null,s=null,i=null,n=null,r=null,o=null;return i=this._hi+t,r=i-this._hi,n=i-r,n=t-r+(this._hi-n),o=n+this._lo,e=i+o,s=o+(i-e),this._hi=e+s,this._lo=s+(e-this._hi),this}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null,l=null,h=null;o=this._hi+t,n=this._lo+e,l=o-this._hi,h=n-this._lo,a=o-l,r=n-h,a=t-l+(this._hi-a),r=e-h+(this._lo-r),l=a+n,s=o+l,i=l+(o-s),l=r+i;const c=s+l,u=l+(s-c);return this._hi=c,this._lo=u,this}}selfMultiply(){if(1===arguments.length){if(arguments[0]instanceof It){const t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.selfMultiply(t,0)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null;o=It.SPLIT*this._hi,s=o-this._hi,a=It.SPLIT*t,s=o-s,i=this._hi-s,n=a-t,o=this._hi*t,n=a-n,r=t-n,a=s*n-o+s*r+i*n+i*r+(this._hi*e+this._lo*t);const l=o+a;s=o-l;const h=a+s;return this._hi=l,this._lo=h,this}}selfSqr(){return this.selfMultiply(this)}floor(){if(this.isNaN())return It.NaN;const t=Math.floor(this._hi);let e=0;return t===this._hi&&(e=Math.floor(this._lo)),new It(t,e)}negate(){return this.isNaN()?this:new It(-this._hi,-this._lo)}clone(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return null;throw t}}intValue(){return Math.trunc(this._hi)}toString(){const t=It.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()}toStandardNotation(){const t=this.getSpecialNumberString();if(null!==t)return t;const e=new Array(1).fill(null),s=this.extractSignificantDigits(!0,e),i=e[0]+1;let n=s;if("."===s.charAt(0))n="0"+s;else if(i<0)n="0."+It.stringOfChar("0",-i)+s;else if(-1===s.indexOf(".")){const t=i-s.length;n=s+It.stringOfChar("0",t)+".0"}return this.isNegative()?"-"+n:n}toSciNotation(){if(this.isZero())return It.SCI_NOT_ZERO;const t=this.getSpecialNumberString();if(null!==t)return t;const e=new Array(1).fill(null),s=this.extractSignificantDigits(!1,e),i=It.SCI_NOT_EXPONENT_CHAR+e[0];if("0"===s.charAt(0))throw new ft("Found leading zero: "+s);let n="";s.length>1&&(n=s.substring(1));const r=s.charAt(0)+"."+n;return this.isNegative()?"-"+r+i:r+i}abs(){return this.isNaN()?It.NaN:this.isNegative()?this.negate():new It(this)}isPositive(){return this._hi>0||0===this._hi&&this._lo>0}lt(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<t._lo}add(){if(arguments[0]instanceof It){const t=arguments[0];return It.copy(this).selfAdd(t)}if("number"==typeof arguments[0]){const t=arguments[0];return It.copy(this).selfAdd(t)}}init(){if(1===arguments.length){if("number"==typeof arguments[0]){const t=arguments[0];this._hi=t,this._lo=0}else if(arguments[0]instanceof It){const t=arguments[0];this._hi=t._hi,this._lo=t._lo}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._hi=t,this._lo=e}}gt(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>t._lo}isNegative(){return this._hi<0||0===this._hi&&this._lo<0}trunc(){return this.isNaN()?It.NaN:this.isPositive()?this.floor():this.ceil()}signum(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0}get interfaces_(){return[h,l,d]}}It.PI=new It(3.141592653589793,12246467991473532e-32),It.TWO_PI=new It(6.283185307179586,24492935982947064e-32),It.PI_2=new It(1.5707963267948966,6123233995736766e-32),It.E=new It(2.718281828459045,14456468917292502e-32),It.NaN=new It(a.NaN,a.NaN),It.EPS=123259516440783e-46,It.SPLIT=134217729,It.MAX_PRINT_DIGITS=32,It.TEN=It.valueOf(10),It.ONE=It.valueOf(1),It.SCI_NOT_EXPONENT_CHAR="E",It.SCI_NOT_ZERO="0.0E0";class Et{static orientationIndex(t,e,s){const i=Et.orientationIndexFilter(t,e,s);if(i<=1)return i;const n=It.valueOf(e.x).selfAdd(-t.x),r=It.valueOf(e.y).selfAdd(-t.y),o=It.valueOf(s.x).selfAdd(-e.x),a=It.valueOf(s.y).selfAdd(-e.y);return n.selfMultiply(a).selfSubtract(r.selfMultiply(o)).signum()}static signOfDet2x2(){if(arguments[3]instanceof It&&arguments[2]instanceof It&&arguments[0]instanceof It&&arguments[1]instanceof It){const t=arguments[1],e=arguments[2],s=arguments[3];return arguments[0].multiply(s).selfSubtract(t.multiply(e)).signum()}if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=It.valueOf(t),r=It.valueOf(e),o=It.valueOf(s),a=It.valueOf(i);return n.multiply(a).selfSubtract(r.multiply(o)).signum()}}static intersection(t,e,s,i){const n=new It(t.y).selfSubtract(e.y),r=new It(e.x).selfSubtract(t.x),o=new It(t.x).selfMultiply(e.y).selfSubtract(new It(e.x).selfMultiply(t.y)),l=new It(s.y).selfSubtract(i.y),h=new It(i.x).selfSubtract(s.x),c=new It(s.x).selfMultiply(i.y).selfSubtract(new It(i.x).selfMultiply(s.y)),u=r.multiply(c).selfSubtract(h.multiply(o)),g=l.multiply(o).selfSubtract(n.multiply(c)),d=n.multiply(h).selfSubtract(l.multiply(r)),_=u.selfDivide(d).doubleValue(),p=g.selfDivide(d).doubleValue();return a.isNaN(_)||a.isInfinite(_)||a.isNaN(p)||a.isInfinite(p)?null:new y(_,p)}static orientationIndexFilter(t,e,s){let i=null;const n=(t.x-s.x)*(e.y-s.y),r=(t.y-s.y)*(e.x-s.x),o=n-r;if(n>0){if(r<=0)return Et.signum(o);i=n+r}else{if(!(n<0))return Et.signum(o);if(r>=0)return Et.signum(o);i=-n-r}const a=Et.DP_SAFE_EPSILON*i;return o>=a||-o>=a?Et.signum(o):2}static signum(t){return t>0?1:t<0?-1:0}}Et.DP_SAFE_EPSILON=1e-15;class Nt{static isCCW(){if(arguments[0]instanceof Array){const t=arguments[0],e=t.length-1;if(e<3)throw new r("Ring has fewer than 4 points, so orientation cannot be determined");let s=t[0],i=0;for(let n=1;n<=e;n++){const e=t[n];e.y>s.y&&(s=e,i=n)}let n=i;do{n-=1,n<0&&(n=e)}while(t[n].equals2D(s)&&n!==i);let o=i;do{o=(o+1)%e}while(t[o].equals2D(s)&&o!==i);const a=t[n],l=t[o];if(a.equals2D(s)||l.equals2D(s)||a.equals2D(l))return!1;const h=Nt.index(a,s,l);let c=null;return c=0===h?a.x>l.x:h>0,c}if(I(arguments[0],k)){const t=arguments[0],e=t.size()-1;if(e<3)throw new r("Ring has fewer than 4 points, so orientation cannot be determined");let s=t.getCoordinate(0),i=0;for(let n=1;n<=e;n++){const e=t.getCoordinate(n);e.y>s.y&&(s=e,i=n)}let n=null,o=i;do{o-=1,o<0&&(o=e),n=t.getCoordinate(o)}while(n.equals2D(s)&&o!==i);let a=null,l=i;do{l=(l+1)%e,a=t.getCoordinate(l)}while(a.equals2D(s)&&l!==i);if(n.equals2D(s)||a.equals2D(s)||n.equals2D(a))return!1;const h=Nt.index(n,s,a);let c=null;return c=0===h?n.x>a.x:h>0,c}}static index(t,e,s){return Et.orientationIndex(t,e,s)}}Nt.CLOCKWISE=-1,Nt.RIGHT=Nt.CLOCKWISE,Nt.COUNTERCLOCKWISE=1,Nt.LEFT=Nt.COUNTERCLOCKWISE,Nt.COLLINEAR=0,Nt.STRAIGHT=Nt.COLLINEAR;class Tt extends X{constructor(){super(),Tt.constructor_.apply(this,arguments)}static constructor_(){this._shell=null,this._holes=null;let t=arguments[0],e=arguments[1],s=arguments[2];if(X.constructor_.call(this,s),null===t&&(t=this.getFactory().createLinearRing()),null===e&&(e=[]),X.hasNullElements(e))throw new r("holes must not contain null elements");if(t.isEmpty()&&X.hasNonEmptyElements(e))throw new r("shell is empty but holes are not");this._shell=t,this._holes=e}computeEnvelopeInternal(){return this._shell.getEnvelopeInternal()}getCoordinates(){if(this.isEmpty())return[];const t=new Array(this.getNumPoints()).fill(null);let e=-1;const s=this._shell.getCoordinates();for(let i=0;i<s.length;i++)e++,t[e]=s[i];for(let s=0;s<this._holes.length;s++){const i=this._holes[s].getCoordinates();for(let s=0;s<i.length;s++)e++,t[e]=i[s]}return t}getArea(){let t=0;t+=yt.ofRing(this._shell.getCoordinateSequence());for(let e=0;e<this._holes.length;e++)t-=yt.ofRing(this._holes[e].getCoordinateSequence());return t}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t,i=this._shell,n=s._shell;if(!i.equalsExact(n,e))return!1;if(this._holes.length!==s._holes.length)return!1;for(let t=0;t<this._holes.length;t++)if(!this._holes[t].equalsExact(s._holes[t],e))return!1;return!0}return super.equalsExact.apply(this,arguments)}reverseInternal(){const t=this.getExteriorRing().reverse(),e=new Array(this.getNumInteriorRing()).fill(null);for(let t=0;t<e.length;t++)e[t]=this.getInteriorRingN(t).reverse();return this.getFactory().createPolygon(t,e)}getTypeCode(){return X.TYPECODE_POLYGON}getDimension(){return 2}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const t=new Array(this._holes.length+1).fill(null);t[0]=this._shell;for(let e=0;e<this._holes.length;e++)t[e+1]=this._holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)}getGeometryType(){return X.TYPENAME_POLYGON}getExteriorRing(){return this._shell}copyInternal(){const t=this._shell.copy(),e=new Array(this._holes.length).fill(null);for(let t=0;t<this._holes.length;t++)e[t]=this._holes[t].copy();return new Tt(t,e,this._factory)}isRectangle(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;const t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal();for(let s=0;s<5;s++){const i=t.getX(s);if(i!==e.getMinX()&&i!==e.getMaxX())return!1;const n=t.getY(s);if(n!==e.getMinY()&&n!==e.getMaxY())return!1}let s=t.getX(0),i=t.getY(0);for(let e=1;e<=4;e++){const n=t.getX(e),r=t.getY(e);if(n!==s===(r!==i))return!1;s=n,i=r}return!0}normalize(){if(0===arguments.length){this._shell=this.normalized(this._shell,!0);for(let t=0;t<this._holes.length;t++)this._holes[t]=this.normalized(this._holes[t],!1);nt.sort(this._holes)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];if(t.isEmpty())return null;const s=t.getCoordinateSequence(),i=V.minCoordinateIndex(s,0,s.size()-2);V.scroll(s,i,!0),Nt.isCCW(s)===e&&V.reverse(s)}}getCoordinate(){return this._shell.getCoordinate()}getNumInteriorRing(){return this._holes.length}getBoundaryDimension(){return 1}getLength(){let t=0;t+=this._shell.getLength();for(let e=0;e<this._holes.length;e++)t+=this._holes[e].getLength();return t}getNumPoints(){let t=this._shell.getNumPoints();for(let e=0;e<this._holes.length;e++)t+=this._holes[e].getNumPoints();return t}convexHull(){return this.getExteriorRing().convexHull()}normalized(t,e){const s=t.copy();return this.normalize(s,e),s}compareToSameClass(){if(1===arguments.length){const t=arguments[0],e=this._shell,s=t._shell;return e.compareToSameClass(s)}if(2===arguments.length){const t=arguments[1],e=arguments[0],s=this._shell,i=e._shell,n=s.compareToSameClass(i,t);if(0!==n)return n;const r=this.getNumInteriorRing(),o=e.getNumInteriorRing();let a=0;for(;a<r&&a<o;){const s=this.getInteriorRingN(a),i=e.getInteriorRingN(a),n=s.compareToSameClass(i,t);if(0!==n)return n;a++}return a<r?1:a<o?-1:0}}apply(){if(I(arguments[0],B)){const t=arguments[0];this._shell.apply(t);for(let e=0;e<this._holes.length;e++)this._holes[e].apply(t)}else if(I(arguments[0],Z)){const t=arguments[0];if(this._shell.apply(t),!t.isDone())for(let e=0;e<this._holes.length&&(this._holes[e].apply(t),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(I(arguments[0],H)){arguments[0].filter(this)}else if(I(arguments[0],N)){const t=arguments[0];t.filter(this),this._shell.apply(t);for(let e=0;e<this._holes.length;e++)this._holes[e].apply(t)}}isEmpty(){return this._shell.isEmpty()}getInteriorRingN(t){return this._holes[t]}get interfaces_(){return[ot]}}class Lt extends rt{constructor(){super(),Lt.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];rt.constructor_.call(this,t,e)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof X){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getTypeCode(){return X.TYPECODE_MULTIPOINT}getDimension(){return 0}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return X.TYPENAME_MULTIPOINT}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new Lt(t,this._factory)}isValid(){return!0}getCoordinate(){if(1===arguments.length&&Number.isInteger(arguments[0])){const t=arguments[0];return this._geometries[t].getCoordinate()}return super.getCoordinate.apply(this,arguments)}getBoundaryDimension(){return z.FALSE}get interfaces_(){return[pt]}}class St{constructor(){St.constructor_.apply(this,arguments)}static constructor_(){if(this._precisionModel=null,this._coordinateSequenceFactory=null,this._SRID=null,0===arguments.length)St.constructor_.call(this,new gt,0);else if(1===arguments.length){if(I(arguments[0],Q)){const t=arguments[0];St.constructor_.call(this,new gt,0,t)}else if(arguments[0]instanceof gt){const t=arguments[0];St.constructor_.call(this,t,0,St.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];St.constructor_.call(this,t,e,St.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._precisionModel=t,this._coordinateSequenceFactory=s,this._SRID=e}}static toMultiPolygonArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toGeometryArray(t){if(null===t)return null;const e=new Array(t.size()).fill(null);return t.toArray(e)}static getDefaultCoordinateSequenceFactory(){return $.instance()}static toMultiLineStringArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toLineStringArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toMultiPointArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toLinearRingArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toPointArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toPolygonArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static createPointFromInternalCoord(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)}createEmpty(t){switch(t){case-1:return this.createGeometryCollection();case 0:return this.createPoint();case 1:return this.createLineString();case 2:return this.createPolygon();default:throw new r("Invalid dimension: "+t)}}toGeometry(t){return t.isNull()?this.createPoint():t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new y(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new y(t.getMinX(),t.getMinY()),new y(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new y(t.getMinX(),t.getMinY()),new y(t.getMinX(),t.getMaxY()),new y(t.getMaxX(),t.getMaxY()),new y(t.getMaxX(),t.getMinY()),new y(t.getMinX(),t.getMinY())]),null)}createLineString(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];return this.createLineString(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(I(arguments[0],k)){return new W(arguments[0],this)}}}createMultiLineString(){if(0===arguments.length)return new _t(null,this);if(1===arguments.length){return new _t(arguments[0],this)}}createPolygon(){if(0===arguments.length)return this.createPolygon(null,null);if(1===arguments.length){if(I(arguments[0],k)){const t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){const t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof j){const t=arguments[0];return this.createPolygon(t,null)}}else if(2===arguments.length){return new Tt(arguments[0],arguments[1],this)}}getSRID(){return this._SRID}createGeometryCollection(){if(0===arguments.length)return new rt(null,this);if(1===arguments.length){return new rt(arguments[0],this)}}getPrecisionModel(){return this._precisionModel}createLinearRing(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(I(arguments[0],k)){return new j(arguments[0],this)}}}createMultiPolygon(){if(0===arguments.length)return new at(null,this);if(1===arguments.length){return new at(arguments[0],this)}}createMultiPoint(){if(0===arguments.length)return new Lt(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){return new Lt(arguments[0],this)}if(I(arguments[0],k)){const t=arguments[0];if(null===t)return this.createMultiPoint(new Array(0).fill(null));const e=new Array(t.size()).fill(null);for(let s=0;s<t.size();s++){const i=this.getCoordinateSequenceFactory().create(1,t.getDimension(),t.getMeasures());V.copy(t,s,i,0,1),e[s]=this.createPoint(i)}return this.createMultiPoint(e)}}}buildGeometry(t){let e=null,s=!1,i=!1;for(let n=t.iterator();n.hasNext();){const t=n.next(),r=t.getTypeCode();null===e&&(e=r),r!==e&&(s=!0),t instanceof rt&&(i=!0)}if(null===e)return this.createGeometryCollection();if(s||i)return this.createGeometryCollection(St.toGeometryArray(t));const n=t.iterator().next();if(t.size()>1){if(n instanceof Tt)return this.createMultiPolygon(St.toPolygonArray(t));if(n instanceof W)return this.createMultiLineString(St.toLineStringArray(t));if(n instanceof mt)return this.createMultiPoint(St.toPointArray(t));g.shouldNeverReachHere("Unhandled geometry type: "+n.getGeometryType())}return n}createMultiPointFromCoords(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)}createPoint(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(I(arguments[0],k)){return new mt(arguments[0],this)}}}getCoordinateSequenceFactory(){return this._coordinateSequenceFactory}get interfaces_(){return[h]}}function Ct(t){return[t.x,t.y]}class Rt{constructor(t,e){this.geometryFactory=t||new St,this.ol=e||"undefined"!=typeof ol&&ol}inject(t,e,s,i,n,r,o,a){this.ol={geom:{Point:t,LineString:e,LinearRing:s,Polygon:i,MultiPoint:n,MultiLineString:r,MultiPolygon:o,GeometryCollection:a}}}read(t){const e=this.ol;return t instanceof e.geom.Point?this.convertFromPoint(t):t instanceof e.geom.LineString?this.convertFromLineString(t):t instanceof e.geom.LinearRing?this.convertFromLinearRing(t):t instanceof e.geom.Polygon?this.convertFromPolygon(t):t instanceof e.geom.MultiPoint?this.convertFromMultiPoint(t):t instanceof e.geom.MultiLineString?this.convertFromMultiLineString(t):t instanceof e.geom.MultiPolygon?this.convertFromMultiPolygon(t):t instanceof e.geom.GeometryCollection?this.convertFromCollection(t):void 0}convertFromPoint(t){const e=t.getCoordinates();return this.geometryFactory.createPoint(new y(e[0],e[1]))}convertFromLineString(t){return this.geometryFactory.createLineString(t.getCoordinates().map((function(t){return new y(t[0],t[1])})))}convertFromLinearRing(t){return this.geometryFactory.createLinearRing(t.getCoordinates().map((function(t){return new y(t[0],t[1])})))}convertFromPolygon(t){const e=t.getLinearRings();let s=null;const i=[];for(let t=0;t<e.length;t++){const n=this.convertFromLinearRing(e[t]);0===t?s=n:i.push(n)}return this.geometryFactory.createPolygon(s,i)}convertFromMultiPoint(t){const e=t.getPoints().map((function(t){return this.convertFromPoint(t)}),this);return this.geometryFactory.createMultiPoint(e)}convertFromMultiLineString(t){const e=t.getLineStrings().map((function(t){return this.convertFromLineString(t)}),this);return this.geometryFactory.createMultiLineString(e)}convertFromMultiPolygon(t){const e=t.getPolygons().map((function(t){return this.convertFromPolygon(t)}),this);return this.geometryFactory.createMultiPolygon(e)}convertFromCollection(t){const e=t.getGeometries().map((function(t){return this.read(t)}),this);return this.geometryFactory.createGeometryCollection(e)}write(t){return"Point"===t.getGeometryType()?this.convertToPoint(t.getCoordinate()):"LineString"===t.getGeometryType()?this.convertToLineString(t):"LinearRing"===t.getGeometryType()?this.convertToLinearRing(t):"Polygon"===t.getGeometryType()?this.convertToPolygon(t):"MultiPoint"===t.getGeometryType()?this.convertToMultiPoint(t):"MultiLineString"===t.getGeometryType()?this.convertToMultiLineString(t):"MultiPolygon"===t.getGeometryType()?this.convertToMultiPolygon(t):"GeometryCollection"===t.getGeometryType()?this.convertToCollection(t):void 0}convertToPoint(t){return new this.ol.geom.Point([t.x,t.y])}convertToLineString(t){const e=t._points._coordinates.map(Ct);return new this.ol.geom.LineString(e)}convertToLinearRing(t){const e=t._points._coordinates.map(Ct);return new this.ol.geom.LinearRing(e)}convertToPolygon(t){const e=[t._shell._points._coordinates.map(Ct)];for(let s=0;s<t._holes.length;s++)e.push(t._holes[s]._points._coordinates.map(Ct));return new this.ol.geom.Polygon(e)}convertToMultiPoint(t){return new this.ol.geom.MultiPoint(t.getCoordinates().map(Ct))}convertToMultiLineString(t){const e=[];for(let s=0;s<t._geometries.length;s++)e.push(this.convertToLineString(t._geometries[s]).getCoordinates());return new this.ol.geom.MultiLineString(e)}convertToMultiPolygon(t){const e=[];for(let s=0;s<t._geometries.length;s++)e.push(this.convertToPolygon(t._geometries[s]).getCoordinates());return new this.ol.geom.MultiPolygon(e)}convertToCollection(t){const e=[];for(let s=0;s<t._geometries.length;s++){const i=t._geometries[s];e.push(this.write(i))}return new this.ol.geom.GeometryCollection(e)}}class wt{constructor(){wt.constructor_.apply(this,arguments)}static constructor_(){if(this._quadrantSegments=wt.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=wt.CAP_ROUND,this._joinStyle=wt.JOIN_ROUND,this._mitreLimit=wt.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=wt.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.setQuadrantSegments(t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.setQuadrantSegments(t),this.setEndCapStyle(e)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.setQuadrantSegments(t),this.setEndCapStyle(e),this.setJoinStyle(s),this.setMitreLimit(i)}}static bufferDistanceError(t){const e=Math.PI/2/t;return 1-Math.cos(e/2)}getEndCapStyle(){return this._endCapStyle}isSingleSided(){return this._isSingleSided}setQuadrantSegments(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=wt.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=wt.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==wt.JOIN_ROUND&&(this._quadrantSegments=wt.DEFAULT_QUADRANT_SEGMENTS)}getJoinStyle(){return this._joinStyle}setJoinStyle(t){this._joinStyle=t}setSimplifyFactor(t){this._simplifyFactor=t<0?0:t}getSimplifyFactor(){return this._simplifyFactor}getQuadrantSegments(){return this._quadrantSegments}setEndCapStyle(t){this._endCapStyle=t}getMitreLimit(){return this._mitreLimit}setMitreLimit(t){this._mitreLimit=t}setSingleSided(t){this._isSingleSided=t}}wt.CAP_ROUND=1,wt.CAP_FLAT=2,wt.CAP_SQUARE=3,wt.JOIN_ROUND=1,wt.JOIN_MITRE=2,wt.JOIN_BEVEL=3,wt.DEFAULT_QUADRANT_SEGMENTS=8,wt.DEFAULT_MITRE_LIMIT=5,wt.DEFAULT_SIMPLIFY_FACTOR=.01;class Ot{static relativeSign(t,e){return t<e?-1:t>e?1:0}static compareValue(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0}static compare(t,e,s){if(e.equals2D(s))return 0;const i=Ot.relativeSign(e.x,s.x),n=Ot.relativeSign(e.y,s.y);switch(t){case 0:return Ot.compareValue(i,n);case 1:return Ot.compareValue(n,i);case 2:return Ot.compareValue(n,-i);case 3:return Ot.compareValue(-i,n);case 4:return Ot.compareValue(-i,-n);case 5:return Ot.compareValue(-n,-i);case 6:return Ot.compareValue(-n,i);case 7:return Ot.compareValue(i,-n)}return g.shouldNeverReachHere("invalid octant value"),0}}class Mt{constructor(){Mt.constructor_.apply(this,arguments)}static constructor_(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this._segString=t,this.coord=new y(e),this.segmentIndex=s,this._segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(s))}getCoordinate(){return this.coord}print(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex)}compareTo(t){const e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:this._isInterior?e._isInterior?Ot.compare(this._segmentOctant,this.coord,e.coord):1:-1}isEndPoint(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t}toString(){return this.segmentIndex+":"+this.coord.toString()}isInterior(){return this._isInterior}get interfaces_(){return[l]}}class At extends lt{}function bt(t){return null==t?0:t.color}function Pt(t){return null==t?null:t.parent}function Dt(t,e){null!==t&&(t.color=e)}function vt(t){return null==t?null:t.left}function Ft(t){return null==t?null:t.right}class Gt extends At{constructor(){super(),this.root_=null,this.size_=0}get(t){let e=this.root_;for(;null!==e;){const s=t.compareTo(e.key);if(s<0)e=e.left;else{if(!(s>0))return e.value;e=e.right}}return null}put(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:0,getValue(){return this.value},getKey(){return this.key}},this.size_=1,null;let s,i,n=this.root_;do{if(s=n,i=t.compareTo(n.key),i<0)n=n.left;else{if(!(i>0)){const t=n.value;return n.value=e,t}n=n.right}}while(null!==n);const r={key:t,left:null,right:null,value:e,parent:s,color:0,getValue(){return this.value},getKey(){return this.key}};return i<0?s.left=r:s.right=r,this.fixAfterInsertion(r),this.size_++,null}fixAfterInsertion(t){let e;for(t.color=1;null!=t&&t!==this.root_&&1===t.parent.color;)Pt(t)===vt(Pt(Pt(t)))?(e=Ft(Pt(Pt(t))),1===bt(e)?(Dt(Pt(t),0),Dt(e,0),Dt(Pt(Pt(t)),1),t=Pt(Pt(t))):(t===Ft(Pt(t))&&(t=Pt(t),this.rotateLeft(t)),Dt(Pt(t),0),Dt(Pt(Pt(t)),1),this.rotateRight(Pt(Pt(t))))):(e=vt(Pt(Pt(t))),1===bt(e)?(Dt(Pt(t),0),Dt(e,0),Dt(Pt(Pt(t)),1),t=Pt(Pt(t))):(t===vt(Pt(t))&&(t=Pt(t),this.rotateRight(t)),Dt(Pt(t),0),Dt(Pt(Pt(t)),1),this.rotateLeft(Pt(Pt(t)))));this.root_.color=0}values(){const t=new w;let e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=Gt.successor(e));)t.add(e.value);return t}entrySet(){const t=new ht;let e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=Gt.successor(e));)t.add(e);return t}rotateLeft(t){if(null!=t){const e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}}rotateRight(t){if(null!=t){const e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}}getFirstEntry(){let t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t}static successor(t){let e;if(null===t)return null;if(null!==t.right){for(e=t.right;null!==e.left;)e=e.left;return e}{e=t.parent;let s=t;for(;null!==e&&s===e.right;)s=e,e=e.parent;return e}}size(){return this.size_}containsKey(t){let e=this.root_;for(;null!==e;){const s=t.compareTo(e.key);if(s<0)e=e.left;else{if(!(s>0))return!0;e=e.right}}return!1}}class qt{constructor(){qt.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new Gt,this._edge=null;const t=arguments[0];this._edge=t}getSplitCoordinates(){const t=new M;this.addEndpoints();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next();this.addEdgeCoordinates(s,i,t),s=i}return t.toCoordinateArray()}print(t){t.println("Intersections:");for(let e=this.iterator();e.hasNext();){e.next().print(t)}}findCollapsesFromExistingVertices(t){for(let e=0;e<this._edge.size()-2;e++){const s=this._edge.getCoordinate(e),i=(this._edge.getCoordinate(e+1),this._edge.getCoordinate(e+2));s.equals2D(i)&&t.add(ut.valueOf(e+1))}}addEdgeCoordinates(t,e,s){const i=this.createSplitEdgePts(t,e);s.add(i,!1)}findCollapseIndex(t,e,s){if(!t.coord.equals2D(e.coord))return!1;let i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(s[0]=t.segmentIndex+1,!0)}findCollapsesFromInsertedNodes(t){const e=new Array(1).fill(null),s=this.iterator();let i=s.next();for(;s.hasNext();){const n=s.next();this.findCollapseIndex(i,n,e)&&t.add(ut.valueOf(e[0])),i=n}}getEdge(){return this._edge}addEndpoints(){const t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t)}createSplitEdge(t,e){const s=this.createSplitEdgePts(t,e);return new ce(s,this._edge.getData())}add(t,e){const s=new Mt(this._edge,t,e,this._edge.getSegmentOctant(e)),i=this._nodeMap.get(s);return null!==i?(g.isTrue(i.coord.equals2D(t),"Found equal nodes with different coordinates"),i):(this._nodeMap.put(s,s),s)}checkSplitEdgesCorrectness(t){const e=this._edge.getCoordinates(),s=t.get(0).getCoordinate(0);if(!s.equals2D(e[0]))throw new c("bad split edge start point at "+s);const i=t.get(t.size()-1).getCoordinates(),n=i[i.length-1];if(!n.equals2D(e[e.length-1]))throw new c("bad split edge end point at "+n)}addCollapsedNodes(){const t=new w;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(let e=t.iterator();e.hasNext();){const t=e.next().intValue();this.add(this._edge.getCoordinate(t),t)}}createSplitEdgePts(t,e){let s=e.segmentIndex-t.segmentIndex+2;if(2===s)return[new y(t.coord),new y(e.coord)];const i=this._edge.getCoordinate(e.segmentIndex),n=e.isInterior()||!e.coord.equals2D(i);n||s--;const r=new Array(s).fill(null);let o=0;r[o++]=new y(t.coord);for(let s=t.segmentIndex+1;s<=e.segmentIndex;s++)r[o++]=this._edge.getCoordinate(s);return n&&(r[o]=new y(e.coord)),r}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(t){this.addEndpoints(),this.addCollapsedNodes();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next(),n=this.createSplitEdge(s,i);t.add(n),s=i}}}const Yt="XY",zt="XYZ",Xt="XYM",Bt="XYZM",Ut={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"},kt="EMPTY",Vt=1,Ht=2,Zt=3,Wt=4,jt=5,Qt=6,Kt={};for(const t in Ut)Kt[t]=Ut[t].toUpperCase();class Jt{constructor(t){this.wkt=t,this.index_=-1}isAlpha_(t){return t>="a"&&t<="z"||t>="A"&&t<="Z"}isNumeric_(t,e){return t>="0"&&t<="9"||"."==t&&!(void 0!==e&&e)}isWhiteSpace_(t){return" "==t||"\t"==t||"\r"==t||"\n"==t}nextChar_(){return this.wkt.charAt(++this.index_)}nextToken(){const t=this.nextChar_(),e=this.index_;let s,i=t;if("("==t)s=Ht;else if(","==t)s=jt;else if(")"==t)s=Zt;else if(this.isNumeric_(t)||"-"==t)s=Wt,i=this.readNumber_();else if(this.isAlpha_(t))s=Vt,i=this.readText_();else{if(this.isWhiteSpace_(t))return this.nextToken();if(""!==t)throw new Error("Unexpected character: "+t);s=Qt}return{position:e,value:i,type:s}}readNumber_(){let t;const e=this.index_;let s=!1,i=!1;do{"."==t?s=!0:"e"!=t&&"E"!=t||(i=!0),t=this.nextChar_()}while(this.isNumeric_(t,s)||!i&&("e"==t||"E"==t)||i&&("-"==t||"+"==t));return parseFloat(this.wkt.substring(e,this.index_--))}readText_(){let t;const e=this.index_;do{t=this.nextChar_()}while(this.isAlpha_(t));return this.wkt.substring(e,this.index_--).toUpperCase()}}class $t{constructor(t,e){this.lexer_=t,this.token_,this.layout_=Yt,this.factory=e}consume_(){this.token_=this.lexer_.nextToken()}isTokenType(t){return this.token_.type==t}match(t){const e=this.isTokenType(t);return e&&this.consume_(),e}parse(){this.consume_();return this.parseGeometry_()}parseGeometryLayout_(){let t=Yt;const e=this.token_;if(this.isTokenType(Vt)){const s=e.value;"Z"===s?t=zt:"M"===s?t=Xt:"ZM"===s&&(t=Bt),t!==Yt&&this.consume_()}return t}parseGeometryCollectionText_(){if(this.match(Ht)){const t=[];do{t.push(this.parseGeometry_())}while(this.match(jt));if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePointText_(){if(this.match(Ht)){const t=this.parsePoint_();if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return null;throw new Error(this.formatErrorMessage_())}parseLineStringText_(){if(this.match(Ht)){const t=this.parsePointList_();if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePolygonText_(){if(this.match(Ht)){const t=this.parseLineStringTextList_();if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPointText_(){if(this.match(Ht)){let t;if(t=this.token_.type==Ht?this.parsePointTextList_():this.parsePointList_(),this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiLineStringText_(){if(this.match(Ht)){const t=this.parseLineStringTextList_();if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPolygonText_(){if(this.match(Ht)){const t=this.parsePolygonTextList_();if(this.match(Zt))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePoint_(){const t=[],e=this.layout_.length;for(let s=0;s<e;++s){const e=this.token_;if(!this.match(Wt))break;t.push(e.value)}if(t.length==e)return t;throw new Error(this.formatErrorMessage_())}parsePointList_(){const t=[this.parsePoint_()];for(;this.match(jt);)t.push(this.parsePoint_());return t}parsePointTextList_(){const t=[this.parsePointText_()];for(;this.match(jt);)t.push(this.parsePointText_());return t}parseLineStringTextList_(){const t=[this.parseLineStringText_()];for(;this.match(jt);)t.push(this.parseLineStringText_());return t}parsePolygonTextList_(){const t=[this.parsePolygonText_()];for(;this.match(jt);)t.push(this.parsePolygonText_());return t}isEmptyGeometry_(){const t=this.isTokenType(Vt)&&this.token_.value==kt;return t&&this.consume_(),t}formatErrorMessage_(){return"Unexpected `"+this.token_.value+"` at position "+this.token_.position+" in `"+this.lexer_.wkt+"`"}parseGeometry_(){const t=this.factory,e=t=>t?new y(...t):new y,s=s=>{const i=s.map((s=>t.createLinearRing(s.map(e))));return i.length>1?t.createPolygon(i[0],i.slice(1)):1===i.length?t.createPolygon(i[0]):t.createPolygon()},i=this.token_;if(this.match(Vt)){const n=i.value;if(this.layout_=this.parseGeometryLayout_(),"GEOMETRYCOLLECTION"==n){const e=this.parseGeometryCollectionText_();return t.createGeometryCollection(e)}switch(n){case"POINT":{const e=this.parsePointText_();return e?t.createPoint(new y(...e)):t.createPoint()}case"LINESTRING":{const s=this.parseLineStringText_().map(e);return t.createLineString(s)}case"LINEARRING":{const s=this.parseLineStringText_().map(e);return t.createLinearRing(s)}case"POLYGON":{const e=this.parsePolygonText_();return e&&0!==e.length?s(e):t.createPolygon()}case"MULTIPOINT":{const s=this.parseMultiPointText_();if(!s||0===s.length)return t.createMultiPoint();const i=s.map(e).map((e=>t.createPoint(e)));return t.createMultiPoint(i)}case"MULTILINESTRING":{const s=this.parseMultiLineStringText_().map((s=>t.createLineString(s.map(e))));return t.createMultiLineString(s)}case"MULTIPOLYGON":{const e=this.parseMultiPolygonText_();if(!e||0===e.length)return t.createMultiPolygon();const i=e.map(s);return t.createMultiPolygon(i)}default:throw new Error("Invalid geometry type: "+n)}}throw new Error(this.formatErrorMessage_())}}function te(t){if(t.isEmpty())return"";const e=t.getCoordinate(),s=[e.x,e.y];return void 0===e.z||Number.isNaN(e.z)||s.push(e.z),void 0===e.m||Number.isNaN(e.m)||s.push(e.m),s.join(" ")}function ee(t){const e=t.getCoordinates().map((t=>{const e=[t.x,t.y];return void 0===t.z||Number.isNaN(t.z)||e.push(t.z),void 0===t.m||Number.isNaN(t.m)||e.push(t.m),e})),s=[];for(let t=0,i=e.length;t<i;++t)s.push(e[t].join(" "));return s.join(", ")}function se(t){const e=[];e.push("("+ee(t.getExteriorRing())+")");for(let s=0,i=t.getNumInteriorRing();s<i;++s)e.push("("+ee(t.getInteriorRingN(s))+")");return e.join(", ")}const ie={Point:te,LineString:ee,LinearRing:ee,Polygon:se,MultiPoint:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+te(t.getGeometryN(s))+")");return e.join(", ")},MultiLineString:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+ee(t.getGeometryN(s))+")");return e.join(", ")},MultiPolygon:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+se(t.getGeometryN(s))+")");return e.join(", ")},GeometryCollection:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push(ne(t.getGeometryN(s)));return e.join(", ")}};function ne(t){let e=t.getGeometryType();const s=ie[e];e=e.toUpperCase();const i=function(t){let e="";if(t.isEmpty())return e;const s=t.getCoordinate();return void 0===s.z||Number.isNaN(s.z)||(e+="Z"),void 0===s.m||Number.isNaN(s.m)||(e+="M"),e}(t);if(i.length>0&&(e+=" "+i),t.isEmpty())return e+" "+kt;return e+" ("+s(t)+")"}class re{constructor(t){this.geometryFactory=t||new St,this.precisionModel=this.geometryFactory.getPrecisionModel()}read(t){const e=new Jt(t);return new $t(e,this.geometryFactory).parse()}write(t){return ne(t)}}class oe{constructor(t){this.parser=new re(t)}write(t){return this.parser.write(t)}static toLineString(t,e){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+t.x+" "+t.y+", "+e.x+" "+e.y+" )"}}class ae{static octant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new r("Cannot compute the octant for point ( "+t+", "+e+" )");const s=Math.abs(t),i=Math.abs(e);return t>=0?e>=0?s>=i?0:1:s>=i?7:6:e>=0?s>=i?3:2:s>=i?4:5}if(arguments[0]instanceof y&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1],s=e.x-t.x,i=e.y-t.y;if(0===s&&0===i)throw new r("Cannot compute the octant for two identical points "+t);return ae.octant(s,i)}}}class le{getCoordinates(){}size(){}getCoordinate(t){}isClosed(){}setData(t){}getData(){}}class he{addIntersection(t,e){}get interfaces_(){return[le]}}class ce{constructor(){ce.constructor_.apply(this,arguments)}static constructor_(){this._nodeList=new qt(this),this._pts=null,this._data=null;const t=arguments[0],e=arguments[1];this._pts=t,this._data=e}static getNodedSubstrings(){if(1===arguments.length){const t=arguments[0],e=new w;return ce.getNodedSubstrings(t,e),e}if(2===arguments.length){const t=arguments[1];for(let e=arguments[0].iterator();e.hasNext();){e.next().getNodeList().addSplitEdges(t)}}}getCoordinates(){return this._pts}size(){return this._pts.length}getCoordinate(t){return this._pts[t]}isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1])}getSegmentOctant(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))}toString(){return oe.toLineString(new J(this._pts))}getNodeList(){return this._nodeList}addIntersectionNode(t,e){let s=e;const i=s+1;if(i<this._pts.length){const e=this._pts[i];t.equals2D(e)&&(s=i)}return this._nodeList.add(t,s)}addIntersections(t,e,s){for(let i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,s,i)}setData(t){this._data=t}safeOctant(t,e){return t.equals2D(e)?0:ae.octant(t,e)}getData(){return this._data}addIntersection(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){const t=arguments[1],e=arguments[3],s=new y(arguments[0].getIntersection(e));this.addIntersection(s,t)}}get interfaces_(){return[he]}}class ue{getNodedSubstrings(){}computeNodes(t){}}class ge{constructor(){ge.constructor_.apply(this,arguments)}static constructor_(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){const t=arguments[0],e=arguments[1];ge.constructor_.call(this,t,e,0,0)}else if(4===arguments.length){const t=arguments[0],e=arguments[1];this._noder=t,this._scaleFactor=e,this._isScaled=!this.isIntegerPrecision()}}rescale(){if(I(arguments[0],L)){for(let t=arguments[0].iterator();t.hasNext();){const e=t.next();this.rescale(e.getCoordinates())}}else if(arguments[0]instanceof Array){const t=arguments[0];for(let e=0;e<t.length;e++)t[e].x=t[e].x/this._scaleFactor+this._offsetX,t[e].y=t[e].y/this._scaleFactor+this._offsetY;2===t.length&&t[0].equals2D(t[1])&&F.out.println(t)}}scale(){if(I(arguments[0],L)){const t=arguments[0],e=new w(t.size());for(let s=t.iterator();s.hasNext();){const t=s.next();e.add(new ce(this.scale(t.getCoordinates()),t.getData()))}return e}if(arguments[0]instanceof Array){const t=arguments[0],e=new Array(t.length).fill(null);for(let s=0;s<t.length;s++)e[s]=new y(Math.round((t[s].x-this._offsetX)*this._scaleFactor),Math.round((t[s].y-this._offsetY)*this._scaleFactor),t[s].getZ());return q.removeRepeatedPoints(e)}}isIntegerPrecision(){return 1===this._scaleFactor}getNodedSubstrings(){const t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t}computeNodes(t){let e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e)}get interfaces_(){return[ue]}}class de extends c{constructor(t,e){super(e?t+" [ "+e+" ]":t),this.pt=e?new y(e):void 0,this.name=Object.keys({TopologyException:de})[0]}getCoordinate(){return this.pt}}class _e{static intersection(t,e,s,i){const n=t.x<e.x?t.x:e.x,r=t.y<e.y?t.y:e.y,o=t.x>e.x?t.x:e.x,l=t.y>e.y?t.y:e.y,h=s.x<i.x?s.x:i.x,c=s.y<i.y?s.y:i.y,u=s.x>i.x?s.x:i.x,g=s.y>i.y?s.y:i.y,d=((n>h?n:h)+(o<u?o:u))/2,_=((r>c?r:c)+(l<g?l:g))/2,p=t.x-d,f=t.y-_,m=e.x-d,x=e.y-_,I=s.x-d,E=s.y-_,N=i.x-d,T=i.y-_,L=f-x,S=m-p,C=p*x-m*f,R=E-T,w=N-I,O=I*T-N*E,M=L*w-R*S,A=(S*O-w*C)/M,b=(R*C-L*O)/M;return a.isNaN(A)||a.isInfinite(A)||a.isNaN(b)||a.isInfinite(b)?null:new y(A+d,b+_)}}class pe{static pointToSegmentString(t,e){if(0===e.length)throw new r("Line array must contain at least one vertex");let s=t.distance(e[0]);for(let i=0;i<e.length-1;i++){const n=pe.pointToSegment(t,e[i],e[i+1]);n<s&&(s=n)}return s}static segmentToSegment(t,e,s,i){if(t.equals(e))return pe.pointToSegment(t,s,i);if(s.equals(i))return pe.pointToSegment(i,t,e);let n=!1;if(G.intersects(t,e,s,i)){const r=(e.x-t.x)*(i.y-s.y)-(e.y-t.y)*(i.x-s.x);if(0===r)n=!0;else{const o=(t.y-s.y)*(i.x-s.x)-(t.x-s.x)*(i.y-s.y),a=((t.y-s.y)*(e.x-t.x)-(t.x-s.x)*(e.y-t.y))/r,l=o/r;(l<0||l>1||a<0||a>1)&&(n=!0)}}else n=!0;return n?v.min(pe.pointToSegment(t,s,i),pe.pointToSegment(e,s,i),pe.pointToSegment(s,t,e),pe.pointToSegment(i,t,e)):0}static pointToLinePerpendicular(t,e,s){const i=(s.x-e.x)*(s.x-e.x)+(s.y-e.y)*(s.y-e.y),n=((e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y))/i;return Math.abs(n)*Math.sqrt(i)}static pointToSegment(t,e,s){if(e.x===s.x&&e.y===s.y)return t.distance(e);const i=(s.x-e.x)*(s.x-e.x)+(s.y-e.y)*(s.y-e.y),n=((t.x-e.x)*(s.x-e.x)+(t.y-e.y)*(s.y-e.y))/i;if(n<=0)return t.distance(e);if(n>=1)return t.distance(s);const r=((e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y))/i;return Math.abs(r)*Math.sqrt(i)}}class fe{constructor(){fe.constructor_.apply(this,arguments)}static constructor_(){this._result=null,this._inputLines=Array(2).fill().map((()=>Array(2))),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new y,this._intPt[1]=new y,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0}static nonRobustComputeEdgeDistance(t,e,s){const i=t.x-e.x,n=t.y-e.y,r=Math.sqrt(i*i+n*n);return g.isTrue(!(0===r&&!t.equals(e)),"Invalid distance calculation"),r}static computeEdgeDistance(t,e,s){const i=Math.abs(s.x-e.x),n=Math.abs(s.y-e.y);let r=-1;if(t.equals(e))r=0;else if(t.equals(s))r=i>n?i:n;else{const s=Math.abs(t.x-e.x),o=Math.abs(t.y-e.y);r=i>n?s:o,0!==r||t.equals(e)||(r=Math.max(s,o))}return g.isTrue(!(0===r&&!t.equals(e)),"Bad distance calculation"),r}computeIntersection(t,e,s,i){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=s,this._inputLines[1][1]=i,this._result=this.computeIntersect(t,e,s,i)}getIntersectionNum(){return this._result}computeIntLineIndex(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map((()=>Array(2))),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){const t=arguments[0];this.getEdgeDistance(t,0)>this.getEdgeDistance(t,1)?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0)}}isInteriorIntersection(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){const t=arguments[0];for(let e=0;e<this._result;e++)if(!this._intPt[e].equals2D(this._inputLines[t][0])&&!this._intPt[e].equals2D(this._inputLines[t][1]))return!0;return!1}}getIntersection(t){return this._intPt[t]}getEdgeDistance(t,e){return fe.computeEdgeDistance(this._intPt[e],this._inputLines[t][0],this._inputLines[t][1])}isCollinear(){return this._result===fe.COLLINEAR_INTERSECTION}toString(){return oe.toLineString(this._inputLines[0][0],this._inputLines[0][1])+" - "+oe.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()}getEndpoint(t,e){return this._inputLines[t][e]}getIndexAlongSegment(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]}getTopologySummary(){const t=new K;return this.isEndPoint()&&t.append(" endpoint"),this._isProper&&t.append(" proper"),this.isCollinear()&&t.append(" collinear"),t.toString()}isProper(){return this.hasIntersection()&&this._isProper}setPrecisionModel(t){this._precisionModel=t}isEndPoint(){return this.hasIntersection()&&!this._isProper}hasIntersection(){return this._result!==fe.NO_INTERSECTION}isIntersection(t){for(let e=0;e<this._result;e++)if(this._intPt[e].equals2D(t))return!0;return!1}getIntersectionAlongSegment(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]}}fe.DONT_INTERSECT=0,fe.DO_INTERSECT=1,fe.COLLINEAR=2,fe.NO_INTERSECTION=0,fe.POINT_INTERSECTION=1,fe.COLLINEAR_INTERSECTION=2;class me extends fe{constructor(){super()}static nearestEndpoint(t,e,s,i){let n=t,r=pe.pointToSegment(t,s,i),o=pe.pointToSegment(e,s,i);return o<r&&(r=o,n=e),o=pe.pointToSegment(s,t,e),o<r&&(r=o,n=s),o=pe.pointToSegment(i,t,e),o<r&&(r=o,n=i),n}isInSegmentEnvelopes(t){const e=new G(this._inputLines[0][0],this._inputLines[0][1]),s=new G(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&s.contains(t)}computeIntersection(){if(3!==arguments.length)return super.computeIntersection.apply(this,arguments);{const t=arguments[0],e=arguments[1],s=arguments[2];if(this._isProper=!1,G.intersects(e,s,t)&&0===Nt.index(e,s,t)&&0===Nt.index(s,e,t))return this._isProper=!0,(t.equals(e)||t.equals(s))&&(this._isProper=!1),this._result=fe.POINT_INTERSECTION,null;this._result=fe.NO_INTERSECTION}}intersection(t,e,s,i){let n=this.intersectionSafe(t,e,s,i);return this.isInSegmentEnvelopes(n)||(n=new y(me.nearestEndpoint(t,e,s,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(n),n}checkDD(t,e,s,i,n){const r=Et.intersection(t,e,s,i),o=this.isInSegmentEnvelopes(r);F.out.println("DD in env = "+o+"  --------------------- "+r),n.distance(r)>1e-4&&F.out.println("Distance = "+n.distance(r))}intersectionSafe(t,e,s,i){let n=_e.intersection(t,e,s,i);return null===n&&(n=me.nearestEndpoint(t,e,s,i)),n}computeCollinearIntersection(t,e,s,i){const n=G.intersects(t,e,s),r=G.intersects(t,e,i),o=G.intersects(s,i,t),a=G.intersects(s,i,e);return n&&r?(this._intPt[0]=s,this._intPt[1]=i,fe.COLLINEAR_INTERSECTION):o&&a?(this._intPt[0]=t,this._intPt[1]=e,fe.COLLINEAR_INTERSECTION):n&&o?(this._intPt[0]=s,this._intPt[1]=t,!s.equals(t)||r||a?fe.COLLINEAR_INTERSECTION:fe.POINT_INTERSECTION):n&&a?(this._intPt[0]=s,this._intPt[1]=e,!s.equals(e)||r||o?fe.COLLINEAR_INTERSECTION:fe.POINT_INTERSECTION):r&&o?(this._intPt[0]=i,this._intPt[1]=t,!i.equals(t)||n||a?fe.COLLINEAR_INTERSECTION:fe.POINT_INTERSECTION):r&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||n||o?fe.COLLINEAR_INTERSECTION:fe.POINT_INTERSECTION):fe.NO_INTERSECTION}computeIntersect(t,e,s,i){if(this._isProper=!1,!G.intersects(t,e,s,i))return fe.NO_INTERSECTION;const n=Nt.index(t,e,s),r=Nt.index(t,e,i);if(n>0&&r>0||n<0&&r<0)return fe.NO_INTERSECTION;const o=Nt.index(s,i,t),a=Nt.index(s,i,e);if(o>0&&a>0||o<0&&a<0)return fe.NO_INTERSECTION;return 0===n&&0===r&&0===o&&0===a?this.computeCollinearIntersection(t,e,s,i):(0===n||0===r||0===o||0===a?(this._isProper=!1,t.equals2D(s)||t.equals2D(i)?this._intPt[0]=t:e.equals2D(s)||e.equals2D(i)?this._intPt[0]=e:0===n?this._intPt[0]=new y(s):0===r?this._intPt[0]=new y(i):0===o?this._intPt[0]=new y(t):0===a&&(this._intPt[0]=new y(e))):(this._isProper=!0,this._intPt[0]=this.intersection(t,e,s,i)),fe.POINT_INTERSECTION)}}class ye{constructor(){ye.constructor_.apply(this,arguments)}static constructor_(){this._li=new me,this._segStrings=null;const t=arguments[0];this._segStrings=t}checkEndPtVertexIntersections(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next().getCoordinates();this.checkEndPtVertexIntersections(e[0],this._segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this._segStrings)}else if(2===arguments.length){const t=arguments[0];for(let e=arguments[1].iterator();e.hasNext();){const s=e.next().getCoordinates();for(let e=1;e<s.length-1;e++)if(s[e].equals(t))throw new c("found endpt/interior pt intersection at index "+e+" :pt "+t)}}}checkInteriorIntersections(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next();for(let t=this._segStrings.iterator();t.hasNext();){const s=t.next();this.checkInteriorIntersections(e,s)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1],s=t.getCoordinates(),i=e.getCoordinates();for(let n=0;n<s.length-1;n++)for(let s=0;s<i.length-1;s++)this.checkInteriorIntersections(t,n,e,s)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];if(t===s&&e===i)return null;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];if(this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,n,r)||this.hasInteriorIntersection(this._li,o,a)))throw new c("found non-noded intersection at "+n+"-"+r+" and "+o+"-"+a)}}checkValid(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()}checkCollapses(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next();this.checkCollapses(e)}else if(1===arguments.length){const t=arguments[0].getCoordinates();for(let e=0;e<t.length-2;e++)this.checkCollapse(t[e],t[e+1],t[e+2])}}hasInteriorIntersection(t,e,s){for(let i=0;i<t.getIntersectionNum();i++){const n=t.getIntersection(i);if(!n.equals(e)&&!n.equals(s))return!0}return!1}checkCollapse(t,e,s){if(t.equals(s))throw new c("found non-noded collapse at "+ye.fact.createLineString([t,e,s]))}}ye.fact=new St;class xe{getBounds(){}}class Ie{constructor(){Ie.constructor_.apply(this,arguments)}static constructor_(){this._bounds=null,this._item=null;const t=arguments[0],e=arguments[1];this._bounds=t,this._item=e}getItem(){return this._item}getBounds(){return this._bounds}get interfaces_(){return[xe,h]}}var Ee=s(59559);class Ne{constructor(){this._fpQueue=new Ee(((t,e)=>t.compareTo(e)<0))}poll(){return this._fpQueue.poll()}size(){return this._fpQueue.size}clear(){this._fpQueue=new Ee}peek(){return this._fpQueue.peek()}remove(){return this._fpQueue.poll()}isEmpty(){return this._fpQueue.isEmpty()}add(t){this._fpQueue.add(t)}}class Te{query(){if(1===arguments.length){}else if(2===arguments.length){}}insert(t,e){}remove(t,e){}}class Le{constructor(){Le.constructor_.apply(this,arguments)}static constructor_(){if(this._childBoundables=new w,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this._level=t}}getLevel(){return this._level}addChildBoundable(t){g.isTrue(null===this._bounds),this._childBoundables.add(t)}isEmpty(){return this._childBoundables.isEmpty()}getBounds(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds}size(){return this._childBoundables.size()}getChildBoundables(){return this._childBoundables}get interfaces_(){return[xe,h]}}const Se={reverseOrder:function(){return{compare(t,e){return e.compareTo(t)}}},min:function(t){return Se.sort(t),t.get(0)},sort:function(t,e){const s=t.toArray();e?nt.sort(s,e):nt.sort(s);const i=t.iterator();for(let t=0,e=s.length;t<e;t++)i.next(),i.set(s[t])},singletonList:function(t){const e=new w;return e.add(t),e}};var Ce=Se;class Re{static distance(t,e,s,i){const n=s-t,r=i-e;return Math.sqrt(n*n+r*r)}static maximumDistance(t,e){const s=Math.min(t.getMinX(),e.getMinX()),i=Math.min(t.getMinY(),e.getMinY()),n=Math.max(t.getMaxX(),e.getMaxX()),r=Math.max(t.getMaxY(),e.getMaxY());return Re.distance(s,i,n,r)}static minMaxDistance(t,e){const s=t.getMinX(),i=t.getMinY(),n=t.getMaxX(),r=t.getMaxY(),o=e.getMinX(),a=e.getMinY(),l=e.getMaxX(),h=e.getMaxY();let c=Re.maxDistance(s,i,s,r,o,a,o,h);return c=Math.min(c,Re.maxDistance(s,i,s,r,o,a,l,a)),c=Math.min(c,Re.maxDistance(s,i,s,r,l,h,o,h)),c=Math.min(c,Re.maxDistance(s,i,s,r,l,h,l,a)),c=Math.min(c,Re.maxDistance(s,i,n,i,o,a,o,h)),c=Math.min(c,Re.maxDistance(s,i,n,i,o,a,l,a)),c=Math.min(c,Re.maxDistance(s,i,n,i,l,h,o,h)),c=Math.min(c,Re.maxDistance(s,i,n,i,l,h,l,a)),c=Math.min(c,Re.maxDistance(n,r,s,r,o,a,o,h)),c=Math.min(c,Re.maxDistance(n,r,s,r,o,a,l,a)),c=Math.min(c,Re.maxDistance(n,r,s,r,l,h,o,h)),c=Math.min(c,Re.maxDistance(n,r,s,r,l,h,l,a)),c=Math.min(c,Re.maxDistance(n,r,n,i,o,a,o,h)),c=Math.min(c,Re.maxDistance(n,r,n,i,o,a,l,a)),c=Math.min(c,Re.maxDistance(n,r,n,i,l,h,o,h)),c=Math.min(c,Re.maxDistance(n,r,n,i,l,h,l,a)),c}static maxDistance(t,e,s,i,n,r,o,a){let l=Re.distance(t,e,n,r);return l=Math.max(l,Re.distance(t,e,o,a)),l=Math.max(l,Re.distance(s,i,n,r)),l=Math.max(l,Re.distance(s,i,o,a)),l}}class we{constructor(){we.constructor_.apply(this,arguments)}static constructor_(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;const t=arguments[0],e=arguments[1],s=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=s,this._distance=this.distance()}static area(t){return t.getBounds().getArea()}static isComposite(t){return t instanceof Le}maximumDistance(){return Re.maximumDistance(this._boundable1.getBounds(),this._boundable2.getBounds())}expandToQueue(t,e){const s=we.isComposite(this._boundable1),i=we.isComposite(this._boundable2);if(s&&i)return we.area(this._boundable1)>we.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,!1,t,e),null):(this.expand(this._boundable2,this._boundable1,!0,t,e),null);if(s)return this.expand(this._boundable1,this._boundable2,!1,t,e),null;if(i)return this.expand(this._boundable2,this._boundable1,!0,t,e),null;throw new r("neither boundable is composite")}isLeaves(){return!(we.isComposite(this._boundable1)||we.isComposite(this._boundable2))}getBoundable(t){return 0===t?this._boundable1:this._boundable2}getDistance(){return this._distance}distance(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())}compareTo(t){const e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0}expand(t,e,s,i,n){for(let r=t.getChildBoundables().iterator();r.hasNext();){const t=r.next();let o=null;o=s?new we(e,t,this._itemDistance):new we(t,e,this._itemDistance),o.getDistance()<n&&i.add(o)}}get interfaces_(){return[l]}}class Oe{visitItem(t){}}class Me{constructor(){Me.constructor_.apply(this,arguments)}static constructor_(){if(this._root=null,this._built=!1,this._itemBoundables=new w,this._nodeCapacity=null,0===arguments.length)Me.constructor_.call(this,Me.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const t=arguments[0];g.isTrue(t>1,"Node capacity must be greater than 1"),this._nodeCapacity=t}}static compareDoubles(t,e){return t>e?1:t<e?-1:0}queryInternal(){if(I(arguments[2],Oe)&&arguments[0]instanceof Object&&arguments[1]instanceof Le){const t=arguments[0],e=arguments[2],s=arguments[1].getChildBoundables();for(let i=0;i<s.size();i++){const n=s.get(i);this.getIntersectsOp().intersects(n.getBounds(),t)&&(n instanceof Le?this.queryInternal(t,n,e):n instanceof Ie?e.visitItem(n.getItem()):g.shouldNeverReachHere())}}else if(I(arguments[2],C)&&arguments[0]instanceof Object&&arguments[1]instanceof Le){const t=arguments[0],e=arguments[2],s=arguments[1].getChildBoundables();for(let i=0;i<s.size();i++){const n=s.get(i);this.getIntersectsOp().intersects(n.getBounds(),t)&&(n instanceof Le?this.queryInternal(t,n,e):n instanceof Ie?e.add(n.getItem()):g.shouldNeverReachHere())}}}insert(t,e){g.isTrue(!this._built,"Cannot insert items into an STR packed R-tree after it has been built."),this._itemBoundables.add(new Ie(t,e))}boundablesAtLevel(){if(1===arguments.length){const t=arguments[0],e=new w;return this.boundablesAtLevel(t,this._root,e),e}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(g.isTrue(t>-2),e.getLevel()===t)return s.add(e),null;for(let i=e.getChildBoundables().iterator();i.hasNext();){const e=i.next();e instanceof Le?this.boundablesAtLevel(t,e,s):(g.isTrue(e instanceof Ie),-1===t&&s.add(e))}return null}}getRoot(){return this.build(),this._root}remove(){if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.remove(t,this._root,e)}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];let i=this.removeItem(e,s);if(i)return!0;let n=null;for(let r=e.getChildBoundables().iterator();r.hasNext();){const e=r.next();if(this.getIntersectsOp().intersects(e.getBounds(),t)&&(e instanceof Le&&(i=this.remove(t,e,s),i))){n=e;break}}return null!==n&&n.getChildBoundables().isEmpty()&&e.getChildBoundables().remove(n),i}}createHigherLevels(t,e){g.isTrue(!t.isEmpty());const s=this.createParentBoundables(t,e+1);return 1===s.size()?s.get(0):this.createHigherLevels(s,e+1)}depth(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){let t=0;for(let e=arguments[0].getChildBoundables().iterator();e.hasNext();){const s=e.next();if(s instanceof Le){const e=this.depth(s);e>t&&(t=e)}}return t+1}}createParentBoundables(t,e){g.isTrue(!t.isEmpty());const s=new w;s.add(this.createNode(e));const i=new w(t);Ce.sort(i,this.getComparator());for(let t=i.iterator();t.hasNext();){const i=t.next();this.lastNode(s).getChildBoundables().size()===this.getNodeCapacity()&&s.add(this.createNode(e)),this.lastNode(s).addChildBoundable(i)}return s}isEmpty(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()}getNodeCapacity(){return this._nodeCapacity}lastNode(t){return t.get(t.size()-1)}size(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){let t=0;for(let e=arguments[0].getChildBoundables().iterator();e.hasNext();){const s=e.next();s instanceof Le?t+=this.size(s):s instanceof Ie&&(t+=1)}return t}}removeItem(t,e){let s=null;for(let i=t.getChildBoundables().iterator();i.hasNext();){const t=i.next();t instanceof Ie&&t.getItem()===e&&(s=t)}return null!==s&&(t.getChildBoundables().remove(s),!0)}itemsTree(){if(0===arguments.length){this.build();const t=this.itemsTree(this._root);return null===t?new w:t}if(1===arguments.length){const t=arguments[0],e=new w;for(let s=t.getChildBoundables().iterator();s.hasNext();){const t=s.next();if(t instanceof Le){const s=this.itemsTree(t);null!==s&&e.add(s)}else t instanceof Ie?e.add(t.getItem()):g.shouldNeverReachHere()}return e.size()<=0?null:e}}query(){if(1===arguments.length){const t=arguments[0];this.build();const e=new w;return this.isEmpty()||this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.queryInternal(t,this._root,e),e}if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.queryInternal(t,this._root,e)}}build(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0}get interfaces_(){return[h]}}Me.IntersectsOp=function(){},Me.DEFAULT_NODE_CAPACITY=10;class Ae{distance(t,e){}}class be extends Me{constructor(){super(),be.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)be.constructor_.call(this,be.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const t=arguments[0];Me.constructor_.call(this,t)}}static getItems(t){const e=new Array(t.size()).fill(null);let s=0;for(;!t.isEmpty();){const i=t.poll();e[s]=i.getBoundable(0).getItem(),s++}return e}static avg(t,e){return(t+e)/2}static centreY(t){return be.avg(t.getMinY(),t.getMaxY())}static centreX(t){return be.avg(t.getMinX(),t.getMaxX())}size(){return 0===arguments.length?super.size.call(this):super.size.apply(this,arguments)}insert(){if(!(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof G))return super.insert.apply(this,arguments);{const t=arguments[0],e=arguments[1];if(t.isNull())return null;super.insert.call(this,t,e)}}getIntersectsOp(){return be.intersectsOp}verticalSlices(t,e){const s=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),n=t.iterator();for(let t=0;t<e;t++){i[t]=new w;let e=0;for(;n.hasNext()&&e<s;){const s=n.next();i[t].add(s),e++}}return i}query(){if(1===arguments.length){const t=arguments[0];return super.query.call(this,t)}if(2===arguments.length){const t=arguments[0],e=arguments[1];super.query.call(this,t,e)}}getComparator(){return be.yComparator}createParentBoundablesFromVerticalSlice(t,e){return super.createParentBoundables.call(this,t,e)}remove(){if(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof G){const t=arguments[0],e=arguments[1];return super.remove.call(this,t,e)}return super.remove.apply(this,arguments)}depth(){return 0===arguments.length?super.depth.call(this):super.depth.apply(this,arguments)}createParentBoundables(t,e){g.isTrue(!t.isEmpty());const s=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new w(t);Ce.sort(i,be.xComparator);const n=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(s))));return this.createParentBoundablesFromVerticalSlices(n,e)}nearestNeighbour(){if(1===arguments.length){if(I(arguments[0],Ae)){const t=arguments[0];if(this.isEmpty())return null;const e=new we(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(e)}if(arguments[0]instanceof we){const t=arguments[0];let e=a.POSITIVE_INFINITY,s=null;const i=new Ne;for(i.add(t);!i.isEmpty()&&e>0;){const t=i.poll(),n=t.getDistance();if(n>=e)break;t.isLeaves()?(e=n,s=t):t.expandToQueue(i,e)}return null===s?null:[s.getBoundable(0).getItem(),s.getBoundable(1).getItem()]}}else{if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.isEmpty()||t.isEmpty())return null;const s=new we(this.getRoot(),t.getRoot(),e);return this.nearestNeighbour(s)}if(3===arguments.length){const t=arguments[2],e=new Ie(arguments[0],arguments[1]),s=new we(this.getRoot(),e,t);return this.nearestNeighbour(s)[0]}if(4===arguments.length){const t=arguments[2],e=arguments[3],s=new Ie(arguments[0],arguments[1]),i=new we(this.getRoot(),s,t);return this.nearestNeighbourK(i,e)}}}isWithinDistance(){if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=a.POSITIVE_INFINITY;const i=new Ne;for(i.add(t);!i.isEmpty();){const t=i.poll(),n=t.getDistance();if(n>e)return!1;if(t.maximumDistance()<=e)return!0;if(t.isLeaves()){if(s=n,s<=e)return!0}else t.expandToQueue(i,s)}return!1}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=new we(this.getRoot(),t.getRoot(),e);return this.isWithinDistance(i,s)}}createParentBoundablesFromVerticalSlices(t,e){g.isTrue(t.length>0);const s=new w;for(let i=0;i<t.length;i++)s.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return s}nearestNeighbourK(){if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.nearestNeighbourK(t,a.POSITIVE_INFINITY,e)}if(3===arguments.length){const t=arguments[0],e=arguments[2];let s=arguments[1];const i=new Ne;i.add(t);const n=new Ne;for(;!i.isEmpty()&&s>=0;){const t=i.poll(),r=t.getDistance();if(r>=s)break;if(t.isLeaves())if(n.size()<e)n.add(t);else{n.peek().getDistance()>r&&(n.poll(),n.add(t));s=n.peek().getDistance()}else t.expandToQueue(i,s)}return be.getItems(n)}}createNode(t){return new Pe(t)}get interfaces_(){return[Te,h]}}class Pe extends Le{constructor(){super(),Pe.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0];Le.constructor_.call(this,t)}computeBounds(){let t=null;for(let e=this.getChildBoundables().iterator();e.hasNext();){const s=e.next();null===t?t=new G(s.getBounds()):t.expandToInclude(s.getBounds())}return t}}be.STRtreeNode=Pe,be.xComparator=new class{get interfaces_(){return[_]}compare(t,e){return Me.compareDoubles(be.centreX(t.getBounds()),be.centreX(e.getBounds()))}},be.yComparator=new class{get interfaces_(){return[_]}compare(t,e){return Me.compareDoubles(be.centreY(t.getBounds()),be.centreY(e.getBounds()))}},be.intersectsOp=new class{get interfaces_(){return[IntersectsOp]}intersects(t,e){return t.intersects(e)}},be.DEFAULT_NODE_CAPACITY=10;class De{constructor(){De.constructor_.apply(this,arguments)}static constructor_(){if(this.p0=null,this.p1=null,0===arguments.length)De.constructor_.call(this,new y,new y);else if(1===arguments.length){const t=arguments[0];De.constructor_.call(this,t.p0,t.p1)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.p0=t,this.p1=e}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];De.constructor_.call(this,new y(t,e),new y(s,i))}}static midPoint(t,e){return new y((t.x+e.x)/2,(t.y+e.y)/2)}minX(){return Math.min(this.p0.x,this.p1.x)}orientationIndex(){if(arguments[0]instanceof De){const t=arguments[0],e=Nt.index(this.p0,this.p1,t.p0),s=Nt.index(this.p0,this.p1,t.p1);return e>=0&&s>=0||e<=0&&s<=0?Math.max(e,s):0}if(arguments[0]instanceof y){const t=arguments[0];return Nt.index(this.p0,this.p1,t)}}toGeometry(t){return t.createLineString([this.p0,this.p1])}isVertical(){return this.p0.x===this.p1.x}minY(){return Math.min(this.p0.y,this.p1.y)}midPoint(){return De.midPoint(this.p0,this.p1)}maxY(){return Math.max(this.p0.y,this.p1.y)}pointAlongOffset(t,e){const s=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),n=this.p1.x-this.p0.x,r=this.p1.y-this.p0.y,o=Math.sqrt(n*n+r*r);let a=0,l=0;if(0!==e){if(o<=0)throw new ft("Cannot compute offset from zero-length line segment");a=e*n/o,l=e*r/o}return new y(s-l,i+a)}setCoordinates(){if(1===arguments.length){const t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.p0.x=t.x,this.p0.y=t.y,this.p1.x=e.x,this.p1.y=e.y}}segmentFraction(t){let e=this.projectionFactor(t);return e<0?e=0:(e>1||a.isNaN(e))&&(e=1),e}toString(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"}distance(){if(arguments[0]instanceof De){const t=arguments[0];return pe.segmentToSegment(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof y){const t=arguments[0];return pe.pointToSegment(t,this.p0,this.p1)}}equals(t){if(!(t instanceof De))return!1;const e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)}intersection(t){const e=new me;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null}project(){if(arguments[0]instanceof y){const t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new y(t);const e=this.projectionFactor(t),s=new y;return s.x=this.p0.x+e*(this.p1.x-this.p0.x),s.y=this.p0.y+e*(this.p1.y-this.p0.y),s}if(arguments[0]instanceof De){const t=arguments[0],e=this.projectionFactor(t.p0),s=this.projectionFactor(t.p1);if(e>=1&&s>=1)return null;if(e<=0&&s<=0)return null;let i=this.project(t.p0);e<0&&(i=this.p0),e>1&&(i=this.p1);let n=this.project(t.p1);return s<0&&(n=this.p0),s>1&&(n=this.p1),new De(i,n)}}normalize(){this.p1.compareTo(this.p0)<0&&this.reverse()}angle(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)}getCoordinate(t){return 0===t?this.p0:this.p1}distancePerpendicular(t){return pe.pointToLinePerpendicular(t,this.p0,this.p1)}closestPoint(t){const e=this.projectionFactor(t);if(e>0&&e<1)return this.project(t);return this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1}projectionFactor(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;const e=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y,i=e*e+s*s;if(i<=0)return a.NaN;return((t.x-this.p0.x)*e+(t.y-this.p0.y)*s)/i}closestPoints(t){const e=this.intersection(t);if(null!==e)return[e,e];const s=new Array(2).fill(null);let i=a.MAX_VALUE,n=null;const r=this.closestPoint(t.p0);i=r.distance(t.p0),s[0]=r,s[1]=t.p0;const o=this.closestPoint(t.p1);n=o.distance(t.p1),n<i&&(i=n,s[0]=o,s[1]=t.p1);const l=t.closestPoint(this.p0);n=l.distance(this.p0),n<i&&(i=n,s[0]=this.p0,s[1]=l);const h=t.closestPoint(this.p1);return n=h.distance(this.p1),n<i&&(i=n,s[0]=this.p1,s[1]=h),s}maxX(){return Math.max(this.p0.x,this.p1.x)}getLength(){return this.p0.distance(this.p1)}compareTo(t){const e=t,s=this.p0.compareTo(e.p0);return 0!==s?s:this.p1.compareTo(e.p1)}reverse(){const t=this.p0;this.p0=this.p1,this.p1=t}equalsTopo(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)}lineIntersection(t){return _e.intersection(this.p0,this.p1,t.p0,t.p1)}isHorizontal(){return this.p0.y===this.p1.y}reflect(t){const e=this.p1.getY()-this.p0.getY(),s=this.p0.getX()-this.p1.getX(),i=this.p0.getY()*(this.p1.getX()-this.p0.getX())-this.p0.getX()*(this.p1.getY()-this.p0.getY()),n=e*e+s*s,r=e*e-s*s,o=t.getX(),a=t.getY();return new y((-r*o-2*e*s*a-2*e*i)/n,(r*a-2*e*s*o-2*s*i)/n)}pointAlong(t){const e=new y;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e}hashCode(){let t=a.doubleToLongBits(this.p0.x);t^=31*a.doubleToLongBits(this.p0.y);const e=Math.trunc(t)^Math.trunc(t>>32);let s=a.doubleToLongBits(this.p1.x);s^=31*a.doubleToLongBits(this.p1.y);return e^(Math.trunc(s)^Math.trunc(s>>32))}get interfaces_(){return[l,h]}}class ve{constructor(){ve.constructor_.apply(this,arguments)}static constructor_(){this._overlapSeg1=new De,this._overlapSeg2=new De}overlap(){if(2===arguments.length){}else if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3];arguments[0].getLineSegment(t,this._overlapSeg1),e.getLineSegment(s,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}}}class Fe{constructor(){Fe.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this._pts=t,this._start=e,this._end=s,this._context=i}computeOverlaps(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.computeOverlaps(this._start,this._end,t,t._start,t._end,e)}else if(6===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4],r=arguments[5];if(e-t==1&&n-i==1)return r.overlap(this,t,s,i),null;if(!this.overlaps(t,e,s,i,n))return null;const o=Math.trunc((t+e)/2),a=Math.trunc((i+n)/2);t<o&&(i<a&&this.computeOverlaps(t,o,s,i,a,r),a<n&&this.computeOverlaps(t,o,s,a,n,r)),o<e&&(i<a&&this.computeOverlaps(o,e,s,i,a,r),a<n&&this.computeOverlaps(o,e,s,a,n,r))}}setId(t){this._id=t}select(t,e){this.computeSelect(t,this._start,this._end,e)}getEnvelope(){if(null===this._env){const t=this._pts[this._start],e=this._pts[this._end];this._env=new G(t,e)}return this._env}overlaps(t,e,s,i,n){return G.intersects(this._pts[t],this._pts[e],s._pts[i],s._pts[n])}getEndIndex(){return this._end}getStartIndex(){return this._start}getContext(){return this._context}getId(){return this._id}getLineSegment(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1]}computeSelect(t,e,s,i){const n=this._pts[e],r=this._pts[s];if(s-e==1)return i.select(this,e),null;if(!t.intersects(n,r))return null;const o=Math.trunc((e+s)/2);e<o&&this.computeSelect(t,e,o,i),o<s&&this.computeSelect(t,o,s,i)}getCoordinates(){const t=new Array(this._end-this._start+1).fill(null);let e=0;for(let s=this._start;s<=this._end;s++)t[e++]=this._pts[s];return t}}class Ge{static isNorthern(t){return t===Ge.NE||t===Ge.NW}static isOpposite(t,e){if(t===e)return!1;return 2===(t-e+4)%4}static commonHalfPlane(t,e){if(t===e)return t;if(2===(t-e+4)%4)return-1;const s=t<e?t:e;return 0===s&&3===(t>e?t:e)?3:s}static isInHalfPlane(t,e){return e===Ge.SE?t===Ge.SE||t===Ge.SW:t===e||t===e+1}static quadrant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new r("Cannot compute the quadrant for point ( "+t+", "+e+" )");return t>=0?e>=0?Ge.NE:Ge.SE:e>=0?Ge.NW:Ge.SW}if(arguments[0]instanceof y&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1];if(e.x===t.x&&e.y===t.y)throw new r("Cannot compute the quadrant for two identical points "+t);return e.x>=t.x?e.y>=t.y?Ge.NE:Ge.SE:e.y>=t.y?Ge.NW:Ge.SW}}}Ge.NE=0,Ge.NW=1,Ge.SW=2,Ge.SE=3;class qe{static findChainEnd(t,e){let s=e;for(;s<t.length-1&&t[s].equals2D(t[s+1]);)s++;if(s>=t.length-1)return t.length-1;const i=Ge.quadrant(t[s],t[s+1]);let n=e+1;for(;n<t.length;){if(!t[n-1].equals2D(t[n])){if(Ge.quadrant(t[n-1],t[n])!==i)break}n++}return n-1}static getChains(){if(1===arguments.length){const t=arguments[0];return qe.getChains(t,null)}if(2===arguments.length){const t=arguments[0],e=arguments[1],s=new w;let i=0;do{const n=qe.findChainEnd(t,i),r=new Fe(t,i,n,e);s.add(r),i=n}while(i<t.length-1);return s}}}class Ye{constructor(){Ye.constructor_.apply(this,arguments)}static constructor_(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.setSegmentIntersector(t)}}setSegmentIntersector(t){this._segInt=t}get interfaces_(){return[ue]}}class ze extends Ye{constructor(){super(),ze.constructor_.apply(this,arguments)}static constructor_(){if(this._monoChains=new w,this._index=new be,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0,0===arguments.length);else if(1===arguments.length){const t=arguments[0];Ye.constructor_.call(this,t)}}getMonotoneChains(){return this._monoChains}getNodedSubstrings(){return ce.getNodedSubstrings(this._nodedSegStrings)}getIndex(){return this._index}add(t){for(let e=qe.getChains(t.getCoordinates(),t).iterator();e.hasNext();){const t=e.next();t.setId(this._idCounter++),this._index.insert(t.getEnvelope(),t),this._monoChains.add(t)}}computeNodes(t){this._nodedSegStrings=t;for(let e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()}intersectChains(){const t=new Xe(this._segInt);for(let e=this._monoChains.iterator();e.hasNext();){const s=e.next();for(let e=this._index.query(s.getEnvelope()).iterator();e.hasNext();){const i=e.next();if(i.getId()>s.getId()&&(s.computeOverlaps(i,t),this._nOverlaps++),this._segInt.isDone())return null}}}}class Xe extends ve{constructor(){super(),Xe.constructor_.apply(this,arguments)}static constructor_(){this._si=null;const t=arguments[0];this._si=t}overlap(){if(4!==arguments.length)return super.overlap.apply(this,arguments);{const t=arguments[1],e=arguments[2],s=arguments[3],i=arguments[0].getContext(),n=e.getContext();this._si.processIntersections(i,t,n,s)}}}ze.SegmentOverlapAction=Xe;class Be{constructor(){Be.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;const t=arguments[0],e=arguments[1],s=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=e,this._li=s,e<=0)throw new r("Scale factor must be non-zero");1!==e&&(this._pt=new y(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new y,this._p1Scaled=new y),this.initCorners(this._pt)}intersectsScaled(t,e){const s=Math.min(t.x,e.x),i=Math.max(t.x,e.x),n=Math.min(t.y,e.y),r=Math.max(t.y,e.y),o=this._maxx<s||this._minx>i||this._maxy<n||this._miny>r;if(o)return!1;const a=this.intersectsToleranceSquare(t,e);return g.isTrue(!(o&&a),"Found bad envelope test"),a}copyScaled(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)}getSafeEnvelope(){if(null===this._safeEnv){const t=Be.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new G(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t)}return this._safeEnv}intersectsPixelClosure(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))}intersectsToleranceSquare(t,e){let s=!1,i=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(s=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(i=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!s||!i)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))}addSnappedNode(t,e){const s=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(s,i)&&(t.addIntersection(this.getCoordinate(),e),!0)}initCorners(t){const e=.5;this._minx=t.x-e,this._maxx=t.x+e,this._miny=t.y-e,this._maxy=t.y+e,this._corner[0]=new y(this._maxx,this._maxy),this._corner[1]=new y(this._minx,this._maxy),this._corner[2]=new y(this._minx,this._miny),this._corner[3]=new y(this._maxx,this._miny)}intersects(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))}scale(t){return Math.round(t*this._scaleFactor)}getCoordinate(){return this._originalPt}}Be.SAFE_ENV_EXPANSION_FACTOR=.75;class Ue{constructor(){Ue.constructor_.apply(this,arguments)}static constructor_(){this.selectedSegment=new De}select(){if(1===arguments.length){}else if(2===arguments.length){const t=arguments[1];arguments[0].getLineSegment(t,this.selectedSegment),this.select(this.selectedSegment)}}}class ke{constructor(){ke.constructor_.apply(this,arguments)}static constructor_(){this._index=null;const t=arguments[0];this._index=t}snap(){if(1===arguments.length){const t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=t.getSafeEnvelope(),n=new Ve(t,e,s);return this._index.query(i,new class{get interfaces_(){return[Oe]}visitItem(t){t.select(i,n)}}),n.isNodeAdded()}}}class Ve extends Ue{constructor(){super(),Ve.constructor_.apply(this,arguments)}static constructor_(){this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;const t=arguments[0],e=arguments[1],s=arguments[2];this._hotPixel=t,this._parentEdge=e,this._hotPixelVertexIndex=s}select(){if(!(2===arguments.length&&Number.isInteger(arguments[1])&&arguments[0]instanceof Fe))return super.select.apply(this,arguments);{const t=arguments[1],e=arguments[0].getContext();if(this._parentEdge===e&&(t===this._hotPixelVertexIndex||t+1===this._hotPixelVertexIndex))return null;this._isNodeAdded|=this._hotPixel.addSnappedNode(e,t)}}isNodeAdded(){return this._isNodeAdded}}ke.HotPixelSnapAction=Ve;class He{isDone(){}processIntersections(t,e,s,i){}}class Ze{constructor(){Ze.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._interiorIntersections=null;const t=arguments[0];this._li=t,this._interiorIntersections=new w}isDone(){return!1}processIntersections(t,e,s,i){if(t===s&&e===i)return null;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];if(this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(let t=0;t<this._li.getIntersectionNum();t++)this._interiorIntersections.add(this._li.getIntersection(t));t.addIntersections(this._li,e,0),s.addIntersections(this._li,i,1)}}getInteriorIntersections(){return this._interiorIntersections}get interfaces_(){return[He]}}class We{constructor(){We.constructor_.apply(this,arguments)}static constructor_(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;const t=arguments[0];this._pm=t,this._li=new me,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale()}checkCorrectness(t){const e=ce.getNodedSubstrings(t),s=new ye(e);try{s.checkValid()}catch(t){if(!(t instanceof n))throw t;t.printStackTrace()}}getNodedSubstrings(){return ce.getNodedSubstrings(this._nodedSegStrings)}snapRound(t,e){const s=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(s),this.computeVertexSnaps(t)}findInteriorIntersections(t,e){const s=new Ze(e);return this._noder.setSegmentIntersector(s),this._noder.computeNodes(t),s.getInteriorIntersections()}computeVertexSnaps(){if(I(arguments[0],L)){for(let t=arguments[0].iterator();t.hasNext();){const e=t.next();this.computeVertexSnaps(e)}}else if(arguments[0]instanceof ce){const t=arguments[0],e=t.getCoordinates();for(let s=0;s<e.length;s++){const i=new Be(e[s],this._scaleFactor,this._li);this._pointSnapper.snap(i,t,s)&&t.addIntersection(e[s],s)}}}computeNodes(t){this._nodedSegStrings=t,this._noder=new ze,this._pointSnapper=new ke(this._noder.getIndex()),this.snapRound(t,this._li)}computeIntersectionSnaps(t){for(let e=t.iterator();e.hasNext();){const t=e.next(),s=new Be(t,this._scaleFactor,this._li);this._pointSnapper.snap(s)}}get interfaces_(){return[ue]}}class je{static toLocationSymbol(t){switch(t){case je.EXTERIOR:return"e";case je.BOUNDARY:return"b";case je.INTERIOR:return"i";case je.NONE:return"-"}throw new r("Unknown location value: "+t)}}je.INTERIOR=0,je.BOUNDARY=1,je.EXTERIOR=2,je.NONE=-1;class Qe{static opposite(t){return t===Qe.LEFT?Qe.RIGHT:t===Qe.RIGHT?Qe.LEFT:t}}Qe.ON=0,Qe.LEFT=1,Qe.RIGHT=2;class Ke extends n{constructor(t){super(t),this.name=Object.keys({EmptyStackException:Ke})[0]}}class Je extends C{constructor(){super(),this.array=[]}add(t){return this.array.push(t),!0}get(t){if(t<0||t>=this.size())throw new S;return this.array[t]}push(t){return this.array.push(t),t}pop(){if(0===this.array.length)throw new Ke;return this.array.pop()}peek(){if(0===this.array.length)throw new Ke;return this.array[this.array.length-1]}empty(){return 0===this.array.length}isEmpty(){return this.empty()}search(t){return this.array.indexOf(t)}size(){return this.array.length}toArray(){return this.array.slice()}}class $e{constructor(){$e.constructor_.apply(this,arguments)}static constructor_(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null}getCoordinate(){return this._minCoord}getRightmostSide(t,e){let s=this.getRightmostSideOfSegment(t,e);return s<0&&(s=this.getRightmostSideOfSegment(t,e-1)),s<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),s}findRightmostEdgeAtVertex(){const t=this._minDe.getEdge().getCoordinates();g.isTrue(this._minIndex>0&&this._minIndex<t.length,"rightmost point expected to be interior vertex of edge");const e=t[this._minIndex-1],s=t[this._minIndex+1],i=Nt.index(this._minCoord,s,e);let n=!1;(e.y<this._minCoord.y&&s.y<this._minCoord.y&&i===Nt.COUNTERCLOCKWISE||e.y>this._minCoord.y&&s.y>this._minCoord.y&&i===Nt.CLOCKWISE)&&(n=!0),n&&(this._minIndex=this._minIndex-1)}getRightmostSideOfSegment(t,e){const s=t.getEdge().getCoordinates();if(e<0||e+1>=s.length)return-1;if(s[e].y===s[e+1].y)return-1;let i=Qe.LEFT;return s[e].y<s[e+1].y&&(i=Qe.RIGHT),i}getEdge(){return this._orientedDe}checkForRightmostCoordinate(t){const e=t.getEdge().getCoordinates();for(let s=0;s<e.length-1;s++)(null===this._minCoord||e[s].x>this._minCoord.x)&&(this._minDe=t,this._minIndex=s,this._minCoord=e[s])}findRightmostEdgeAtNode(){const t=this._minDe.getNode().getEdges();this._minDe=t.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)}findEdge(t){for(let e=t.iterator();e.hasNext();){const t=e.next();t.isForward()&&this.checkForRightmostCoordinate(t)}g.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe;this.getRightmostSide(this._minDe,this._minIndex)===Qe.LEFT&&(this._orientedDe=this._minDe.getSym())}}class ts{constructor(){this.array=[]}addLast(t){this.array.push(t)}removeFirst(){return this.array.shift()}isEmpty(){return 0===this.array.length}}class es{constructor(){es.constructor_.apply(this,arguments)}static constructor_(){this._finder=null,this._dirEdgeList=new w,this._nodes=new w,this._rightMostCoord=null,this._env=null,this._finder=new $e}clearVisitedEdges(){for(let t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}}compareTo(t){const e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0}getEnvelope(){if(null===this._env){const t=new G;for(let e=this._dirEdgeList.iterator();e.hasNext();){const s=e.next().getEdge().getCoordinates();for(let e=0;e<s.length-1;e++)t.expandToInclude(s[e])}this._env=t}return this._env}addReachable(t){const e=new Je;for(e.add(t);!e.empty();){const t=e.pop();this.add(t,e)}}copySymDepths(t){const e=t.getSym();e.setDepth(Qe.LEFT,t.getDepth(Qe.RIGHT)),e.setDepth(Qe.RIGHT,t.getDepth(Qe.LEFT))}add(t,e){t.setVisited(!0),this._nodes.add(t);for(let s=t.getEdges().iterator();s.hasNext();){const t=s.next();this._dirEdgeList.add(t);const i=t.getSym().getNode();i.isVisited()||e.push(i)}}getRightmostCoordinate(){return this._rightMostCoord}computeNodeDepth(t){let e=null;for(let s=t.getEdges().iterator();s.hasNext();){const t=s.next();if(t.isVisited()||t.getSym().isVisited()){e=t;break}}if(null===e)throw new de("unable to find edge to compute depths at "+t.getCoordinate());t.getEdges().computeDepths(e);for(let e=t.getEdges().iterator();e.hasNext();){const t=e.next();t.setVisited(!0),this.copySymDepths(t)}}computeDepth(t){this.clearVisitedEdges();const e=this._finder.getEdge();e.getNode(),e.getLabel();e.setEdgeDepths(Qe.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)}create(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()}findResultEdges(){for(let t=this._dirEdgeList.iterator();t.hasNext();){const e=t.next();e.getDepth(Qe.RIGHT)>=1&&e.getDepth(Qe.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}}computeDepths(t){const e=new ht,s=new ts,i=t.getNode();for(s.addLast(i),e.add(i),t.setVisited(!0);!s.isEmpty();){const t=s.removeFirst();e.add(t),this.computeNodeDepth(t);for(let i=t.getEdges().iterator();i.hasNext();){const t=i.next().getSym();if(t.isVisited())continue;const n=t.getNode();e.contains(n)||(s.addLast(n),e.add(n))}}}getNodes(){return this._nodes}getDirectedEdges(){return this._dirEdgeList}get interfaces_(){return[l]}}class ss{constructor(){ss.constructor_.apply(this,arguments)}static constructor_(){this._inputLine=null,this._distanceTol=null,this._isDeleted=null,this._angleOrientation=Nt.COUNTERCLOCKWISE;const t=arguments[0];this._inputLine=t}static simplify(t,e){return new ss(t).simplify(e)}isDeletable(t,e,s,i){const n=this._inputLine[t],r=this._inputLine[e],o=this._inputLine[s];return!!this.isConcave(n,r,o)&&(!!this.isShallow(n,r,o,i)&&this.isShallowSampled(n,r,t,s,i))}deleteShallowConcavities(){let t=1,e=this.findNextNonDeletedIndex(t),s=this.findNextNonDeletedIndex(e),i=!1;for(;s<this._inputLine.length;){let n=!1;this.isDeletable(t,e,s,this._distanceTol)&&(this._isDeleted[e]=ss.DELETE,n=!0,i=!0),t=n?s:e,e=this.findNextNonDeletedIndex(t),s=this.findNextNonDeletedIndex(e)}return i}isShallowConcavity(t,e,s,i){if(!(Nt.index(t,e,s)===this._angleOrientation))return!1;return pe.pointToSegment(e,t,s)<i}isShallowSampled(t,e,s,i,n){let r=Math.trunc((i-s)/ss.NUM_PTS_TO_CHECK);r<=0&&(r=1);for(let o=s;o<i;o+=r)if(!this.isShallow(t,e,this._inputLine[o],n))return!1;return!0}isConcave(t,e,s){return Nt.index(t,e,s)===this._angleOrientation}simplify(t){this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=Nt.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);let e=!1;do{e=this.deleteShallowConcavities()}while(e);return this.collapseLine()}findNextNonDeletedIndex(t){let e=t+1;for(;e<this._inputLine.length&&this._isDeleted[e]===ss.DELETE;)e++;return e}isShallow(t,e,s,i){return pe.pointToSegment(e,t,s)<i}collapseLine(){const t=new M;for(let e=0;e<this._inputLine.length;e++)this._isDeleted[e]!==ss.DELETE&&t.add(this._inputLine[e]);return t.toCoordinateArray()}}ss.INIT=0,ss.DELETE=1,ss.KEEP=1,ss.NUM_PTS_TO_CHECK=10;class is{constructor(){is.constructor_.apply(this,arguments)}static constructor_(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new w}getCoordinates(){return this._ptList.toArray(is.COORDINATE_ARRAY_TYPE)}setPrecisionModel(t){this._precisionModel=t}addPt(t){const e=new y(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e)}reverse(){}addPts(t,e){if(e)for(let e=0;e<t.length;e++)this.addPt(t[e]);else for(let e=t.length-1;e>=0;e--)this.addPt(t[e])}isRedundant(t){if(this._ptList.size()<1)return!1;const e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance}toString(){return(new St).createLineString(this.getCoordinates()).toString()}closeRing(){if(this._ptList.size()<1)return null;const t=new y(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t)}setMinimumVertexDistance(t){this._minimimVertexDistance=t}}is.COORDINATE_ARRAY_TYPE=new Array(0).fill(null);class ns{static toDegrees(t){return 180*t/Math.PI}static isAcute(t,e,s){const i=t.x-e.x,n=t.y-e.y;return i*(s.x-e.x)+n*(s.y-e.y)>0}static isObtuse(t,e,s){const i=t.x-e.x,n=t.y-e.y;return i*(s.x-e.x)+n*(s.y-e.y)<0}static interiorAngle(t,e,s){const i=ns.angle(e,t),n=ns.angle(e,s);return Math.abs(n-i)}static normalizePositive(t){if(t<0){for(;t<0;)t+=ns.PI_TIMES_2;t>=ns.PI_TIMES_2&&(t=0)}else{for(;t>=ns.PI_TIMES_2;)t-=ns.PI_TIMES_2;t<0&&(t=0)}return t}static angleBetween(t,e,s){const i=ns.angle(e,t),n=ns.angle(e,s);return ns.diff(i,n)}static diff(t,e){let s=null;return s=t<e?e-t:t-e,s>Math.PI&&(s=2*Math.PI-s),s}static toRadians(t){return t*Math.PI/180}static normalize(t){for(;t>Math.PI;)t-=ns.PI_TIMES_2;for(;t<=-Math.PI;)t+=ns.PI_TIMES_2;return t}static angle(){if(1===arguments.length){const t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){const t=arguments[0],e=arguments[1],s=e.x-t.x,i=e.y-t.y;return Math.atan2(i,s)}}static getTurn(t,e){const s=Math.sin(e-t);return s>0?ns.COUNTERCLOCKWISE:s<0?ns.CLOCKWISE:ns.NONE}static angleBetweenOriented(t,e,s){const i=ns.angle(e,t),n=ns.angle(e,s)-i;return n<=-Math.PI?n+ns.PI_TIMES_2:n>Math.PI?n-ns.PI_TIMES_2:n}}ns.PI_TIMES_2=2*Math.PI,ns.PI_OVER_2=Math.PI/2,ns.PI_OVER_4=Math.PI/4,ns.COUNTERCLOCKWISE=Nt.COUNTERCLOCKWISE,ns.CLOCKWISE=Nt.CLOCKWISE,ns.NONE=Nt.COLLINEAR;class rs{constructor(){rs.constructor_.apply(this,arguments)}static constructor_(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new De,this._seg1=new De,this._offset0=new De,this._offset1=new De,this._side=0,this._hasNarrowConcaveAngle=!1;const t=arguments[0],e=arguments[1],s=arguments[2];this._precisionModel=t,this._bufParams=e,this._li=new me,this._filletAngleQuantum=Math.PI/2/e.getQuadrantSegments(),e.getQuadrantSegments()>=8&&e.getJoinStyle()===wt.JOIN_ROUND&&(this._closingSegLengthFactor=rs.MAX_CLOSING_SEG_LEN_FACTOR),this.init(s)}getCoordinates(){return this._segList.getCoordinates()}addMitreJoin(t,e,s,i){const n=_e.intersection(e.p0,e.p1,s.p0,s.p1);if(null!==n){if((i<=0?1:n.distance(t)/Math.abs(i))<=this._bufParams.getMitreLimit())return this._segList.addPt(n),null}this.addLimitedMitreJoin(e,s,i,this._bufParams.getMitreLimit())}addLastSegment(){this._segList.addPt(this._offset1.p1)}initSideSegments(t,e,s){this._s1=t,this._s2=e,this._side=s,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,s,this._distance,this._offset1)}addLimitedMitreJoin(t,e,s,i){const n=this._seg0.p1,r=ns.angle(n,this._seg0.p0),o=ns.angleBetweenOriented(this._seg0.p0,n,this._seg1.p1)/2,a=ns.normalize(r+o),l=ns.normalize(a+Math.PI),h=i*s,c=s-h*Math.abs(Math.sin(o)),u=n.x+h*Math.cos(l),g=n.y+h*Math.sin(l),d=new y(u,g),_=new De(n,d),p=_.pointAlongOffset(1,c),f=_.pointAlongOffset(1,-c);this._side===Qe.LEFT?(this._segList.addPt(p),this._segList.addPt(f)):(this._segList.addPt(f),this._segList.addPt(p))}addDirectedFillet(t,e,s,i,n){const r=i===Nt.CLOCKWISE?-1:1,o=Math.abs(e-s),a=Math.trunc(o/this._filletAngleQuantum+.5);if(a<1)return null;const l=o/a,h=new y;for(let s=0;s<a;s++){const i=e+r*s*l;h.x=t.x+n*Math.cos(i),h.y=t.y+n*Math.sin(i),this._segList.addPt(h)}}computeOffsetSegment(t,e,s,i){const n=e===Qe.LEFT?1:-1,r=t.p1.x-t.p0.x,o=t.p1.y-t.p0.y,a=Math.sqrt(r*r+o*o),l=n*s*r/a,h=n*s*o/a;i.p0.x=t.p0.x-h,i.p0.y=t.p0.y+l,i.p1.x=t.p1.x-h,i.p1.y=t.p1.y+l}addInsideTurn(t,e){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*rs.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){const t=new y((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(t);const e=new y((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(e)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}}createCircle(t){const e=new y(t.x+this._distance,t.y);this._segList.addPt(e),this.addDirectedFillet(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing()}addBevelJoin(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0)}init(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new is,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*rs.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)}addCollinear(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===wt.JOIN_BEVEL||this._bufParams.getJoinStyle()===wt.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,Nt.CLOCKWISE,this._distance))}addNextSegment(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;const s=Nt.index(this._s0,this._s1,this._s2),i=s===Nt.CLOCKWISE&&this._side===Qe.LEFT||s===Nt.COUNTERCLOCKWISE&&this._side===Qe.RIGHT;0===s?this.addCollinear(e):i?this.addOutsideTurn(s,e):this.addInsideTurn(s,e)}addLineEndCap(t,e){const s=new De(t,e),i=new De;this.computeOffsetSegment(s,Qe.LEFT,this._distance,i);const n=new De;this.computeOffsetSegment(s,Qe.RIGHT,this._distance,n);const r=e.x-t.x,o=e.y-t.y,a=Math.atan2(o,r);switch(this._bufParams.getEndCapStyle()){case wt.CAP_ROUND:this._segList.addPt(i.p1),this.addDirectedFillet(e,a+Math.PI/2,a-Math.PI/2,Nt.CLOCKWISE,this._distance),this._segList.addPt(n.p1);break;case wt.CAP_FLAT:this._segList.addPt(i.p1),this._segList.addPt(n.p1);break;case wt.CAP_SQUARE:const t=new y;t.x=Math.abs(this._distance)*Math.cos(a),t.y=Math.abs(this._distance)*Math.sin(a);const s=new y(i.p1.x+t.x,i.p1.y+t.y),r=new y(n.p1.x+t.x,n.p1.y+t.y);this._segList.addPt(s),this._segList.addPt(r)}}addOutsideTurn(t,e){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*rs.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===wt.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===wt.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(e&&this._segList.addPt(this._offset0.p1),this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0))}createSquare(t){this._segList.addPt(new y(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new y(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new y(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new y(t.x-this._distance,t.y+this._distance)),this._segList.closeRing()}addSegments(t,e){this._segList.addPts(t,e)}addFirstSegment(){this._segList.addPt(this._offset1.p0)}addCornerFillet(t,e,s,i,n){const r=e.x-t.x,o=e.y-t.y;let a=Math.atan2(o,r);const l=s.x-t.x,h=s.y-t.y,c=Math.atan2(h,l);i===Nt.CLOCKWISE?a<=c&&(a+=2*Math.PI):a>=c&&(a-=2*Math.PI),this._segList.addPt(e),this.addDirectedFillet(t,a,c,i,n),this._segList.addPt(s)}closeRing(){this._segList.closeRing()}hasNarrowConcaveAngle(){return this._hasNarrowConcaveAngle}}rs.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,rs.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,rs.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,rs.MAX_CLOSING_SEG_LEN_FACTOR=80;class os{constructor(){os.constructor_.apply(this,arguments)}static constructor_(){this._distance=0,this._precisionModel=null,this._bufParams=null;const t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e}static copyCoordinates(t){const e=new Array(t.length).fill(null);for(let s=0;s<e.length;s++)e[s]=new y(t[s]);return e}getOffsetCurve(t,e){if(this._distance=e,0===e)return null;const s=e<0,i=Math.abs(e),n=this.getSegGen(i);t.length<=1?this.computePointCurve(t[0],n):this.computeOffsetCurve(t,s,n);const r=n.getCoordinates();return s&&q.reverse(r),r}computeSingleSidedBufferCurve(t,e,s){const i=this.simplifyTolerance(this._distance);if(e){s.addSegments(t,!0);const e=ss.simplify(t,-i),n=e.length-1;s.initSideSegments(e[n],e[n-1],Qe.LEFT),s.addFirstSegment();for(let t=n-2;t>=0;t--)s.addNextSegment(e[t],!0)}else{s.addSegments(t,!1);const e=ss.simplify(t,i),n=e.length-1;s.initSideSegments(e[0],e[1],Qe.LEFT),s.addFirstSegment();for(let t=2;t<=n;t++)s.addNextSegment(e[t],!0)}s.addLastSegment(),s.closeRing()}computeRingBufferCurve(t,e,s){let i=this.simplifyTolerance(this._distance);e===Qe.RIGHT&&(i=-i);const n=ss.simplify(t,i),r=n.length-1;s.initSideSegments(n[r-1],n[0],e);for(let t=1;t<=r;t++){const e=1!==t;s.addNextSegment(n[t],e)}s.closeRing()}computeLineBufferCurve(t,e){const s=this.simplifyTolerance(this._distance),i=ss.simplify(t,s),n=i.length-1;e.initSideSegments(i[0],i[1],Qe.LEFT);for(let t=2;t<=n;t++)e.addNextSegment(i[t],!0);e.addLastSegment(),e.addLineEndCap(i[n-1],i[n]);const r=ss.simplify(t,-s),o=r.length-1;e.initSideSegments(r[o],r[o-1],Qe.LEFT);for(let t=o-2;t>=0;t--)e.addNextSegment(r[t],!0);e.addLastSegment(),e.addLineEndCap(r[1],r[0]),e.closeRing()}computePointCurve(t,e){switch(this._bufParams.getEndCapStyle()){case wt.CAP_ROUND:e.createCircle(t);break;case wt.CAP_SQUARE:e.createSquare(t)}}getLineCurve(t,e){if(this._distance=e,this.isLineOffsetEmpty(e))return null;const s=Math.abs(e),i=this.getSegGen(s);if(t.length<=1)this.computePointCurve(t[0],i);else if(this._bufParams.isSingleSided()){const s=e<0;this.computeSingleSidedBufferCurve(t,s,i)}else this.computeLineBufferCurve(t,i);return i.getCoordinates()}getBufferParameters(){return this._bufParams}simplifyTolerance(t){return t*this._bufParams.getSimplifyFactor()}getRingCurve(t,e,s){if(this._distance=s,t.length<=2)return this.getLineCurve(t,s);if(0===s)return os.copyCoordinates(t);const i=this.getSegGen(s);return this.computeRingBufferCurve(t,e,i),i.getCoordinates()}computeOffsetCurve(t,e,s){const i=this.simplifyTolerance(this._distance);if(e){const e=ss.simplify(t,-i),n=e.length-1;s.initSideSegments(e[n],e[n-1],Qe.LEFT),s.addFirstSegment();for(let t=n-2;t>=0;t--)s.addNextSegment(e[t],!0)}else{const e=ss.simplify(t,i),n=e.length-1;s.initSideSegments(e[0],e[1],Qe.LEFT),s.addFirstSegment();for(let t=2;t<=n;t++)s.addNextSegment(e[t],!0)}s.addLastSegment()}isLineOffsetEmpty(t){return 0===t||t<0&&!this._bufParams.isSingleSided()}getSegGen(t){return new rs(this._precisionModel,this._bufParams,t)}}class as{constructor(){as.constructor_.apply(this,arguments)}static constructor_(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];this.init(t.length)}else if(Number.isInteger(arguments[0])){const t=arguments[0];this.init(1),this.location[Qe.ON]=t}else if(arguments[0]instanceof as){const t=arguments[0];if(this.init(t.location.length),null!==t)for(let e=0;e<this.location.length;e++)this.location[e]=t.location[e]}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.init(3),this.location[Qe.ON]=t,this.location[Qe.LEFT]=e,this.location[Qe.RIGHT]=s}}setAllLocations(t){for(let e=0;e<this.location.length;e++)this.location[e]=t}isNull(){for(let t=0;t<this.location.length;t++)if(this.location[t]!==je.NONE)return!1;return!0}setAllLocationsIfNull(t){for(let e=0;e<this.location.length;e++)this.location[e]===je.NONE&&(this.location[e]=t)}isLine(){return 1===this.location.length}merge(t){if(t.location.length>this.location.length){const t=new Array(3).fill(null);t[Qe.ON]=this.location[Qe.ON],t[Qe.LEFT]=je.NONE,t[Qe.RIGHT]=je.NONE,this.location=t}for(let e=0;e<this.location.length;e++)this.location[e]===je.NONE&&e<t.location.length&&(this.location[e]=t.location[e])}getLocations(){return this.location}flip(){if(this.location.length<=1)return null;const t=this.location[Qe.LEFT];this.location[Qe.LEFT]=this.location[Qe.RIGHT],this.location[Qe.RIGHT]=t}get(t){return t<this.location.length?this.location[t]:je.NONE}isEqualOnSide(t,e){return this.location[e]===t.location[e]}allPositionsEqual(t){for(let e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0}toString(){const t=new xt;return this.location.length>1&&t.append(je.toLocationSymbol(this.location[Qe.LEFT])),t.append(je.toLocationSymbol(this.location[Qe.ON])),this.location.length>1&&t.append(je.toLocationSymbol(this.location[Qe.RIGHT])),t.toString()}setLocations(t,e,s){this.location[Qe.ON]=t,this.location[Qe.LEFT]=e,this.location[Qe.RIGHT]=s}isArea(){return this.location.length>1}isAnyNull(){for(let t=0;t<this.location.length;t++)if(this.location[t]===je.NONE)return!0;return!1}setLocation(){if(1===arguments.length){const t=arguments[0];this.setLocation(Qe.ON,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.location[t]=e}}init(t){this.location=new Array(t).fill(null),this.setAllLocations(je.NONE)}}class ls{constructor(){ls.constructor_.apply(this,arguments)}static constructor_(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){const t=arguments[0];this.elt[0]=new as(t),this.elt[1]=new as(t)}else if(arguments[0]instanceof ls){const t=arguments[0];this.elt[0]=new as(t.elt[0]),this.elt[1]=new as(t.elt[1])}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[0]=new as(je.NONE),this.elt[1]=new as(je.NONE),this.elt[t].setLocation(e)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.elt[0]=new as(t,e,s),this.elt[1]=new as(t,e,s)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.elt[0]=new as(je.NONE,je.NONE,je.NONE),this.elt[1]=new as(je.NONE,je.NONE,je.NONE),this.elt[t].setLocations(e,s,i)}}static toLineLabel(t){const e=new ls(je.NONE);for(let s=0;s<2;s++)e.setLocation(s,t.getLocation(s));return e}getGeometryCount(){let t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t}setAllLocations(t,e){this.elt[t].setAllLocations(e)}isNull(t){return this.elt[t].isNull()}setAllLocationsIfNull(){if(1===arguments.length){const t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[t].setAllLocationsIfNull(e)}}isLine(t){return this.elt[t].isLine()}merge(t){for(let e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new as(t.elt[e]):this.elt[e].merge(t.elt[e])}flip(){this.elt[0].flip(),this.elt[1].flip()}getLocation(){if(1===arguments.length){const t=arguments[0];return this.elt[t].get(Qe.ON)}if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.elt[t].get(e)}}toString(){const t=new xt;return null!==this.elt[0]&&(t.append("A:"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(" B:"),t.append(this.elt[1].toString())),t.toString()}setLocation(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[t].setLocation(Qe.ON,e)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.elt[t].setLocation(e,s)}}isEqualOnSide(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)}allPositionsEqual(t,e){return this.elt[t].allPositionsEqual(e)}toLine(t){this.elt[t].isArea()&&(this.elt[t]=new as(this.elt[t].location[0]))}isArea(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){const t=arguments[0];return this.elt[t].isArea()}}isAnyNull(t){return this.elt[t].isAnyNull()}}class hs{constructor(){hs.constructor_.apply(this,arguments)}static constructor_(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this._label=t}}setVisited(t){this._isVisited=t}setInResult(t){this._isInResult=t}setLabel(t){this._label=t}getLabel(){return this._label}setCovered(t){this._isCovered=t,this._isCoveredSet=!0}updateIM(t){g.isTrue(this._label.getGeometryCount()>=2,"found partial label"),this.computeIM(t)}isCovered(){return this._isCovered}isCoveredSet(){return this._isCoveredSet}isInResult(){return this._isInResult}isVisited(){return this._isVisited}}class cs extends hs{constructor(){super(),cs.constructor_.apply(this,arguments)}static constructor_(){this._coord=null,this._edges=null;const t=arguments[0],e=arguments[1];this._coord=t,this._edges=e,this._label=new ls(0,je.NONE)}isIncidentEdgeInResult(){for(let t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1}isIsolated(){return 1===this._label.getGeometryCount()}getCoordinate(){return this._coord}computeMergedLocation(t,e){let s=je.NONE;if(s=this._label.getLocation(e),!t.isNull(e)){const i=t.getLocation(e);s!==je.BOUNDARY&&(s=i)}return s}setLabel(){if(2!==arguments.length||!Number.isInteger(arguments[1])||!Number.isInteger(arguments[0]))return super.setLabel.apply(this,arguments);{const t=arguments[0],e=arguments[1];null===this._label?this._label=new ls(t,e):this._label.setLocation(t,e)}}getEdges(){return this._edges}mergeLabel(){if(arguments[0]instanceof cs){const t=arguments[0];this.mergeLabel(t._label)}else if(arguments[0]instanceof ls){const t=arguments[0];for(let e=0;e<2;e++){const s=this.computeMergedLocation(t,e);this._label.getLocation(e)===je.NONE&&this._label.setLocation(e,s)}}}add(t){this._edges.insert(t),t.setNode(this)}setLabelBoundary(t){if(null===this._label)return null;let e=je.NONE;null!==this._label&&(e=this._label.getLocation(t));let s=null;switch(e){case je.BOUNDARY:s=je.INTERIOR;break;case je.INTERIOR:default:s=je.BOUNDARY}this._label.setLocation(t,s)}print(t){t.println("node "+this._coord+" lbl: "+this._label)}computeIM(t){}}class us{constructor(){us.constructor_.apply(this,arguments)}static constructor_(){this.nodeMap=new Gt,this.nodeFact=null;const t=arguments[0];this.nodeFact=t}print(t){for(let e=this.iterator();e.hasNext();){e.next().print(t)}}iterator(){return this.nodeMap.values().iterator()}values(){return this.nodeMap.values()}getBoundaryNodes(t){const e=new w;for(let s=this.iterator();s.hasNext();){const i=s.next();i.getLabel().getLocation(t)===je.BOUNDARY&&e.add(i)}return e}add(t){const e=t.getCoordinate();this.addNode(e).add(t)}find(t){return this.nodeMap.get(t)}addNode(){if(arguments[0]instanceof y){const t=arguments[0];let e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof cs){const t=arguments[0],e=this.nodeMap.get(t.getCoordinate());return null===e?(this.nodeMap.put(t.getCoordinate(),t),t):(e.mergeLabel(t),e)}}}class gs{createNode(t){return new cs(t,null)}}class ds{constructor(){ds.constructor_.apply(this,arguments)}static constructor_(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){const t=arguments[0];this._edge=t}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];ds.constructor_.call(this,t,e,s,null)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];ds.constructor_.call(this,t),this.init(e,s),this._label=i}}compareDirection(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:Nt.index(t._p0,t._p1,this._p1)}getDy(){return this._dy}print(t){const e=Math.atan2(this._dy,this._dx),s=this.getClass().getName(),i=s.lastIndexOf("."),n=s.substring(i+1);t.print("  "+n+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+e+"   "+this._label)}getLabel(){return this._label}getEdge(){return this._edge}toString(){const t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),s=e.lastIndexOf(".");return"  "+e.substring(s+1)+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+t+"   "+this._label}computeLabel(t){}init(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=Ge.quadrant(this._dx,this._dy),g.isTrue(!(0===this._dx&&0===this._dy),"EdgeEnd with identical endpoints found")}getCoordinate(){return this._p0}setNode(t){this._node=t}compareTo(t){const e=t;return this.compareDirection(e)}getDirectedCoordinate(){return this._p1}getDx(){return this._dx}getQuadrant(){return this._quadrant}getNode(){return this._node}get interfaces_(){return[l]}}class _s extends ds{constructor(){super(),_s.constructor_.apply(this,arguments)}static constructor_(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999];const t=arguments[0],e=arguments[1];if(ds.constructor_.call(this,t),this._isForward=e,e)this.init(t.getCoordinate(0),t.getCoordinate(1));else{const e=t.getNumPoints()-1;this.init(t.getCoordinate(e),t.getCoordinate(e-1))}this.computeDirectedLabel()}static depthFactor(t,e){return t===je.EXTERIOR&&e===je.INTERIOR?1:t===je.INTERIOR&&e===je.EXTERIOR?-1:0}setVisited(t){this._isVisited=t}setDepth(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new de("assigned depths do not match",this.getCoordinate());this._depth[t]=e}isInteriorAreaEdge(){let t=!0;for(let e=0;e<2;e++)this._label.isArea(e)&&this._label.getLocation(e,Qe.LEFT)===je.INTERIOR&&this._label.getLocation(e,Qe.RIGHT)===je.INTERIOR||(t=!1);return t}setNextMin(t){this._nextMin=t}print(t){super.print.call(this,t),t.print(" "+this._depth[Qe.LEFT]+"/"+this._depth[Qe.RIGHT]),t.print(" ("+this.getDepthDelta()+")"),this._isInResult&&t.print(" inResult")}setMinEdgeRing(t){this._minEdgeRing=t}getSym(){return this._sym}isForward(){return this._isForward}setSym(t){this._sym=t}setVisitedEdge(t){this.setVisited(t),this._sym.setVisited(t)}getNextMin(){return this._nextMin}getDepth(t){return this._depth[t]}computeDirectedLabel(){this._label=new ls(this._edge.getLabel()),this._isForward||this._label.flip()}getNext(){return this._next}isLineEdge(){const t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,je.EXTERIOR),s=!this._label.isArea(1)||this._label.allPositionsEqual(1,je.EXTERIOR);return t&&e&&s}setEdgeRing(t){this._edgeRing=t}getMinEdgeRing(){return this._minEdgeRing}getDepthDelta(){let t=this._edge.getDepthDelta();return this._isForward||(t=-t),t}setInResult(t){this._isInResult=t}getEdge(){return this._edge}printEdge(t){this.print(t),t.print(" "),this._isForward?this._edge.print(t):this._edge.printReverse(t)}setEdgeDepths(t,e){let s=this.getEdge().getDepthDelta();this._isForward||(s=-s);let i=1;t===Qe.LEFT&&(i=-1);const n=Qe.opposite(t),r=e+s*i;this.setDepth(t,e),this.setDepth(n,r)}getEdgeRing(){return this._edgeRing}isInResult(){return this._isInResult}setNext(t){this._next=t}isVisited(){return this._isVisited}}class ps{constructor(){ps.constructor_.apply(this,arguments)}static constructor_(){if(this._edges=new w,this._nodes=null,this._edgeEndList=new w,0===arguments.length)this._nodes=new us(new gs);else if(1===arguments.length){const t=arguments[0];this._nodes=new us(t)}}static linkResultDirectedEdges(t){for(let e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}}printEdges(t){t.println("Edges:");for(let e=0;e<this._edges.size();e++){t.println("edge "+e+":");const s=this._edges.get(e);s.print(t),s.eiList.print(t)}}debugPrintln(t){F.out.println(t)}isBoundaryNode(t,e){const s=this._nodes.find(e);if(null===s)return!1;const i=s.getLabel();return null!==i&&i.getLocation(t)===je.BOUNDARY}linkAllDirectedEdges(){for(let t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}}debugPrint(t){F.out.print(t)}findEdgeEnd(t){for(let e=this.getEdgeEnds().iterator();e.hasNext();){const s=e.next();if(s.getEdge()===t)return s}return null}getNodes(){return this._nodes.values()}findEdge(t,e){for(let s=0;s<this._edges.size();s++){const i=this._edges.get(s),n=i.getCoordinates();if(t.equals(n[0])&&e.equals(n[1]))return i}return null}find(t){return this._nodes.find(t)}addNode(){if(arguments[0]instanceof cs){const t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof y){const t=arguments[0];return this._nodes.addNode(t)}}getNodeIterator(){return this._nodes.iterator()}linkResultDirectedEdges(){for(let t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}}matchInSameDirection(t,e,s,i){return!!t.equals(s)&&(Nt.index(t,e,i)===Nt.COLLINEAR&&Ge.quadrant(t,e)===Ge.quadrant(s,i))}getEdgeEnds(){return this._edgeEndList}getEdgeIterator(){return this._edges.iterator()}findEdgeInSameDirection(t,e){for(let s=0;s<this._edges.size();s++){const i=this._edges.get(s),n=i.getCoordinates();if(this.matchInSameDirection(t,e,n[0],n[1]))return i;if(this.matchInSameDirection(t,e,n[n.length-1],n[n.length-2]))return i}return null}insertEdge(t){this._edges.add(t)}addEdges(t){for(let e=t.iterator();e.hasNext();){const t=e.next();this._edges.add(t);const s=new _s(t,!0),i=new _s(t,!1);s.setSym(i),i.setSym(s),this.add(s),this.add(i)}}add(t){this._nodes.add(t),this._edgeEndList.add(t)}}class fs{constructor(){fs.constructor_.apply(this,arguments)}static constructor_(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;const t=arguments[0];this._p=t}static locatePointInRing(){if(arguments[0]instanceof y&&I(arguments[1],k)){const t=arguments[1],e=new fs(arguments[0]),s=new y,i=new y;for(let n=1;n<t.size();n++)if(t.getCoordinate(n,s),t.getCoordinate(n-1,i),e.countSegment(s,i),e.isOnSegment())return e.getLocation();return e.getLocation()}if(arguments[0]instanceof y&&arguments[1]instanceof Array){const t=arguments[1],e=new fs(arguments[0]);for(let s=1;s<t.length;s++){const i=t[s],n=t[s-1];if(e.countSegment(i,n),e.isOnSegment())return e.getLocation()}return e.getLocation()}}getLocation(){return this._isPointOnSegment?je.BOUNDARY:this._crossingCount%2==1?je.INTERIOR:je.EXTERIOR}isPointInPolygon(){return this.getLocation()!==je.EXTERIOR}isOnSegment(){return this._isPointOnSegment}countSegment(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){let s=t.x,i=e.x;return s>i&&(s=e.x,i=t.x),this._p.x>=s&&this._p.x<=i&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){let s=Nt.index(t,e,this._p);if(s===Nt.COLLINEAR)return this._isPointOnSegment=!0,null;e.y<t.y&&(s=-s),s===Nt.LEFT&&this._crossingCount++}}}class ms{static isInRing(t,e){return ms.locateInRing(t,e)!==je.EXTERIOR}static locateInRing(t,e){return fs.locatePointInRing(t,e)}static isOnLine(){if(arguments[0]instanceof y&&I(arguments[1],k)){const t=arguments[0],e=arguments[1],s=new me,i=new y,n=new y,r=e.size();for(let o=1;o<r;o++)if(e.getCoordinate(o-1,i),e.getCoordinate(o,n),s.computeIntersection(t,i,n),s.hasIntersection())return!0;return!1}if(arguments[0]instanceof y&&arguments[1]instanceof Array){const t=arguments[0],e=arguments[1],s=new me;for(let i=1;i<e.length;i++){const n=e[i-1],r=e[i];if(s.computeIntersection(t,n,r),s.hasIntersection())return!0}return!1}}}class ys{constructor(){ys.constructor_.apply(this,arguments)}static constructor_(){if(this._startDe=null,this._maxNodeDegree=-1,this._edges=new w,this._pts=new w,this._label=new ls(je.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new w,this._geometryFactory=null,0===arguments.length);else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing()}}computeRing(){if(null!==this._ring)return null;const t=new Array(this._pts.size()).fill(null);for(let e=0;e<this._pts.size();e++)t[e]=this._pts.get(e);this._ring=this._geometryFactory.createLinearRing(t),this._isHole=Nt.isCCW(this._ring.getCoordinates())}isIsolated(){return 1===this._label.getGeometryCount()}computePoints(t){this._startDe=t;let e=t,s=!0;do{if(null===e)throw new de("Found null DirectedEdge");if(e.getEdgeRing()===this)throw new de("Directed Edge visited twice during ring-building at "+e.getCoordinate());this._edges.add(e);const t=e.getLabel();g.isTrue(t.isArea()),this.mergeLabel(t),this.addPoints(e.getEdge(),e.isForward(),s),s=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this._startDe)}getLinearRing(){return this._ring}getCoordinate(t){return this._pts.get(t)}computeMaxNodeDegree(){this._maxNodeDegree=0;let t=this._startDe;do{const e=t.getNode().getEdges().getOutgoingDegree(this);e>this._maxNodeDegree&&(this._maxNodeDegree=e),t=this.getNext(t)}while(t!==this._startDe);this._maxNodeDegree*=2}addPoints(t,e,s){const i=t.getCoordinates();if(e){let t=1;s&&(t=0);for(let e=t;e<i.length;e++)this._pts.add(i[e])}else{let t=i.length-2;s&&(t=i.length-1);for(let e=t;e>=0;e--)this._pts.add(i[e])}}containsPoint(t){const e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!ms.isInRing(t,e.getCoordinates()))return!1;for(let e=this._holes.iterator();e.hasNext();){if(e.next().containsPoint(t))return!1}return!0}getMaxNodeDegree(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree}setShell(t){this._shell=t,null!==t&&t.addHole(this)}toPolygon(t){const e=new Array(this._holes.size()).fill(null);for(let t=0;t<this._holes.size();t++)e[t]=this._holes.get(t).getLinearRing();return t.createPolygon(this.getLinearRing(),e)}isHole(){return this._isHole}setInResult(){let t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext()}while(t!==this._startDe)}addHole(t){this._holes.add(t)}isShell(){return null===this._shell}getLabel(){return this._label}getEdges(){return this._edges}getShell(){return this._shell}mergeLabel(){if(1===arguments.length){const t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){const t=arguments[1],e=arguments[0].getLocation(t,Qe.RIGHT);if(e===je.NONE)return null;if(this._label.getLocation(t)===je.NONE)return this._label.setLocation(t,e),null}}}class xs extends ys{constructor(){super(),xs.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];ys.constructor_.call(this,t,e)}getNext(t){return t.getNextMin()}setEdgeRing(t,e){t.setMinEdgeRing(e)}}class Is extends ys{constructor(){super(),Is.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];ys.constructor_.call(this,t,e)}linkDirectedEdgesForMinimalEdgeRings(){let t=this._startDe;do{t.getNode().getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this._startDe)}buildMinimalRings(){const t=new w;let e=this._startDe;do{if(null===e.getMinEdgeRing()){const s=new xs(e,this._geometryFactory);t.add(s)}e=e.getNext()}while(e!==this._startDe);return t}getNext(t){return t.getNext()}setEdgeRing(t,e){t.setEdgeRing(e)}}class Es{constructor(){Es.constructor_.apply(this,arguments)}static constructor_(){this._geometryFactory=null,this._shellList=new w;const t=arguments[0];this._geometryFactory=t}static findEdgeRingContaining(t,e){const s=t.getLinearRing(),i=s.getEnvelopeInternal();let n=s.getCoordinateN(0),r=null,o=null;for(let t=e.iterator();t.hasNext();){const e=t.next(),a=e.getLinearRing(),l=a.getEnvelopeInternal();if(l.equals(i))continue;if(!l.contains(i))continue;n=q.ptNotInList(s.getCoordinates(),a.getCoordinates());let h=!1;ms.isInRing(n,a.getCoordinates())&&(h=!0),h&&(null===r||o.contains(l))&&(r=e,o=r.getLinearRing().getEnvelopeInternal())}return r}sortShellsAndHoles(t,e,s){for(let i=t.iterator();i.hasNext();){const t=i.next();t.isHole()?s.add(t):e.add(t)}}computePolygons(t){const e=new w;for(let s=t.iterator();s.hasNext();){const t=s.next().toPolygon(this._geometryFactory);e.add(t)}return e}placeFreeHoles(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next();if(null===e.getShell()){const s=Es.findEdgeRingContaining(e,t);if(null===s)throw new de("unable to assign hole to a shell",e.getCoordinate(0));e.setShell(s)}}}buildMinimalEdgeRings(t,e,s){const i=new w;for(let n=t.iterator();n.hasNext();){const t=n.next();if(t.getMaxNodeDegree()>2){t.linkDirectedEdgesForMinimalEdgeRings();const i=t.buildMinimalRings(),n=this.findShell(i);null!==n?(this.placePolygonHoles(n,i),e.add(n)):s.addAll(i)}else i.add(t)}return i}buildMaximalEdgeRings(t){const e=new w;for(let s=t.iterator();s.hasNext();){const t=s.next();if(t.isInResult()&&t.getLabel().isArea()&&null===t.getEdgeRing()){const s=new Is(t,this._geometryFactory);e.add(s),s.setInResult()}}return e}placePolygonHoles(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next();e.isHole()&&e.setShell(t)}}getPolygons(){return this.computePolygons(this._shellList)}findShell(t){let e=0,s=null;for(let i=t.iterator();i.hasNext();){const t=i.next();t.isHole()||(s=t,e++)}return g.isTrue(e<=1,"found two shells in MinimalEdgeRing list"),s}add(){if(1===arguments.length){const t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){const t=arguments[0],e=arguments[1];ps.linkResultDirectedEdges(e);const s=this.buildMaximalEdgeRings(t),i=new w,n=this.buildMinimalEdgeRings(s,this._shellList,i);this.sortShellsAndHoles(n,this._shellList,i),this.placeFreeHoles(this._shellList,i)}}}class Ns{constructor(){Ns.constructor_.apply(this,arguments)}static constructor_(){this._subgraphs=null,this._seg=new De;const t=arguments[0];this._subgraphs=t}findStabbedSegments(){if(1===arguments.length){const t=arguments[0],e=new w;for(let s=this._subgraphs.iterator();s.hasNext();){const i=s.next(),n=i.getEnvelope();t.y<n.getMinY()||t.y>n.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(I(arguments[2],C)&&arguments[0]instanceof y&&arguments[1]instanceof _s){const t=arguments[0],e=arguments[1],s=arguments[2],i=e.getEdge().getCoordinates();for(let n=0;n<i.length-1;n++){this._seg.p0=i[n],this._seg.p1=i[n+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();if(Math.max(this._seg.p0.x,this._seg.p1.x)<t.x)continue;if(this._seg.isHorizontal())continue;if(t.y<this._seg.p0.y||t.y>this._seg.p1.y)continue;if(Nt.index(this._seg.p0,this._seg.p1,t)===Nt.RIGHT)continue;let r=e.getDepth(Qe.LEFT);this._seg.p0.equals(i[n])||(r=e.getDepth(Qe.RIGHT));const o=new Ts(this._seg,r);s.add(o)}}else if(I(arguments[2],C)&&arguments[0]instanceof y&&I(arguments[1],C)){const t=arguments[0],e=arguments[2];for(let s=arguments[1].iterator();s.hasNext();){const i=s.next();i.isForward()&&this.findStabbedSegments(t,i,e)}}}getDepth(t){const e=this.findStabbedSegments(t);if(0===e.size())return 0;return Ce.min(e)._leftDepth}}class Ts{constructor(){Ts.constructor_.apply(this,arguments)}static constructor_(){this._upwardSeg=null,this._leftDepth=null;const t=arguments[0],e=arguments[1];this._upwardSeg=new De(t),this._leftDepth=e}compareX(t,e){const s=t.p0.compareTo(e.p0);return 0!==s?s:t.p1.compareTo(e.p1)}toString(){return this._upwardSeg.toString()}compareTo(t){const e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return-1;let s=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==s?s:(s=-1*e._upwardSeg.orientationIndex(this._upwardSeg),0!==s?s:this._upwardSeg.compareTo(e._upwardSeg))}get interfaces_(){return[l]}}Ns.DepthSegment=Ts;class Ls extends n{constructor(){super(),Ls.constructor_.apply(this,arguments)}static constructor_(){n.constructor_.call(this,"Projective point not representable on the Cartesian plane.")}}class Ss{constructor(){Ss.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){const t=arguments[0];this.x=t.x,this.y=t.y,this.w=1}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];this.x=t,this.y=e,this.w=1}else if(arguments[0]instanceof Ss&&arguments[1]instanceof Ss){const t=arguments[0],e=arguments[1];this.x=t.y*e.w-e.y*t.w,this.y=e.x*t.w-t.x*e.w,this.w=t.x*e.y-e.x*t.y}else if(arguments[0]instanceof y&&arguments[1]instanceof y){const t=arguments[0],e=arguments[1];this.x=t.y-e.y,this.y=e.x-t.x,this.w=t.x*e.y-e.x*t.y}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.x=t,this.y=e,this.w=s}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=t.y-e.y,r=e.x-t.x,o=t.x*e.y-e.x*t.y,a=s.y-i.y,l=i.x-s.x,h=s.x*i.y-i.x*s.y;this.x=r*h-l*o,this.y=a*o-n*h,this.w=n*l-a*r}}getCoordinate(){const t=new y;return t.x=this.getX(),t.y=this.getY(),t}getX(){const t=this.x/this.w;if(a.isNaN(t)||a.isInfinite(t))throw new Ls;return t}getY(){const t=this.y/this.w;if(a.isNaN(t)||a.isInfinite(t))throw new Ls;return t}}class Cs{constructor(){Cs.constructor_.apply(this,arguments)}static constructor_(){this.p0=null,this.p1=null,this.p2=null;const t=arguments[0],e=arguments[1],s=arguments[2];this.p0=t,this.p1=e,this.p2=s}static isAcute(t,e,s){return!!ns.isAcute(t,e,s)&&(!!ns.isAcute(e,s,t)&&!!ns.isAcute(s,t,e))}static circumcentre(t,e,s){const i=s.x,n=s.y,r=t.x-i,o=t.y-n,a=e.x-i,l=e.y-n,h=2*Cs.det(r,o,a,l),c=Cs.det(o,r*r+o*o,l,a*a+l*l),u=Cs.det(r,r*r+o*o,a,a*a+l*l);return new y(i-c/h,n+u/h)}static perpendicularBisector(t,e){const s=e.x-t.x,i=e.y-t.y,n=new Ss(t.x+s/2,t.y+i/2,1),r=new Ss(t.x-i+s/2,t.y+s+i/2,1);return new Ss(n,r)}static angleBisector(t,e,s){const i=e.distance(t),n=i/(i+e.distance(s)),r=s.x-t.x,o=s.y-t.y;return new y(t.x+n*r,t.y+n*o)}static inCentre(t,e,s){const i=e.distance(s),n=t.distance(s),r=t.distance(e),o=i+n+r,a=(i*t.x+n*e.x+r*s.x)/o,l=(i*t.y+n*e.y+r*s.y)/o;return new y(a,l)}static area(t,e,s){return Math.abs(((s.x-t.x)*(e.y-t.y)-(e.x-t.x)*(s.y-t.y))/2)}static signedArea(t,e,s){return((s.x-t.x)*(e.y-t.y)-(e.x-t.x)*(s.y-t.y))/2}static det(t,e,s,i){return t*i-e*s}static interpolateZ(t,e,s,i){const n=e.x,r=e.y,o=s.x-n,a=i.x-n,l=s.y-r,h=i.y-r,c=o*h-a*l,u=t.x-n,g=t.y-r,d=(h*u-a*g)/c,_=(-l*u+o*g)/c;return e.getZ()+d*(s.getZ()-e.getZ())+_*(i.getZ()-e.getZ())}static longestSideLength(t,e,s){const i=t.distance(e),n=e.distance(s),r=s.distance(t);let o=i;return n>o&&(o=n),r>o&&(o=r),o}static circumcentreDD(t,e,s){const i=It.valueOf(t.x).subtract(s.x),n=It.valueOf(t.y).subtract(s.y),r=It.valueOf(e.x).subtract(s.x),o=It.valueOf(e.y).subtract(s.y),a=It.determinant(i,n,r,o).multiply(2),l=i.sqr().add(n.sqr()),h=r.sqr().add(o.sqr()),c=It.determinant(n,l,o,h),u=It.determinant(i,l,r,h),g=It.valueOf(s.x).subtract(c.divide(a)).doubleValue(),d=It.valueOf(s.y).add(u.divide(a)).doubleValue();return new y(g,d)}static area3D(t,e,s){const i=e.x-t.x,n=e.y-t.y,r=e.getZ()-t.getZ(),o=s.x-t.x,a=s.y-t.y,l=s.getZ()-t.getZ(),h=n*l-r*a,c=r*o-i*l,u=i*a-n*o,g=h*h+c*c+u*u;return Math.sqrt(g)/2}static centroid(t,e,s){const i=(t.x+e.x+s.x)/3,n=(t.y+e.y+s.y)/3;return new y(i,n)}interpolateZ(t){if(null===t)throw new r("Supplied point is null.");return Cs.interpolateZ(t,this.p0,this.p1,this.p2)}longestSideLength(){return Cs.longestSideLength(this.p0,this.p1,this.p2)}isAcute(){return Cs.isAcute(this.p0,this.p1,this.p2)}circumcentre(){return Cs.circumcentre(this.p0,this.p1,this.p2)}inCentre(){return Cs.inCentre(this.p0,this.p1,this.p2)}area(){return Cs.area(this.p0,this.p1,this.p2)}signedArea(){return Cs.signedArea(this.p0,this.p1,this.p2)}area3D(){return Cs.area3D(this.p0,this.p1,this.p2)}centroid(){return Cs.centroid(this.p0,this.p1,this.p2)}}class Rs{constructor(){Rs.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new w;const t=arguments[0],e=arguments[1],s=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=s}addRingSide(t,e,s,i,n){if(0===e&&t.length<j.MINIMUM_VALID_SIZE)return null;let r=i,o=n;t.length>=j.MINIMUM_VALID_SIZE&&Nt.isCCW(t)&&(r=n,o=i,s=Qe.opposite(s));const a=this._curveBuilder.getRingCurve(t,s,e);this.addCurve(a,r,o)}addRingBothSides(t,e){this.addRingSide(t,e,Qe.LEFT,je.EXTERIOR,je.INTERIOR),this.addRingSide(t,e,Qe.RIGHT,je.INTERIOR,je.EXTERIOR)}addPoint(t){if(this._distance<=0)return null;const e=t.getCoordinates(),s=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(s,je.EXTERIOR,je.INTERIOR)}addPolygon(t){let e=this._distance,s=Qe.LEFT;this._distance<0&&(e=-this._distance,s=Qe.RIGHT);const i=t.getExteriorRing(),n=q.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&n.length<3)return null;this.addRingSide(n,e,s,je.EXTERIOR,je.INTERIOR);for(let i=0;i<t.getNumInteriorRing();i++){const n=t.getInteriorRingN(i),r=q.removeRepeatedPoints(n.getCoordinates());this._distance>0&&this.isErodedCompletely(n,-this._distance)||this.addRingSide(r,e,Qe.opposite(s),je.INTERIOR,je.EXTERIOR)}}isTriangleErodedCompletely(t,e){const s=new Cs(t[0],t[1],t[2]),i=s.inCentre();return pe.pointToSegment(i,s.p0,s.p1)<Math.abs(e)}addLineString(t){if(this._curveBuilder.isLineOffsetEmpty(this._distance))return null;const e=q.removeRepeatedPoints(t.getCoordinates());if(q.isRing(e)&&!this._curveBuilder.getBufferParameters().isSingleSided())this.addRingBothSides(e,this._distance);else{const t=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(t,je.EXTERIOR,je.INTERIOR)}}add(t){if(t.isEmpty())return null;if(t instanceof Tt)this.addPolygon(t);else if(t instanceof W)this.addLineString(t);else if(t instanceof mt)this.addPoint(t);else if(t instanceof Lt)this.addCollection(t);else if(t instanceof _t)this.addCollection(t);else if(t instanceof at)this.addCollection(t);else{if(!(t instanceof rt))throw new T(t.getGeometryType());this.addCollection(t)}}addCurve(t,e,s){if(null===t||t.length<2)return null;const i=new ce(t,new ls(0,je.BOUNDARY,e,s));this._curveList.add(i)}getCurves(){return this.add(this._inputGeom),this._curveList}isErodedCompletely(t,e){const s=t.getCoordinates();if(s.length<4)return e<0;if(4===s.length)return this.isTriangleErodedCompletely(s,e);const i=t.getEnvelopeInternal(),n=Math.min(i.getHeight(),i.getWidth());return e<0&&2*Math.abs(e)>n}addCollection(t){for(let e=0;e<t.getNumGeometries();e++){const s=t.getGeometryN(e);this.add(s)}}}class ws{locate(t){}}class Os{hasNext(){}next(){}remove(){}}class Ms{constructor(){Ms.constructor_.apply(this,arguments)}static constructor_(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;const t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries()}static isAtomic(t){return!(t instanceof rt)}next(){if(this._atStart)return this._atStart=!1,Ms.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new R;const t=this._parent.getGeometryN(this._index++);return t instanceof rt?(this._subcollectionIterator=new Ms(t),this._subcollectionIterator.next()):t}hasNext(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)}remove(){throw new T(this.getClass().getName())}get interfaces_(){return[Os]}}class As{constructor(){As.constructor_.apply(this,arguments)}static constructor_(){this._geom=null;const t=arguments[0];this._geom=t}static locatePointInPolygon(t,e){if(e.isEmpty())return je.EXTERIOR;const s=e.getExteriorRing(),i=As.locatePointInRing(t,s);if(i!==je.INTERIOR)return i;for(let s=0;s<e.getNumInteriorRing();s++){const i=e.getInteriorRingN(s),n=As.locatePointInRing(t,i);if(n===je.BOUNDARY)return je.BOUNDARY;if(n===je.INTERIOR)return je.EXTERIOR}return je.INTERIOR}static locatePointInRing(t,e){return e.getEnvelopeInternal().intersects(t)?ms.locateInRing(t,e.getCoordinates()):je.EXTERIOR}static isContained(t,e){return je.EXTERIOR!==As.locate(t,e)}static locate(t,e){return e.isEmpty()?je.EXTERIOR:e.getEnvelopeInternal().intersects(t)?As.locateInGeometry(t,e):je.EXTERIOR}static containsPointInPolygon(t,e){return je.EXTERIOR!==As.locatePointInPolygon(t,e)}static locateInGeometry(t,e){if(e instanceof Tt)return As.locatePointInPolygon(t,e);if(e instanceof rt){const s=new Ms(e);for(;s.hasNext();){const i=s.next();if(i!==e){const e=As.locateInGeometry(t,i);if(e!==je.EXTERIOR)return e}}}return je.EXTERIOR}locate(t){return As.locate(t,this._geom)}get interfaces_(){return[ws]}}class bs{constructor(){bs.constructor_.apply(this,arguments)}static constructor_(){this._edgeMap=new Gt,this._edgeList=null,this._ptInAreaLocation=[je.NONE,je.NONE]}getNextCW(t){this.getEdges();const e=this._edgeList.indexOf(t);let s=e-1;return 0===e&&(s=this._edgeList.size()-1),this._edgeList.get(s)}propagateSideLabels(t){let e=je.NONE;for(let s=this.iterator();s.hasNext();){const i=s.next().getLabel();i.isArea(t)&&i.getLocation(t,Qe.LEFT)!==je.NONE&&(e=i.getLocation(t,Qe.LEFT))}if(e===je.NONE)return null;let s=e;for(let e=this.iterator();e.hasNext();){const i=e.next(),n=i.getLabel();if(n.getLocation(t,Qe.ON)===je.NONE&&n.setLocation(t,Qe.ON,s),n.isArea(t)){const e=n.getLocation(t,Qe.LEFT),r=n.getLocation(t,Qe.RIGHT);if(r!==je.NONE){if(r!==s)throw new de("side location conflict",i.getCoordinate());e===je.NONE&&g.shouldNeverReachHere("found single null side (at "+i.getCoordinate()+")"),s=e}else g.isTrue(n.getLocation(t,Qe.LEFT)===je.NONE,"found single null side"),n.setLocation(t,Qe.RIGHT,s),n.setLocation(t,Qe.LEFT,s)}}}getCoordinate(){const t=this.iterator();if(!t.hasNext())return null;return t.next().getCoordinate()}checkAreaLabelsConsistent(t){const e=this.getEdges();if(e.size()<=0)return!0;const s=e.size()-1,i=e.get(s).getLabel().getLocation(t,Qe.LEFT);g.isTrue(i!==je.NONE,"Found unlabelled area edge");let n=i;for(let e=this.iterator();e.hasNext();){const s=e.next().getLabel();g.isTrue(s.isArea(t),"Found non-area edge");const i=s.getLocation(t,Qe.LEFT),r=s.getLocation(t,Qe.RIGHT);if(i===r)return!1;if(r!==n)return!1;n=i}return!0}findIndex(t){this.iterator();for(let e=0;e<this._edgeList.size();e++){if(this._edgeList.get(e)===t)return e}return-1}iterator(){return this.getEdges().iterator()}getEdges(){return null===this._edgeList&&(this._edgeList=new w(this._edgeMap.values())),this._edgeList}getLocation(t,e,s){return this._ptInAreaLocation[t]===je.NONE&&(this._ptInAreaLocation[t]=As.locate(e,s[t].getGeometry())),this._ptInAreaLocation[t]}toString(){const t=new xt;t.append("EdgeEndStar:   "+this.getCoordinate()),t.append("\n");for(let e=this.iterator();e.hasNext();){const s=e.next();t.append(s),t.append("\n")}return t.toString()}computeEdgeEndLabels(t){for(let e=this.iterator();e.hasNext();){e.next().computeLabel(t)}}computeLabelling(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);const e=[!1,!1];for(let t=this.iterator();t.hasNext();){const s=t.next().getLabel();for(let t=0;t<2;t++)s.isLine(t)&&s.getLocation(t)===je.BOUNDARY&&(e[t]=!0)}for(let s=this.iterator();s.hasNext();){const i=s.next(),n=i.getLabel();for(let s=0;s<2;s++)if(n.isAnyNull(s)){let r=je.NONE;if(e[s])r=je.EXTERIOR;else{const e=i.getCoordinate();r=this.getLocation(s,e,t)}n.setAllLocationsIfNull(s,r)}}}getDegree(){return this._edgeMap.size()}insertEdgeEnd(t,e){this._edgeMap.put(t,e),this._edgeList=null}print(t){F.out.println("EdgeEndStar:   "+this.getCoordinate());for(let e=this.iterator();e.hasNext();){e.next().print(t)}}isAreaLabelsConsistent(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)}}class Ps extends bs{constructor(){super(),Ps.constructor_.apply(this,arguments)}static constructor_(){this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}linkResultDirectedEdges(){this.getResultAreaEdges();let t=null,e=null,s=this._SCANNING_FOR_INCOMING;for(let i=0;i<this._resultAreaEdgeList.size();i++){const n=this._resultAreaEdgeList.get(i),r=n.getSym();if(n.getLabel().isArea())switch(null===t&&n.isInResult()&&(t=n),s){case this._SCANNING_FOR_INCOMING:if(!r.isInResult())continue;e=r,s=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!n.isInResult())continue;e.setNext(n),s=this._SCANNING_FOR_INCOMING}}if(s===this._LINKING_TO_OUTGOING){if(null===t)throw new de("no outgoing dirEdge found",this.getCoordinate());g.isTrue(t.isInResult(),"unable to link last incoming dirEdge"),e.setNext(t)}}insert(t){const e=t;this.insertEdgeEnd(e,e)}getRightmostEdge(){const t=this.getEdges(),e=t.size();if(e<1)return null;const s=t.get(0);if(1===e)return s;const i=t.get(e-1),n=s.getQuadrant(),r=i.getQuadrant();if(Ge.isNorthern(n)&&Ge.isNorthern(r))return s;if(!Ge.isNorthern(n)&&!Ge.isNorthern(r))return i;if(0!==s.getDy())return s;if(0!==i.getDy())return i;return g.shouldNeverReachHere("found two horizontal edges incident on node"),null}updateLabelling(t){for(let e=this.iterator();e.hasNext();){const s=e.next().getLabel();s.setAllLocationsIfNull(0,t.getLocation(0)),s.setAllLocationsIfNull(1,t.getLocation(1))}}linkAllDirectedEdges(){this.getEdges();let t=null,e=null;for(let s=this._edgeList.size()-1;s>=0;s--){const i=this._edgeList.get(s),n=i.getSym();null===e&&(e=n),null!==t&&n.setNext(t),t=i}e.setNext(t)}computeDepths(){if(1===arguments.length){const t=arguments[0],e=this.findIndex(t),s=t.getDepth(Qe.LEFT),i=t.getDepth(Qe.RIGHT),n=this.computeDepths(e+1,this._edgeList.size(),s);if(this.computeDepths(0,e,n)!==i)throw new de("depth mismatch at "+t.getCoordinate())}else if(3===arguments.length){const t=arguments[1];let e=arguments[2];for(let s=arguments[0];s<t;s++){const t=this._edgeList.get(s);t.setEdgeDepths(Qe.RIGHT,e),e=t.getDepth(Qe.LEFT)}return e}}mergeSymLabels(){for(let t=this.iterator();t.hasNext();){const e=t.next();e.getLabel().merge(e.getSym().getLabel())}}linkMinimalDirectedEdges(t){let e=null,s=null,i=this._SCANNING_FOR_INCOMING;for(let n=this._resultAreaEdgeList.size()-1;n>=0;n--){const r=this._resultAreaEdgeList.get(n),o=r.getSym();switch(null===e&&r.getEdgeRing()===t&&(e=r),i){case this._SCANNING_FOR_INCOMING:if(o.getEdgeRing()!==t)continue;s=o,i=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(r.getEdgeRing()!==t)continue;s.setNextMin(r),i=this._SCANNING_FOR_INCOMING}}i===this._LINKING_TO_OUTGOING&&(g.isTrue(null!==e,"found null for first outgoing dirEdge"),g.isTrue(e.getEdgeRing()===t,"unable to link last incoming dirEdge"),s.setNextMin(e))}getOutgoingDegree(){if(0===arguments.length){let t=0;for(let e=this.iterator();e.hasNext();){e.next().isInResult()&&t++}return t}if(1===arguments.length){const t=arguments[0];let e=0;for(let s=this.iterator();s.hasNext();){s.next().getEdgeRing()===t&&e++}return e}}getLabel(){return this._label}findCoveredLineEdges(){let t=je.NONE;for(let e=this.iterator();e.hasNext();){const s=e.next(),i=s.getSym();if(!s.isLineEdge()){if(s.isInResult()){t=je.INTERIOR;break}if(i.isInResult()){t=je.EXTERIOR;break}}}if(t===je.NONE)return null;let e=t;for(let t=this.iterator();t.hasNext();){const s=t.next(),i=s.getSym();s.isLineEdge()?s.getEdge().setCovered(e===je.INTERIOR):(s.isInResult()&&(e=je.EXTERIOR),i.isInResult()&&(e=je.INTERIOR))}}computeLabelling(t){super.computeLabelling.call(this,t),this._label=new ls(je.NONE);for(let t=this.iterator();t.hasNext();){const e=t.next().getEdge().getLabel();for(let t=0;t<2;t++){const s=e.getLocation(t);s!==je.INTERIOR&&s!==je.BOUNDARY||this._label.setLocation(t,je.INTERIOR)}}}print(t){F.out.println("DirectedEdgeStar: "+this.getCoordinate());for(let e=this.iterator();e.hasNext();){const s=e.next();t.print("out "),s.print(t),t.println(),t.print("in "),s.getSym().print(t),t.println()}}getResultAreaEdges(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new w;for(let t=this.iterator();t.hasNext();){const e=t.next();(e.isInResult()||e.getSym().isInResult())&&this._resultAreaEdgeList.add(e)}return this._resultAreaEdgeList}}class Ds extends gs{constructor(){super()}createNode(t){return new cs(t,new Ps)}}class vs{constructor(){vs.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._orientation=null;const t=arguments[0];this._pts=t,this._orientation=vs.orientation(t)}static orientation(t){return 1===q.increasingDirection(t)}static compareOriented(t,e,s,i){const n=e?1:-1,r=i?1:-1,o=e?t.length:-1,a=i?s.length:-1;let l=e?0:t.length-1,h=i?0:s.length-1;for(;;){const e=t[l].compareTo(s[h]);if(0!==e)return e;l+=n,h+=r;const i=l===o,c=h===a;if(i&&!c)return-1;if(!i&&c)return 1;if(i&&c)return 0}}compareTo(t){const e=t;return vs.compareOriented(this._pts,this._orientation,e._pts,e._orientation)}get interfaces_(){return[l]}}class Fs{constructor(){Fs.constructor_.apply(this,arguments)}static constructor_(){this._edges=new w,this._ocaMap=new Gt}print(t){t.print("MULTILINESTRING ( ");for(let e=0;e<this._edges.size();e++){const s=this._edges.get(e);e>0&&t.print(","),t.print("(");const i=s.getCoordinates();for(let e=0;e<i.length;e++)e>0&&t.print(","),t.print(i[e].x+" "+i[e].y);t.println(")")}t.print(")  ")}addAll(t){for(let e=t.iterator();e.hasNext();)this.add(e.next())}findEdgeIndex(t){for(let e=0;e<this._edges.size();e++)if(this._edges.get(e).equals(t))return e;return-1}iterator(){return this._edges.iterator()}getEdges(){return this._edges}get(t){return this._edges.get(t)}findEqualEdge(t){const e=new vs(t.getCoordinates());return this._ocaMap.get(e)}add(t){this._edges.add(t);const e=new vs(t.getCoordinates());this._ocaMap.put(e,t)}}class Gs{constructor(){Gs.constructor_.apply(this,arguments)}static constructor_(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;const t=arguments[0];this._li=t}static isAdjacentSegments(t,e){return 1===Math.abs(t-e)}isTrivialIntersection(t,e,s,i){if(t===s&&1===this._li.getIntersectionNum()){if(Gs.isAdjacentSegments(e,i))return!0;if(t.isClosed()){const s=t.size()-1;if(0===e&&i===s||0===i&&e===s)return!0}}return!1}getProperIntersectionPoint(){return this._properIntersectionPoint}hasProperInteriorIntersection(){return this._hasProperInterior}getLineIntersector(){return this._li}hasProperIntersection(){return this._hasProper}processIntersections(t,e,s,i){if(t===s&&e===i)return null;this.numTests++;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,s,i)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),s.addIntersections(this._li,i,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))}hasIntersection(){return this._hasIntersection}isDone(){return!1}hasInteriorIntersection(){return this._hasInterior}get interfaces_(){return[He]}}class qs{constructor(){qs.constructor_.apply(this,arguments)}static constructor_(){this.coord=null,this.segmentIndex=null,this.dist=null;const t=arguments[0],e=arguments[1],s=arguments[2];this.coord=new y(t),this.segmentIndex=e,this.dist=s}getSegmentIndex(){return this.segmentIndex}getCoordinate(){return this.coord}print(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex),t.println(" dist = "+this.dist)}compareTo(t){const e=t;return this.compare(e.segmentIndex,e.dist)}isEndPoint(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t}toString(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist}getDistance(){return this.dist}compare(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0}get interfaces_(){return[l]}}class Ys{constructor(){Ys.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new Gt,this.edge=null;const t=arguments[0];this.edge=t}print(t){t.println("Intersections:");for(let e=this.iterator();e.hasNext();){e.next().print(t)}}addEndpoints(){const t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)}createSplitEdge(t,e){let s=e.segmentIndex-t.segmentIndex+2;const i=this.edge.pts[e.segmentIndex],n=e.dist>0||!e.coord.equals2D(i);n||s--;const r=new Array(s).fill(null);let o=0;r[o++]=new y(t.coord);for(let s=t.segmentIndex+1;s<=e.segmentIndex;s++)r[o++]=this.edge.pts[s];return n&&(r[o]=e.coord),new Vs(r,new ls(this.edge._label))}add(t,e,s){const i=new qs(t,e,s),n=this._nodeMap.get(i);return null!==n?n:(this._nodeMap.put(i,i),i)}isIntersection(t){for(let e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(t){this.addEndpoints();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next(),n=this.createSplitEdge(s,i);t.add(n),s=i}}}class zs{constructor(){zs.constructor_.apply(this,arguments)}static constructor_(){if(this._matrix=null,0===arguments.length)this._matrix=Array(3).fill().map((()=>Array(3))),this.setAll(z.FALSE);else if(1===arguments.length)if("string"==typeof arguments[0]){const t=arguments[0];zs.constructor_.call(this),this.set(t)}else if(arguments[0]instanceof zs){const t=arguments[0];zs.constructor_.call(this),this._matrix[je.INTERIOR][je.INTERIOR]=t._matrix[je.INTERIOR][je.INTERIOR],this._matrix[je.INTERIOR][je.BOUNDARY]=t._matrix[je.INTERIOR][je.BOUNDARY],this._matrix[je.INTERIOR][je.EXTERIOR]=t._matrix[je.INTERIOR][je.EXTERIOR],this._matrix[je.BOUNDARY][je.INTERIOR]=t._matrix[je.BOUNDARY][je.INTERIOR],this._matrix[je.BOUNDARY][je.BOUNDARY]=t._matrix[je.BOUNDARY][je.BOUNDARY],this._matrix[je.BOUNDARY][je.EXTERIOR]=t._matrix[je.BOUNDARY][je.EXTERIOR],this._matrix[je.EXTERIOR][je.INTERIOR]=t._matrix[je.EXTERIOR][je.INTERIOR],this._matrix[je.EXTERIOR][je.BOUNDARY]=t._matrix[je.EXTERIOR][je.BOUNDARY],this._matrix[je.EXTERIOR][je.EXTERIOR]=t._matrix[je.EXTERIOR][je.EXTERIOR]}}static isTrue(t){return t>=0||t===z.TRUE}static matches(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return e===z.SYM_DONTCARE||(e===z.SYM_TRUE&&(t>=0||t===z.TRUE)||(e===z.SYM_FALSE&&t===z.FALSE||(e===z.SYM_P&&t===z.P||(e===z.SYM_L&&t===z.L||e===z.SYM_A&&t===z.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){const t=arguments[1];return new zs(arguments[0]).matches(t)}}isIntersects(){return!this.isDisjoint()}set(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<t.length;e++){const s=Math.trunc(e/3),i=e%3;this._matrix[s][i]=z.toDimensionValue(t.charAt(e))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._matrix[t][e]=s}}isContains(){return zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&this._matrix[je.EXTERIOR][je.INTERIOR]===z.FALSE&&this._matrix[je.EXTERIOR][je.BOUNDARY]===z.FALSE}isWithin(){return zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&this._matrix[je.INTERIOR][je.EXTERIOR]===z.FALSE&&this._matrix[je.BOUNDARY][je.EXTERIOR]===z.FALSE}isTouches(t,e){return t>e?this.isTouches(e,t):(t===z.A&&e===z.A||t===z.L&&e===z.L||t===z.L&&e===z.A||t===z.P&&e===z.A||t===z.P&&e===z.L)&&(this._matrix[je.INTERIOR][je.INTERIOR]===z.FALSE&&(zs.isTrue(this._matrix[je.INTERIOR][je.BOUNDARY])||zs.isTrue(this._matrix[je.BOUNDARY][je.INTERIOR])||zs.isTrue(this._matrix[je.BOUNDARY][je.BOUNDARY])))}isOverlaps(t,e){return t===z.P&&e===z.P||t===z.A&&e===z.A?zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&zs.isTrue(this._matrix[je.INTERIOR][je.EXTERIOR])&&zs.isTrue(this._matrix[je.EXTERIOR][je.INTERIOR]):t===z.L&&e===z.L&&(1===this._matrix[je.INTERIOR][je.INTERIOR]&&zs.isTrue(this._matrix[je.INTERIOR][je.EXTERIOR])&&zs.isTrue(this._matrix[je.EXTERIOR][je.INTERIOR]))}isEquals(t,e){return t===e&&(zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&this._matrix[je.INTERIOR][je.EXTERIOR]===z.FALSE&&this._matrix[je.BOUNDARY][je.EXTERIOR]===z.FALSE&&this._matrix[je.EXTERIOR][je.INTERIOR]===z.FALSE&&this._matrix[je.EXTERIOR][je.BOUNDARY]===z.FALSE)}matches(t){if(9!==t.length)throw new r("Should be length 9: "+t);for(let e=0;e<3;e++)for(let s=0;s<3;s++)if(!zs.matches(this._matrix[e][s],t.charAt(3*e+s)))return!1;return!0}add(t){for(let e=0;e<3;e++)for(let s=0;s<3;s++)this.setAtLeast(e,s,t.get(e,s))}isDisjoint(){return this._matrix[je.INTERIOR][je.INTERIOR]===z.FALSE&&this._matrix[je.INTERIOR][je.BOUNDARY]===z.FALSE&&this._matrix[je.BOUNDARY][je.INTERIOR]===z.FALSE&&this._matrix[je.BOUNDARY][je.BOUNDARY]===z.FALSE}isCrosses(t,e){return t===z.P&&e===z.L||t===z.P&&e===z.A||t===z.L&&e===z.A?zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&zs.isTrue(this._matrix[je.INTERIOR][je.EXTERIOR]):t===z.L&&e===z.P||t===z.A&&e===z.P||t===z.A&&e===z.L?zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])&&zs.isTrue(this._matrix[je.EXTERIOR][je.INTERIOR]):t===z.L&&e===z.L&&0===this._matrix[je.INTERIOR][je.INTERIOR]}isCovers(){return(zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])||zs.isTrue(this._matrix[je.INTERIOR][je.BOUNDARY])||zs.isTrue(this._matrix[je.BOUNDARY][je.INTERIOR])||zs.isTrue(this._matrix[je.BOUNDARY][je.BOUNDARY]))&&this._matrix[je.EXTERIOR][je.INTERIOR]===z.FALSE&&this._matrix[je.EXTERIOR][je.BOUNDARY]===z.FALSE}isCoveredBy(){return(zs.isTrue(this._matrix[je.INTERIOR][je.INTERIOR])||zs.isTrue(this._matrix[je.INTERIOR][je.BOUNDARY])||zs.isTrue(this._matrix[je.BOUNDARY][je.INTERIOR])||zs.isTrue(this._matrix[je.BOUNDARY][je.BOUNDARY]))&&this._matrix[je.INTERIOR][je.EXTERIOR]===z.FALSE&&this._matrix[je.BOUNDARY][je.EXTERIOR]===z.FALSE}setAtLeast(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<t.length;e++){const s=Math.trunc(e/3),i=e%3;this.setAtLeast(s,i,z.toDimensionValue(t.charAt(e)))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._matrix[t][e]<s&&(this._matrix[t][e]=s)}}setAtLeastIfValid(t,e,s){t>=0&&e>=0&&this.setAtLeast(t,e,s)}toString(){const t=new K("123456789");for(let e=0;e<3;e++)for(let s=0;s<3;s++)t.setCharAt(3*e+s,z.toDimensionSymbol(this._matrix[e][s]));return t.toString()}setAll(t){for(let e=0;e<3;e++)for(let s=0;s<3;s++)this._matrix[e][s]=t}get(t,e){return this._matrix[t][e]}transpose(){let t=this._matrix[1][0];return this._matrix[1][0]=this._matrix[0][1],this._matrix[0][1]=t,t=this._matrix[2][0],this._matrix[2][0]=this._matrix[0][2],this._matrix[0][2]=t,t=this._matrix[2][1],this._matrix[2][1]=this._matrix[1][2],this._matrix[1][2]=t,this}get interfaces_(){return[d]}}class Xs{constructor(){Xs.constructor_.apply(this,arguments)}static constructor_(){this._depth=Array(2).fill().map((()=>Array(3)));for(let t=0;t<2;t++)for(let e=0;e<3;e++)this._depth[t][e]=Xs.NULL_VALUE}static depthAtLocation(t){return t===je.EXTERIOR?0:t===je.INTERIOR?1:Xs.NULL_VALUE}getDepth(t,e){return this._depth[t][e]}setDepth(t,e,s){this._depth[t][e]=s}isNull(){if(0===arguments.length){for(let t=0;t<2;t++)for(let e=0;e<3;e++)if(this._depth[t][e]!==Xs.NULL_VALUE)return!1;return!0}if(1===arguments.length){const t=arguments[0];return this._depth[t][1]===Xs.NULL_VALUE}if(2===arguments.length){const t=arguments[0],e=arguments[1];return this._depth[t][e]===Xs.NULL_VALUE}}normalize(){for(let t=0;t<2;t++)if(!this.isNull(t)){let e=this._depth[t][1];this._depth[t][2]<e&&(e=this._depth[t][2]),e<0&&(e=0);for(let s=1;s<3;s++){let i=0;this._depth[t][s]>e&&(i=1),this._depth[t][s]=i}}}getDelta(t){return this._depth[t][Qe.RIGHT]-this._depth[t][Qe.LEFT]}getLocation(t,e){return this._depth[t][e]<=0?je.EXTERIOR:je.INTERIOR}toString(){return"A: "+this._depth[0][1]+","+this._depth[0][2]+" B: "+this._depth[1][1]+","+this._depth[1][2]}add(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<2;e++)for(let s=1;s<3;s++){const i=t.getLocation(e,s);i!==je.EXTERIOR&&i!==je.INTERIOR||(this.isNull(e,s)?this._depth[e][s]=Xs.depthAtLocation(i):this._depth[e][s]+=Xs.depthAtLocation(i))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1];arguments[2]===je.INTERIOR&&this._depth[t][e]++}}}Xs.NULL_VALUE=-1;class Bs{constructor(){Bs.constructor_.apply(this,arguments)}static constructor_(){if(this._data=null,this._size=0,0===arguments.length)Bs.constructor_.call(this,10);else if(1===arguments.length){const t=arguments[0];this._data=new Array(t).fill(null)}}size(){return this._size}addAll(t){return null===t||0===t.length?null:(this.ensureCapacity(this._size+t.length),F.arraycopy(t,0,this._data,this._size,t.length),void(this._size+=t.length))}ensureCapacity(t){if(t<=this._data.length)return null;const e=Math.max(t,2*this._data.length);this._data=nt.copyOf(this._data,e)}toArray(){const t=new Array(this._size).fill(null);return F.arraycopy(this._data,0,t,0,this._size),t}add(t){this.ensureCapacity(this._size+1),this._data[this._size]=t,++this._size}}class Us{static toIntArray(t){const e=new Array(t.size()).fill(null);for(let s=0;s<e.length;s++)e[s]=t.get(s).intValue();return e}findChainEnd(t,e){const s=Ge.quadrant(t[e],t[e+1]);let i=e+1;for(;i<t.length;){if(Ge.quadrant(t[i-1],t[i])!==s)break;i++}return i-1}OLDgetChainStartIndices(t){let e=0;const s=new w;s.add(e);do{const i=this.findChainEnd(t,e);s.add(i),e=i}while(e<t.length-1);return Us.toIntArray(s)}getChainStartIndices(t){let e=0;const s=new Bs(Math.trunc(t.length/2));s.add(e);do{const i=this.findChainEnd(t,e);s.add(i),e=i}while(e<t.length-1);return s.toArray()}}class ks{constructor(){ks.constructor_.apply(this,arguments)}static constructor_(){this.e=null,this.pts=null,this.startIndex=null;const t=arguments[0];this.e=t,this.pts=t.getCoordinates();const e=new Us;this.startIndex=e.getChainStartIndices(this.pts)}getCoordinates(){return this.pts}getMaxX(t){const e=this.pts[this.startIndex[t]].x,s=this.pts[this.startIndex[t+1]].x;return e>s?e:s}getMinX(t){const e=this.pts[this.startIndex[t]].x,s=this.pts[this.startIndex[t+1]].x;return e<s?e:s}computeIntersectsForChain(){if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[s],e.startIndex[s+1],i)}else if(6===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4],r=arguments[5];if(e-t==1&&n-i==1)return r.addIntersections(this.e,t,s.e,i),null;if(!this.overlaps(t,e,s,i,n))return null;const o=Math.trunc((t+e)/2),a=Math.trunc((i+n)/2);t<o&&(i<a&&this.computeIntersectsForChain(t,o,s,i,a,r),a<n&&this.computeIntersectsForChain(t,o,s,a,n,r)),o<e&&(i<a&&this.computeIntersectsForChain(o,e,s,i,a,r),a<n&&this.computeIntersectsForChain(o,e,s,a,n,r))}}overlaps(t,e,s,i,n){return G.intersects(this.pts[t],this.pts[e],s.pts[i],s.pts[n])}getStartIndexes(){return this.startIndex}computeIntersects(t,e){for(let s=0;s<this.startIndex.length-1;s++)for(let i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(s,t,i,e)}}class Vs extends hs{constructor(){super(),Vs.constructor_.apply(this,arguments)}static constructor_(){if(this.pts=null,this._env=null,this.eiList=new Ys(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new Xs,this._depthDelta=0,1===arguments.length){const t=arguments[0];Vs.constructor_.call(this,t,null)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.pts=t,this._label=e}}static updateIM(){if(!(2===arguments.length&&arguments[1]instanceof zs&&arguments[0]instanceof ls))return super.updateIM.apply(this,arguments);{const t=arguments[0],e=arguments[1];e.setAtLeastIfValid(t.getLocation(0,Qe.ON),t.getLocation(1,Qe.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,Qe.LEFT),t.getLocation(1,Qe.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,Qe.RIGHT),t.getLocation(1,Qe.RIGHT),2))}}getDepth(){return this._depth}getCollapsedEdge(){const t=new Array(2).fill(null);t[0]=this.pts[0],t[1]=this.pts[1];return new Vs(t,ls.toLineLabel(this._label))}setIsolated(t){this._isIsolated=t}setName(t){this._name=t}equals(t){if(!(t instanceof Vs))return!1;const e=t;if(this.pts.length!==e.pts.length)return!1;let s=!0,i=!0,n=this.pts.length;for(let t=0;t<this.pts.length;t++)if(this.pts[t].equals2D(e.pts[t])||(s=!1),this.pts[t].equals2D(e.pts[--n])||(i=!1),!s&&!i)return!1;return!0}getCoordinate(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){const t=arguments[0];return this.pts[t]}}isClosed(){return this.pts[0].equals(this.pts[this.pts.length-1])}getMaximumSegmentIndex(){return this.pts.length-1}setDepthDelta(t){this._depthDelta=t}getEdgeIntersectionList(){return this.eiList}addIntersections(t,e,s){for(let i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,s,i)}isIsolated(){return this._isIsolated}getCoordinates(){return this.pts}print(t){t.print("edge "+this._name+": "),t.print("LINESTRING (");for(let e=0;e<this.pts.length;e++)e>0&&t.print(","),t.print(this.pts[e].x+" "+this.pts[e].y);t.print(")  "+this._label+" "+this._depthDelta)}computeIM(t){Vs.updateIM(this._label,t)}isCollapsed(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))}getDepthDelta(){return this._depthDelta}getNumPoints(){return this.pts.length}printReverse(t){t.print("edge "+this._name+": ");for(let e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+" ");t.println("")}getMonotoneChainEdge(){return null===this._mce&&(this._mce=new ks(this)),this._mce}getEnvelope(){if(null===this._env){this._env=new G;for(let t=0;t<this.pts.length;t++)this._env.expandToInclude(this.pts[t])}return this._env}addIntersection(t,e,s,i){const n=new y(t.getIntersection(i));let r=e,o=t.getEdgeDistance(s,i);const a=r+1;if(a<this.pts.length){const t=this.pts[a];n.equals2D(t)&&(r=a,o=0)}this.eiList.add(n,r,o)}toString(){const t=new K;t.append("edge "+this._name+": "),t.append("LINESTRING (");for(let e=0;e<this.pts.length;e++)e>0&&t.append(","),t.append(this.pts[e].x+" "+this.pts[e].y);return t.append(")  "+this._label+" "+this._depthDelta),t.toString()}isPointwiseEqual(t){if(this.pts.length!==t.pts.length)return!1;for(let e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0}}class Hs{constructor(){Hs.constructor_.apply(this,arguments)}static constructor_(){this._bufParams=null,this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Fs;const t=arguments[0];this._bufParams=t}static convertSegStrings(t){const e=new St,s=new w;for(;t.hasNext();){const i=t.next(),n=e.createLineString(i.getCoordinates());s.add(n)}return e.buildGeometry(s)}static depthDelta(t){const e=t.getLocation(0,Qe.LEFT),s=t.getLocation(0,Qe.RIGHT);return e===je.INTERIOR&&s===je.EXTERIOR?1:e===je.EXTERIOR&&s===je.INTERIOR?-1:0}createEmptyResultGeometry(){return this._geomFact.createPolygon()}getNoder(t){if(null!==this._workingNoder)return this._workingNoder;const e=new ze,s=new me;return s.setPrecisionModel(t),e.setSegmentIntersector(new Gs(s)),e}buffer(t,e){let s=this._workingPrecisionModel;null===s&&(s=t.getPrecisionModel()),this._geomFact=t.getFactory();const i=new os(s,this._bufParams),n=new Rs(t,e,i).getCurves();if(n.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(n,s),this._graph=new ps(new Ds),this._graph.addEdges(this._edgeList.getEdges());const r=this.createSubgraphs(this._graph),o=new Es(this._geomFact);this.buildSubgraphs(r,o);const a=o.getPolygons();if(a.size()<=0)return this.createEmptyResultGeometry();return this._geomFact.buildGeometry(a)}computeNodedEdges(t,e){const s=this.getNoder(e);s.computeNodes(t);for(let t=s.getNodedSubstrings().iterator();t.hasNext();){const e=t.next(),s=e.getCoordinates();if(2===s.length&&s[0].equals2D(s[1]))continue;const i=e.getData(),n=new Vs(e.getCoordinates(),new ls(i));this.insertUniqueEdge(n)}}setNoder(t){this._workingNoder=t}setWorkingPrecisionModel(t){this._workingPrecisionModel=t}insertUniqueEdge(t){const e=this._edgeList.findEqualEdge(t);if(null!==e){const s=e.getLabel();let i=t.getLabel();e.isPointwiseEqual(t)||(i=new ls(t.getLabel()),i.flip()),s.merge(i);const n=Hs.depthDelta(i),r=e.getDepthDelta()+n;e.setDepthDelta(r)}else this._edgeList.add(t),t.setDepthDelta(Hs.depthDelta(t.getLabel()))}buildSubgraphs(t,e){const s=new w;for(let i=t.iterator();i.hasNext();){const t=i.next(),n=t.getRightmostCoordinate(),r=new Ns(s).getDepth(n);t.computeDepth(r),t.findResultEdges(),s.add(t),e.add(t.getDirectedEdges(),t.getNodes())}}createSubgraphs(t){const e=new w;for(let s=t.getNodes().iterator();s.hasNext();){const t=s.next();if(!t.isVisited()){const s=new es;s.create(t),e.add(s)}}return Ce.sort(e,Ce.reverseOrder()),e}}class Zs{constructor(){Zs.constructor_.apply(this,arguments)}static constructor_(){if(this._argGeom=null,this._distance=null,this._bufParams=new wt,this._resultGeometry=null,this._saveException=null,1===arguments.length){const t=arguments[0];this._argGeom=t}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._argGeom=t,this._bufParams=e}}static bufferOp(){if(2===arguments.length){const t=arguments[1];return new Zs(arguments[0]).getResultGeometry(t)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof X&&"number"==typeof arguments[1]){const t=arguments[1],e=arguments[2],s=new Zs(arguments[0]);s.setQuadrantSegments(e);return s.getResultGeometry(t)}if(arguments[2]instanceof wt&&arguments[0]instanceof X&&"number"==typeof arguments[1]){const t=arguments[1];return new Zs(arguments[0],arguments[2]).getResultGeometry(t)}}else if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3],i=new Zs(arguments[0]);i.setQuadrantSegments(e),i.setEndCapStyle(s);return i.getResultGeometry(t)}}static precisionScaleFactor(t,e,s){const i=t.getEnvelopeInternal(),n=v.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY()))+2*(e>0?e:0),r=s-Math.trunc(Math.log(n)/Math.log(10)+1);return Math.pow(10,r)}bufferFixedPrecision(t){const e=new ge(new We(new gt(1)),t.getScale()),s=new Hs(this._bufParams);s.setWorkingPrecisionModel(t),s.setNoder(e),this._resultGeometry=s.buffer(this._argGeom,this._distance)}bufferReducedPrecision(){if(0===arguments.length){for(let t=Zs.MAX_PRECISION_DIGITS;t>=0;t--){try{this.bufferReducedPrecision(t)}catch(t){if(!(t instanceof de))throw t;this._saveException=t}if(null!==this._resultGeometry)return null}throw this._saveException}if(1===arguments.length){const t=arguments[0],e=Zs.precisionScaleFactor(this._argGeom,this._distance,t),s=new gt(e);this.bufferFixedPrecision(s)}}bufferOriginalPrecision(){try{const t=new Hs(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance)}catch(t){if(!(t instanceof c))throw t;this._saveException=t}}getResultGeometry(t){return this._distance=t,this.computeGeometry(),this._resultGeometry}setEndCapStyle(t){this._bufParams.setEndCapStyle(t)}computeGeometry(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;const t=this._argGeom.getFactory().getPrecisionModel();t.getType()===gt.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()}setQuadrantSegments(t){this._bufParams.setQuadrantSegments(t)}}Zs.CAP_ROUND=wt.CAP_ROUND,Zs.CAP_BUTT=wt.CAP_FLAT,Zs.CAP_FLAT=wt.CAP_FLAT,Zs.CAP_SQUARE=wt.CAP_SQUARE,Zs.MAX_PRECISION_DIGITS=12;var Ws=s(41564),js=s(87240),Qs=s(49208),Ks=s(77833),Js=s(62609),$s=s(59286),ti=s(7535),ei=s(69727),si=s(40878),ii=s(30470),ni=s(12185),ri=s(23986),oi=s(25231),ai=s(28e3);const li=new(s(29810).A);fetch("data/geojson/roads-seoul.geojson").then((function(t){return t.json()})).then((function(t){const e=(new Qs.A).readFeatures(t,{featureProjection:"EPSG:3857"}),s=new Rt(void 0,void 0);s.inject(si.A,Ks.A,Js.A,ii.Ay,ti.A,$s.A,ei.A);for(let t=0;t<e.length;t++){const i=e[t],n=s.read(i.getGeometry()),r=Zs.bufferOp(n,40);i.setGeometry(s.write(r))}li.addFeatures(e)}));const hi=new ri.A({source:li}),ci=new ni.A({source:new ai.A});new Ws.A({layers:[ci,hi],target:document.getElementById("map"),view:new js.Ay({center:(0,oi.Rb)([126.979293,37.528787]),zoom:15})})},59559:function(t){var e=function(t,e){return t<e};function s(t){if(!(this instanceof s))return new s(t);this.array=[],this.size=0,this.compare=t||e}s.prototype.clone=function(){var t=new s(this.compare);return t.size=this.size,t.array=this.array.slice(0,this.size),t},s.prototype.add=function(t){var e,s,i=this.size;for(this.array[this.size]=t,this.size+=1;i>0&&(e=i-1>>1,s=this.array[e],this.compare(t,s));)this.array[i]=s,i=e;this.array[i]=t},s.prototype.heapify=function(t){var e;for(this.array=t,this.size=t.length,e=this.size>>1;e>=0;e--)this._percolateDown(e)},s.prototype._percolateUp=function(t,e){for(var s,i,n=this.array[t];t>0&&(s=t-1>>1,i=this.array[s],e||this.compare(n,i));)this.array[t]=i,t=s;this.array[t]=n},s.prototype._percolateDown=function(t){for(var e,s,i,n=this.size,r=this.size>>>1,o=this.array[t];t<r&&(s=(e=1+(t<<1))+1,i=this.array[e],s<n&&this.compare(this.array[s],i)&&(e=s,i=this.array[s]),this.compare(i,o));)this.array[t]=i,t=e;this.array[t]=o},s.prototype._removeAt=function(t){if(!(t>this.size-1||t<0))return this._percolateUp(t,!0),this.poll()},s.prototype.remove=function(t){for(var e=0;e<this.size;e++)if(!this.compare(this.array[e],t)&&!this.compare(t,this.array[e]))return this._removeAt(e),!0;return!1},s.prototype.removeOne=function(t){if("function"==typeof t)for(var e=0;e<this.size;e++)if(t(this.array[e]))return this._removeAt(e)},s.prototype.removeMany=function(t,e){if("function"!=typeof t||this.size<1)return[];e=e?Math.min(e,this.size):this.size;for(var s=0,i=new Array(e),n=0,r=new Array(this.size);s<e&&!this.isEmpty();){var o=this.poll();t(o)?i[s++]=o:r[n++]=o}i.length=s;for(var a=0;a<n;)this.add(r[a++]);return i},s.prototype.peek=function(){if(0!=this.size)return this.array[0]},s.prototype.poll=function(){if(0!=this.size){var t=this.array[0];return this.size>1?(this.array[0]=this.array[--this.size],this._percolateDown(0)):this.size-=1,t}},s.prototype.replaceTop=function(t){if(0!=this.size){var e=this.array[0];return this.array[0]=t,this._percolateDown(0),e}},s.prototype.trim=function(){this.array=this.array.slice(0,this.size)},s.prototype.isEmpty=function(){return 0===this.size},s.prototype.forEach=function(t){if(!this.isEmpty()&&"function"==typeof t)for(var e=0,s=this.clone();!s.isEmpty();)t(s.poll(),e++)},s.prototype.kSmallest=function(t){if(0==this.size||t<=0)return[];t=Math.min(this.size,t);const e=Math.min(this.size,2**(t-1)+1);if(e<2)return[this.peek()];const i=new s(this.compare);i.size=e,i.array=this.array.slice(0,e);const n=new Array(t);for(let e=0;e<t;e++)n[e]=i.poll();return n},t.exports=s}},function(t){var e;e=1115,t(t.s=e)}]);
//# sourceMappingURL=jsts.js.map