{"version":3,"file":"export-map.js","mappings":"uLAUA,MAAMA,EAAQ,I,SAAI,IAAM,CACtBC,KAAM,IAAI,IAAK,CACbC,MAAO,cAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAY,CACdC,OAAQ,IAAI,IAAa,CACvBC,IAAK,qDACLC,OAAQ,IAAI,MAEdC,WAAY,QACZR,MAAO,SAAUS,GACf,MAAMP,GAAQ,QAAQO,EAAQC,IAAI,cAAgB,WAGlD,OAFAR,EAAM,GAAK,IACXF,EAAMW,UAAUC,SAASV,GAClBF,CACT,IAEF,IAAI,IAAa,CACfK,OAAQ,IAAI,IAAa,CACvBC,IAAK,oCACLC,OAAQ,IAAI,MAEdM,OAAQ,SAAUJ,GAChB,OAAOA,EAAQC,IAAI,cAAgB,GACrC,EACAI,OAAQ,GACRC,KAAM,GACNC,QAAS,OAGbC,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,KAC9D,MAAMC,EAAYH,SAASI,cAAc,UACnCC,EAAOvB,EAAIwB,UACjBH,EAAUI,MAAQF,EAAK,GACvBF,EAAUK,OAASH,EAAK,GACxBvB,EAAI2B,KAAK,kBAAkB,KACzB3B,EAAI4B,UAAU,OACd,MAAMC,EAAOX,SAASC,eAAe,kBACrCU,EAAKC,KAAOT,EAAUU,YACtBF,EAAKG,OAAO,IAEdhC,EAAI4B,UAAUP,EAAU,G","sources":["webpack:///./export-map.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {asArray} from '../src/ol/color.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport HeatmapLayer from '../src/ol/layer/Heatmap.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst style = new Style({\n  fill: new Fill({\n    color: '#eeeeee',\n  }),\n});\n\nconst map = new Map({\n  layers: [\n    new VectorLayer({\n      source: new VectorSource({\n        url: 'https://openlayers.org/data/vector/ecoregions.json',\n        format: new GeoJSON(),\n      }),\n      background: 'white',\n      style: function (feature) {\n        const color = asArray(feature.get('COLOR_NNH') || '#eeeeee');\n        color[3] = 0.75;\n        style.getFill().setColor(color);\n        return style;\n      },\n    }),\n    new HeatmapLayer({\n      source: new VectorSource({\n        url: 'data/geojson/world-cities.geojson',\n        format: new GeoJSON(),\n      }),\n      weight: function (feature) {\n        return feature.get('population') / 1e7;\n      },\n      radius: 15,\n      blur: 15,\n      opacity: 0.75,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndocument.getElementById('export-png').addEventListener('click', () => {\n  const mapCanvas = document.createElement('canvas');\n  const size = map.getSize();\n  mapCanvas.width = size[0];\n  mapCanvas.height = size[1];\n  map.once('rendercomplete', () => {\n    map.setTarget('map');\n    const link = document.getElementById('image-download');\n    link.href = mapCanvas.toDataURL();\n    link.click();\n  });\n  map.setTarget(mapCanvas);\n});\n"],"names":["style","fill","color","map","layers","source","url","format","background","feature","get","getFill","setColor","weight","radius","blur","opacity","target","view","center","zoom","document","getElementById","addEventListener","mapCanvas","createElement","size","getSize","width","height","once","setTarget","link","href","toDataURL","click"],"sourceRoot":""}