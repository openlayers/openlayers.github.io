{"version":3,"file":"box-selection.js","mappings":"mOAaA,MAAMA,EAAe,IAAI,IAAa,CACpCC,IAAK,qDACLC,OAAQ,IAAI,MAGRC,EAAQ,IAAI,KAAM,CACtBC,KAAM,IAAI,IAAK,CACbC,MAAO,cAILC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAY,CACdC,OAAQR,EACRS,WAAY,UACZN,MAAO,SAAUO,GACf,MAAML,EAAQK,EAAQC,IAAI,cAAgB,UAE1C,OADAR,EAAMS,UAAUC,SAASR,GAClBF,CACT,KAGJW,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,kBAAmB,OAIjBC,EAAgB,IAAI,KAAM,CAC9Bf,KAAM,IAAI,IAAK,CACbC,MAAO,6BAETe,OAAQ,IAAI,IAAO,CACjBf,MAAO,2BACPgB,MAAO,MAKLC,EAAS,IAAI,IAAO,CACxBC,OAAQ,SAAUb,GAChB,QAAsC,YAA7BA,EAAQC,IAAI,aACvB,EACAR,MAAO,SAAUO,GACf,MAAML,EAAQK,EAAQC,IAAI,cAAgB,UAE1C,OADAQ,EAAcP,UAAUC,SAASR,GAC1Bc,CACT,IAEFb,EAAIkB,eAAeF,GAGnB,MAAMG,EAAU,IAAI,IAAQ,CAC1BC,UAAW,OAGbpB,EAAIkB,eAAeC,GAEnBA,EAAQE,GAAG,UAAU,WACnB,MAAMC,EAAYH,EAAQI,cAAcC,YAGlCC,EAAczB,EAAI0B,UAAUC,gBAAgBH,YAC5CI,GAAa,QAASH,GACtBI,EAAaC,KAAKC,OAAOT,EAAU,GAAKG,EAAY,IAAMG,GAC1DI,EAAWF,KAAKC,OAAOT,EAAU,GAAKG,EAAY,IAAMG,GAE9D,IAAK,IAAIK,EAAQJ,EAAYI,GAASD,IAAYC,EAAO,CACvD,MAAMC,EAAOJ,KAAKK,IAAIb,EAAU,GAAKW,EAAQL,EAAYH,EAAY,IAC/DW,EAAQN,KAAKO,IAAIf,EAAU,GAAKW,EAAQL,EAAYH,EAAY,IAChEa,EAAS,CAACJ,EAAMZ,EAAU,GAAIc,EAAOd,EAAU,IAE/CiB,EAAc7C,EACjB8C,oBAAoBF,GACpBrB,QAAQb,GAAYA,EAAQmB,cAAckB,iBAAiBH,KAQxDI,EAAW1C,EAAI0B,UAAUiB,cAQ/B,GAPgBD,GAAYZ,KAAKc,GAAK,IAAO,EAOhC,CACX,MAAMC,EAAS,CAAC,EAAG,GACbC,EAAW3B,EAAQI,cAAcwB,QACvCD,EAASE,WAAWf,EAAQL,EAAY,GACxCkB,EAASG,QAAQP,EAAUG,GAC3B,MAAMP,EAASQ,EAAStB,YACxBe,EAAYW,SAAQ,SAAU9C,GAC5B,MAAM0C,EAAW1C,EAAQmB,cAAcwB,QACvCD,EAASG,QAAQP,EAAUG,GACvBC,EAASL,iBAAiBH,IAC5BtB,EAAOmC,cAAc/C,EAEzB,GACF,MACEmC,EAAYW,QAAQlC,EAAOmC,cAAcC,KAAKpC,GAElD,CACF,IAGAG,EAAQE,GAAG,YAAY,WACrBL,EAAOqC,gBACT,IAEA,MAAMC,EAAUC,SAASC,eAAe,QAExCxC,EAAOK,GAAG,UAAU,WAClB,MAAMoC,EAAQzC,EACX0C,cACAC,WACA3D,KAAKI,GACGA,EAAQC,IAAI,cAEnBoD,EAAMG,OAAS,EACjBN,EAAQO,UAAYJ,EAAMK,KAAK,MAE/BR,EAAQO,UAAY,MAExB,G","sources":["webpack:///./box-selection.js"],"sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\nimport {getWidth} from '../src/ol/extent.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport DragBox from '../src/ol/interaction/DragBox.js';\nimport Select from '../src/ol/interaction/Select.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport Fill from '../src/ol/style/Fill.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport Style from '../src/ol/style/Style.js';\n\nconst vectorSource = new VectorSource({\n  url: 'https://openlayers.org/data/vector/ecoregions.json',\n  format: new GeoJSON(),\n});\n\nconst style = new Style({\n  fill: new Fill({\n    color: '#eeeeee',\n  }),\n});\n\nconst map = new Map({\n  layers: [\n    new VectorLayer({\n      source: vectorSource,\n      background: '#1a2b39',\n      style: function (feature) {\n        const color = feature.get('COLOR_BIO') || '#eeeeee';\n        style.getFill().setColor(color);\n        return style;\n      },\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n    constrainRotation: 16,\n  }),\n});\n\nconst selectedStyle = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.6)',\n  }),\n  stroke: new Stroke({\n    color: 'rgba(255, 255, 255, 0.7)',\n    width: 2,\n  }),\n});\n\n// a normal select interaction to handle click\nconst select = new Select({\n  filter: function (feature) {\n    return !(feature.get('COLOR_BIO') === '#CC6767');\n  },\n  style: function (feature) {\n    const color = feature.get('COLOR_BIO') || '#eeeeee';\n    selectedStyle.getFill().setColor(color);\n    return selectedStyle;\n  },\n});\nmap.addInteraction(select);\n\n// a DragBox interaction used to select features by drawing boxes\nconst dragBox = new DragBox({\n  condition: platformModifierKeyOnly,\n});\n\nmap.addInteraction(dragBox);\n\ndragBox.on('boxend', function () {\n  const boxExtent = dragBox.getGeometry().getExtent();\n\n  // if the extent crosses the antimeridian process each world separately\n  const worldExtent = map.getView().getProjection().getExtent();\n  const worldWidth = getWidth(worldExtent);\n  const startWorld = Math.floor((boxExtent[0] - worldExtent[0]) / worldWidth);\n  const endWorld = Math.floor((boxExtent[2] - worldExtent[0]) / worldWidth);\n\n  for (let world = startWorld; world <= endWorld; ++world) {\n    const left = Math.max(boxExtent[0] - world * worldWidth, worldExtent[0]);\n    const right = Math.min(boxExtent[2] - world * worldWidth, worldExtent[2]);\n    const extent = [left, boxExtent[1], right, boxExtent[3]];\n\n    const boxFeatures = vectorSource\n      .getFeaturesInExtent(extent)\n      .filter((feature) => feature.getGeometry().intersectsExtent(extent));\n\n    // features that intersect the box geometry are added to the\n    // collection of selected features\n\n    // if the view is not obliquely rotated the box geometry and\n    // its extent are equalivalent so intersecting features can\n    // be added directly to the collection\n    const rotation = map.getView().getRotation();\n    const oblique = rotation % (Math.PI / 2) !== 0;\n\n    // when the view is obliquely rotated the box extent will\n    // exceed its geometry so both the box and the candidate\n    // feature geometries are rotated around a common anchor\n    // to confirm that, with the box geometry aligned with its\n    // extent, the geometries intersect\n    if (oblique) {\n      const anchor = [0, 0];\n      const geometry = dragBox.getGeometry().clone();\n      geometry.translate(-world * worldWidth, 0);\n      geometry.rotate(-rotation, anchor);\n      const extent = geometry.getExtent();\n      boxFeatures.forEach(function (feature) {\n        const geometry = feature.getGeometry().clone();\n        geometry.rotate(-rotation, anchor);\n        if (geometry.intersectsExtent(extent)) {\n          select.selectFeature(feature);\n        }\n      });\n    } else {\n      boxFeatures.forEach(select.selectFeature.bind(select));\n    }\n  }\n});\n\n// clear selection when drawing a new box and when clicking on the map\ndragBox.on('boxstart', function () {\n  select.clearSelection();\n});\n\nconst infoBox = document.getElementById('info');\n\nselect.on('select', function () {\n  const names = select\n    .getFeatures()\n    .getArray()\n    .map((feature) => {\n      return feature.get('ECO_NAME');\n    });\n  if (names.length > 0) {\n    infoBox.innerHTML = names.join(', ');\n  } else {\n    infoBox.innerHTML = 'None';\n  }\n});\n"],"names":["vectorSource","url","format","style","fill","color","map","layers","source","background","feature","get","getFill","setColor","target","view","center","zoom","constrainRotation","selectedStyle","stroke","width","select","filter","addInteraction","dragBox","condition","on","boxExtent","getGeometry","getExtent","worldExtent","getView","getProjection","worldWidth","startWorld","Math","floor","endWorld","world","left","max","right","min","extent","boxFeatures","getFeaturesInExtent","intersectsExtent","rotation","getRotation","PI","anchor","geometry","clone","translate","rotate","forEach","selectFeature","bind","clearSelection","infoBox","document","getElementById","names","getFeatures","getArray","length","innerHTML","join"],"sourceRoot":""}