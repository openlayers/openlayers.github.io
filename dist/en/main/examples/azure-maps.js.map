{"version":3,"file":"azure-maps.js","mappings":"uJAMA,UAEA,MAAMA,EAAgB,CACpB,oBACA,sBACA,2BAMF,IAAIC,EAAiBC,EAAcC,EA0BnC,SAASC,EAAYC,GACnBH,EAAe,IAAI,IAAU,CAC3BI,OAAQ,IAAI,IAAU,CACpBC,IAAK,wHAA+BN,eAA6BD,EAAcK,KAC/EG,YAAa,YACbC,aAAc,MAAK,IAAIC,MAAOC,sCAIlCR,EAAIS,SAASV,GAGbC,EAAIU,KAAK,kBAAkB,KACzB,IAAK,MAAMC,KAASX,EAAIY,YAAYC,WAAY,CAC9C,GAAIF,IAAUZ,EACZ,MAEFC,EAAIc,YAAYH,EAClB,KAIFI,SAASC,iBAAiB,cAAcC,SAASC,IAC/CA,EAAIC,UAAUC,OAAO,SAAUF,EAAIG,OAASnB,EAAM,GAEtD,CAjDAa,SAASO,eAAe,aAAaC,iBAAiB,UAAWC,IAC/DA,EAAMC,iBACN3B,EAAkBiB,SAASO,eAAe,UAAUD,MAAMK,OAE1D1B,EAAM,IAAI,IAAI,CACZ2B,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,KAAM,OACfC,KAAM,OAGVf,SAASO,eAAe,kBAAkBS,MAAMC,QAAU,OAC1DjB,SAASO,eAAe,iBAAiBS,MAAMC,QAAU,QAGzDjB,SAASC,iBAAiB,cAAcC,SAASC,IAC/CA,EAAIK,iBAAiB,SAAS,KAC5BtB,EAAYgC,OAAOf,EAAIG,OAAO,GAC9B,IAGJpB,EAAY,EAAE,G","sources":["webpack:///./azure-maps.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport {useGeographic} from 'ol/proj.js';\nimport ImageTile from 'ol/source/ImageTile.js';\n\nuseGeographic();\n\nconst someTilesetId = [\n  'microsoft.imagery',\n  'microsoft.base.road',\n  'microsoft.base.darkgrey',\n];\n\nconst baseUrl =\n  'https://atlas.microsoft.com/map/tile?zoom={z}&x={x}&y={y}&tileSize=256&language=EN&&api-version=2.0';\n\nlet subscriptionKey, currentLayer, map;\n\ndocument.getElementById('auth-form').addEventListener('submit', (event) => {\n  event.preventDefault();\n  subscriptionKey = document.getElementById('secret').value.trim();\n\n  map = new Map({\n    target: 'map',\n    view: new View({\n      center: [2.35, 48.85],\n      zoom: 12,\n    }),\n  });\n  document.getElementById('auth-interface').style.display = 'none';\n  document.getElementById('map-container').style.display = 'block';\n\n  // Add behavior to the tileset buttons\n  document.querySelectorAll('.layer-btn').forEach((btn) => {\n    btn.addEventListener('click', () => {\n      updateLayer(Number(btn.value));\n    });\n  });\n\n  updateLayer(0);\n});\n\nfunction updateLayer(index) {\n  currentLayer = new TileLayer({\n    source: new ImageTile({\n      url: `${baseUrl}&subscription-key=${subscriptionKey}&tilesetId=${someTilesetId[index]}`,\n      crossOrigin: 'anonymous',\n      attributions: `Â© ${new Date().getFullYear()} TomTom, Microsoft`,\n    }),\n  });\n\n  map.addLayer(currentLayer);\n\n  // Remove previous layers after the map has rendered\n  map.once('rendercomplete', () => {\n    for (const layer of map.getLayers().getArray()) {\n      if (layer === currentLayer) {\n        break; // Skip the newly added layer\n      }\n      map.removeLayer(layer);\n    }\n  });\n\n  // Update state of the tileset buttons\n  document.querySelectorAll('.layer-btn').forEach((btn) => {\n    btn.classList.toggle('active', btn.value == index);\n  });\n}\n"],"names":["someTilesetId","subscriptionKey","currentLayer","map","updateLayer","index","source","url","crossOrigin","attributions","Date","getFullYear","addLayer","once","layer","getLayers","getArray","removeLayer","document","querySelectorAll","forEach","btn","classList","toggle","value","getElementById","addEventListener","event","preventDefault","trim","target","view","center","zoom","style","display","Number"],"sourceRoot":""}